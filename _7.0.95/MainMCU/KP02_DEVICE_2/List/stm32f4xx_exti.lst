###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_exti.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_exti.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\stm32f4xx_exti.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\stm32f4xx_exti.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_exti.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the EXTI peripheral:           
      9            *           + Initialization and Configuration
     10            *           + Interrupts and flags management
     11            *
     12          @verbatim  
     13          
     14           ===================================================================
     15                                 ##### EXTI features #####
     16           ===================================================================
     17          
     18           [..] External interrupt/event lines are mapped as following:
     19             (#) All available GPIO pins are connected to the 16 external 
     20                 interrupt/event lines from EXTI0 to EXTI15.
     21             (#) EXTI line 16 is connected to the PVD Output
     22             (#) EXTI line 17 is connected to the RTC Alarm event
     23             (#) EXTI line 18 is connected to the USB OTG FS Wakeup from suspend event                                    
     24             (#) EXTI line 19 is connected to the Ethernet Wakeup event
     25             (#) EXTI line 20 is connected to the USB OTG HS (configured in FS) Wakeup event 
     26             (#) EXTI line 21 is connected to the RTC Tamper and Time Stamp events                                               
     27             (#) EXTI line 22 is connected to the RTC Wakeup event
     28                    
     29                    
     30                          ##### How to use this driver #####
     31           ===================================================================  
     32           
     33           [..] In order to use an I/O pin as an external interrupt source, follow steps 
     34                below:
     35             (#) Configure the I/O in input mode using GPIO_Init()
     36             (#) Select the input source pin for the EXTI line using SYSCFG_EXTILineConfig()
     37             (#) Select the mode(interrupt, event) and configure the trigger 
     38                 selection (Rising, falling or both) using EXTI_Init()
     39             (#) Configure NVIC IRQ channel mapped to the EXTI line using NVIC_Init()
     40          
     41           [..]     
     42             (@) SYSCFG APB clock must be enabled to get write access to SYSCFG_EXTICRx
     43                 registers using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     44                      
     45          @endverbatim                  
     46            *
     47            ******************************************************************************
     48            * @attention
     49            *
     50            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     51            *
     52            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     53            * You may not use this file except in compliance with the License.
     54            * You may obtain a copy of the License at:
     55            *
     56            *        http://www.st.com/software_license_agreement_liberty_v2
     57            *
     58            * Unless required by applicable law or agreed to in writing, software 
     59            * distributed under the License is distributed on an "AS IS" BASIS, 
     60            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     61            * See the License for the specific language governing permissions and
     62            * limitations under the License.
     63            *
     64            ******************************************************************************
     65            */
     66          
     67          /* Includes ------------------------------------------------------------------*/
     68          #include "stm32f4xx_exti.h"
     69          
     70          /** @addtogroup STM32F4xx_StdPeriph_Driver
     71            * @{
     72            */
     73          
     74          /** @defgroup EXTI 
     75            * @brief EXTI driver modules
     76            * @{
     77            */
     78          
     79          /* Private typedef -----------------------------------------------------------*/
     80          /* Private define ------------------------------------------------------------*/
     81          
     82          #define EXTI_LINENONE    ((uint32_t)0x00000)  /* No interrupt selected */
     83          
     84          /* Private macro -------------------------------------------------------------*/
     85          /* Private variables ---------------------------------------------------------*/
     86          /* Private function prototypes -----------------------------------------------*/
     87          /* Private functions ---------------------------------------------------------*/
     88          
     89          /** @defgroup EXTI_Private_Functions
     90            * @{
     91            */
     92          
     93          /** @defgroup EXTI_Group1 Initialization and Configuration functions
     94           *  @brief   Initialization and Configuration functions 
     95           *
     96          @verbatim   
     97           ===============================================================================
     98                       ##### Initialization and Configuration functions #####
     99           ===============================================================================  
    100          
    101          @endverbatim
    102            * @{
    103            */
    104          
    105          /**
    106            * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
    107            * @param  None
    108            * @retval None
    109            */

   \                                 In section .text, align 2, keep-with-next
    110          void EXTI_DeInit(void)
    111          {
    112            EXTI->IMR = 0x00000000;
   \                     EXTI_DeInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7  ;; 0x40013c00
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    113            EXTI->EMR = 0x00000000;
   \   00000006   0x6041             STR      R1,[R0, #+4]
    114            EXTI->RTSR = 0x00000000;
   \   00000008   0x6081             STR      R1,[R0, #+8]
    115            EXTI->FTSR = 0x00000000;
   \   0000000A   0x60C1             STR      R1,[R0, #+12]
    116            EXTI->PR = 0x007FFFFF;
   \   0000000C   0x....             LDR.N    R1,??DataTable7_1  ;; 0x7fffff
   \   0000000E   0x6141             STR      R1,[R0, #+20]
    117          }
   \   00000010   0x4770             BX       LR               ;; return
    118          
    119          /**
    120            * @brief  Initializes the EXTI peripheral according to the specified
    121            *         parameters in the EXTI_InitStruct.
    122            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
    123            *         that contains the configuration information for the EXTI peripheral.
    124            * @retval None
    125            */

   \                                 In section .text, align 2, keep-with-next
    126          void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
    127          {
   \                     EXTI_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    128            uint32_t tmp = 0;
    129          
    130            /* Check the parameters */
    131            assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
   \   00000004   0x7920             LDRB     R0,[R4, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD006             BEQ.N    ??EXTI_Init_0
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xD004             BEQ.N    ??EXTI_Init_0
   \   0000000E   0x2183             MOVS     R1,#+131
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    132            assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
   \                     ??EXTI_Init_0: (+1)
   \   00000018   0x7960             LDRB     R0,[R4, #+5]
   \   0000001A   0x2808             CMP      R0,#+8
   \   0000001C   0xD008             BEQ.N    ??EXTI_Init_1
   \   0000001E   0x280C             CMP      R0,#+12
   \   00000020   0xD006             BEQ.N    ??EXTI_Init_1
   \   00000022   0x2810             CMP      R0,#+16
   \   00000024   0xD004             BEQ.N    ??EXTI_Init_1
   \   00000026   0x2184             MOVS     R1,#+132
   \   00000028   0x.... 0x....      ADR.W    R0,?_0
   \   0000002C   0x.... 0x....      BL       assert_failed
    133            assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
   \                     ??EXTI_Init_1: (+1)
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x0DC1             LSRS     R1,R0,#+23
   \   00000034   0x05C9             LSLS     R1,R1,#+23
   \   00000036   0xD101             BNE.N    ??EXTI_Init_2
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD104             BNE.N    ??EXTI_Init_3
   \                     ??EXTI_Init_2: (+1)
   \   0000003C   0x2185             MOVS     R1,#+133
   \   0000003E   0x.... 0x....      ADR.W    R0,?_0
   \   00000042   0x.... 0x....      BL       assert_failed
    134            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
   \                     ??EXTI_Init_3: (+1)
   \   00000046   0x79A0             LDRB     R0,[R4, #+6]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD006             BEQ.N    ??EXTI_Init_4
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD004             BEQ.N    ??EXTI_Init_4
   \   00000050   0x2186             MOVS     R1,#+134
   \   00000052   0x.... 0x....      ADR.W    R0,?_0
   \   00000056   0x.... 0x....      BL       assert_failed
    135          
    136            tmp = (uint32_t)EXTI_BASE;
    137               
    138            if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
   \                     ??EXTI_Init_4: (+1)
   \   0000005A   0x6820             LDR      R0,[R4, #+0]
   \   0000005C   0x43C2             MVNS     R2,R0
   \   0000005E   0x....             LDR.N    R0,??DataTable7  ;; 0x40013c00
   \   00000060   0x79A1             LDRB     R1,[R4, #+6]
   \   00000062   0x2900             CMP      R1,#+0
   \   00000064   0xD027             BEQ.N    ??EXTI_Init_5
    139            {
    140              /* Clear EXTI line configuration */
    141              EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
   \   00000066   0x4601             MOV      R1,R0
   \   00000068   0x680B             LDR      R3,[R1, #+0]
   \   0000006A   0x401A             ANDS     R2,R2,R3
   \   0000006C   0x600A             STR      R2,[R1, #+0]
    142              EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
   \   0000006E   0x684A             LDR      R2,[R1, #+4]
   \   00000070   0x6823             LDR      R3,[R4, #+0]
   \   00000072   0x439A             BICS     R2,R2,R3
   \   00000074   0x604A             STR      R2,[R1, #+4]
    143              
    144              tmp += EXTI_InitStruct->EXTI_Mode;
   \   00000076   0x7922             LDRB     R2,[R4, #+4]
   \   00000078   0x1883             ADDS     R3,R0,R2
    145          
    146              *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \   0000007A   0x681A             LDR      R2,[R3, #+0]
   \   0000007C   0x6825             LDR      R5,[R4, #+0]
   \   0000007E   0x432A             ORRS     R2,R5,R2
   \   00000080   0x601A             STR      R2,[R3, #+0]
    147          
    148              /* Clear Rising Falling edge configuration */
    149              EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
   \   00000082   0x688A             LDR      R2,[R1, #+8]
   \   00000084   0x6823             LDR      R3,[R4, #+0]
   \   00000086   0x439A             BICS     R2,R2,R3
   \   00000088   0x608A             STR      R2,[R1, #+8]
    150              EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
   \   0000008A   0x68CA             LDR      R2,[R1, #+12]
   \   0000008C   0x6823             LDR      R3,[R4, #+0]
   \   0000008E   0x439A             BICS     R2,R2,R3
   \   00000090   0x60CA             STR      R2,[R1, #+12]
    151              
    152              /* Select the trigger for the selected external interrupts */
    153              if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
   \   00000092   0x7962             LDRB     R2,[R4, #+5]
   \   00000094   0x6825             LDR      R5,[R4, #+0]
   \   00000096   0x2A10             CMP      R2,#+16
   \   00000098   0xD107             BNE.N    ??EXTI_Init_6
    154              {
    155                /* Rising Falling edge */
    156                EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
   \   0000009A   0x6888             LDR      R0,[R1, #+8]
   \   0000009C   0x4328             ORRS     R0,R5,R0
   \   0000009E   0x6088             STR      R0,[R1, #+8]
    157                EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
   \   000000A0   0x68C8             LDR      R0,[R1, #+12]
   \   000000A2   0x6822             LDR      R2,[R4, #+0]
   \   000000A4   0x4310             ORRS     R0,R2,R0
   \   000000A6   0x60C8             STR      R0,[R1, #+12]
   \   000000A8   0xBD31             POP      {R0,R4,R5,PC}
    158              }
    159              else
    160              {
    161                tmp = (uint32_t)EXTI_BASE;
    162                tmp += EXTI_InitStruct->EXTI_Trigger;
   \                     ??EXTI_Init_6: (+1)
   \   000000AA   0xFA50 0xF382      UXTAB    R3,R0,R2
    163          
    164                *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \   000000AE   0x6818             LDR      R0,[R3, #+0]
   \   000000B0   0x4328             ORRS     R0,R5,R0
   \   000000B2   0x6018             STR      R0,[R3, #+0]
   \   000000B4   0xBD31             POP      {R0,R4,R5,PC}
    165              }
    166            }
    167            else
    168            {
    169              tmp += EXTI_InitStruct->EXTI_Mode;
   \                     ??EXTI_Init_5: (+1)
   \   000000B6   0x7921             LDRB     R1,[R4, #+4]
   \   000000B8   0x1843             ADDS     R3,R0,R1
    170          
    171              /* Disable the selected external lines */
    172              *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
   \   000000BA   0x6818             LDR      R0,[R3, #+0]
   \   000000BC   0x4010             ANDS     R0,R2,R0
   \   000000BE   0x6018             STR      R0,[R3, #+0]
    173            }
    174          }
   \   000000C0   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    175          
    176          /**
    177            * @brief  Fills each EXTI_InitStruct member with its reset value.
    178            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
    179            *         be initialized.
    180            * @retval None
    181            */

   \                                 In section .text, align 2, keep-with-next
    182          void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
    183          {
    184            EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
   \                     EXTI_StructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    185            EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000004   0x7101             STRB     R1,[R0, #+4]
    186            EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x7141             STRB     R1,[R0, #+5]
    187            EXTI_InitStruct->EXTI_LineCmd = DISABLE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7181             STRB     R1,[R0, #+6]
    188          }
   \   0000000E   0x4770             BX       LR               ;; return
    189          
    190          /**
    191            * @brief  Generates a Software interrupt on selected EXTI line.
    192            * @param  EXTI_Line: specifies the EXTI line on which the software interrupt
    193            *         will be generated.
    194            *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
    195            * @retval None
    196            */

   \                                 In section .text, align 2, keep-with-next
    197          void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
    198          {
   \                     EXTI_GenerateSWInterrupt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    199            /* Check the parameters */
    200            assert_param(IS_EXTI_LINE(EXTI_Line));
   \   00000004   0x0DE0             LSRS     R0,R4,#+23
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD101             BNE.N    ??EXTI_GenerateSWInterrupt_0
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD104             BNE.N    ??EXTI_GenerateSWInterrupt_1
   \                     ??EXTI_GenerateSWInterrupt_0: (+1)
   \   0000000E   0x21C8             MOVS     R1,#+200
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    201            
    202            EXTI->SWIER |= EXTI_Line;
   \                     ??EXTI_GenerateSWInterrupt_1: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40013c10
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0x4321             ORRS     R1,R4,R1
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    203          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    204          
    205          /**
    206            * @}
    207            */
    208          
    209          /** @defgroup EXTI_Group2 Interrupts and flags management functions
    210           *  @brief   Interrupts and flags management functions 
    211           *
    212          @verbatim   
    213           ===============================================================================
    214                       ##### Interrupts and flags management functions #####
    215           ===============================================================================  
    216          
    217          @endverbatim
    218            * @{
    219            */
    220          
    221          /**
    222            * @brief  Checks whether the specified EXTI line flag is set or not.
    223            * @param  EXTI_Line: specifies the EXTI line flag to check.
    224            *          This parameter can be EXTI_Linex where x can be(0..22)
    225            * @retval The new state of EXTI_Line (SET or RESET).
    226            */

   \                                 In section .text, align 2, keep-with-next
    227          FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
    228          {
   \                     EXTI_GetFlagStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    229            FlagStatus bitstatus = RESET;
   \   00000004   0x2500             MOVS     R5,#+0
    230            /* Check the parameters */
    231            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD03F             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD03D             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD03B             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD039             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000016   0x2C10             CMP      R4,#+16
   \   00000018   0xD037             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000001A   0x2C20             CMP      R4,#+32
   \   0000001C   0xD035             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000001E   0x2C40             CMP      R4,#+64
   \   00000020   0xD033             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000022   0x2C80             CMP      R4,#+128
   \   00000024   0xD031             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000026   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000002A   0xD02E             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000002C   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000030   0xD02B             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000032   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000036   0xD028             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000038   0xF5B4 0x6F00      CMP      R4,#+2048
   \   0000003C   0xD025             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000003E   0xF5B4 0x5F80      CMP      R4,#+4096
   \   00000042   0xD022             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000044   0xF5B4 0x5F00      CMP      R4,#+8192
   \   00000048   0xD01F             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000004A   0xF5B4 0x4F80      CMP      R4,#+16384
   \   0000004E   0xD01C             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000050   0xF5B4 0x4F00      CMP      R4,#+32768
   \   00000054   0xD019             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000056   0xF5B4 0x3F80      CMP      R4,#+65536
   \   0000005A   0xD016             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000005C   0xF5B4 0x3F00      CMP      R4,#+131072
   \   00000060   0xD013             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000062   0xF5B4 0x2F80      CMP      R4,#+262144
   \   00000066   0xD010             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000068   0xF5B4 0x2F00      CMP      R4,#+524288
   \   0000006C   0xD00D             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000006E   0xF5B4 0x1F80      CMP      R4,#+1048576
   \   00000072   0xD00A             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000074   0xF5B4 0x1F00      CMP      R4,#+2097152
   \   00000078   0xD007             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000007A   0xF5B4 0x0F80      CMP      R4,#+4194304
   \   0000007E   0xD004             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000080   0x21E7             MOVS     R1,#+231
   \   00000082   0x.... 0x....      ADR.W    R0,?_0
   \   00000086   0x.... 0x....      BL       assert_failed
    232            
    233            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
   \                     ??EXTI_GetFlagStatus_0: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013c14
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x4220             TST      R0,R4
   \   00000090   0xD000             BEQ.N    ??EXTI_GetFlagStatus_1
    234            {
    235              bitstatus = SET;
   \   00000092   0x2501             MOVS     R5,#+1
    236            }
    237            else
    238            {
    239              bitstatus = RESET;
    240            }
    241            return bitstatus;
   \                     ??EXTI_GetFlagStatus_1: (+1)
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    242          }
    243          
    244          /**
    245            * @brief  Clears the EXTI's line pending flags.
    246            * @param  EXTI_Line: specifies the EXTI lines flags to clear.
    247            *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
    248            * @retval None
    249            */

   \                                 In section .text, align 2, keep-with-next
    250          void EXTI_ClearFlag(uint32_t EXTI_Line)
    251          {
   \                     EXTI_ClearFlag: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    252            /* Check the parameters */
    253            assert_param(IS_EXTI_LINE(EXTI_Line));
   \   00000004   0x0DE0             LSRS     R0,R4,#+23
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD101             BNE.N    ??EXTI_ClearFlag_0
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD104             BNE.N    ??EXTI_ClearFlag_1
   \                     ??EXTI_ClearFlag_0: (+1)
   \   0000000E   0x21FD             MOVS     R1,#+253
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    254            
    255            EXTI->PR = EXTI_Line;
   \                     ??EXTI_ClearFlag_1: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013c14
   \   0000001A   0x6004             STR      R4,[R0, #+0]
    256          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    257          
    258          /**
    259            * @brief  Checks whether the specified EXTI line is asserted or not.
    260            * @param  EXTI_Line: specifies the EXTI line to check.
    261            *          This parameter can be EXTI_Linex where x can be(0..22)
    262            * @retval The new state of EXTI_Line (SET or RESET).
    263            */

   \                                 In section .text, align 2, keep-with-next
    264          ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
    265          {
   \                     EXTI_GetITStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    266            FlagStatus bitstatus = RESET;
   \   00000004   0x2500             MOVS     R5,#+0
    267            /* Check the parameters */
    268            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD040             BEQ.N    ??EXTI_GetITStatus_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD03E             BEQ.N    ??EXTI_GetITStatus_0
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD03C             BEQ.N    ??EXTI_GetITStatus_0
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD03A             BEQ.N    ??EXTI_GetITStatus_0
   \   00000016   0x2C10             CMP      R4,#+16
   \   00000018   0xD038             BEQ.N    ??EXTI_GetITStatus_0
   \   0000001A   0x2C20             CMP      R4,#+32
   \   0000001C   0xD036             BEQ.N    ??EXTI_GetITStatus_0
   \   0000001E   0x2C40             CMP      R4,#+64
   \   00000020   0xD034             BEQ.N    ??EXTI_GetITStatus_0
   \   00000022   0x2C80             CMP      R4,#+128
   \   00000024   0xD032             BEQ.N    ??EXTI_GetITStatus_0
   \   00000026   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000002A   0xD02F             BEQ.N    ??EXTI_GetITStatus_0
   \   0000002C   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000030   0xD02C             BEQ.N    ??EXTI_GetITStatus_0
   \   00000032   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000036   0xD029             BEQ.N    ??EXTI_GetITStatus_0
   \   00000038   0xF5B4 0x6F00      CMP      R4,#+2048
   \   0000003C   0xD026             BEQ.N    ??EXTI_GetITStatus_0
   \   0000003E   0xF5B4 0x5F80      CMP      R4,#+4096
   \   00000042   0xD023             BEQ.N    ??EXTI_GetITStatus_0
   \   00000044   0xF5B4 0x5F00      CMP      R4,#+8192
   \   00000048   0xD020             BEQ.N    ??EXTI_GetITStatus_0
   \   0000004A   0xF5B4 0x4F80      CMP      R4,#+16384
   \   0000004E   0xD01D             BEQ.N    ??EXTI_GetITStatus_0
   \   00000050   0xF5B4 0x4F00      CMP      R4,#+32768
   \   00000054   0xD01A             BEQ.N    ??EXTI_GetITStatus_0
   \   00000056   0xF5B4 0x3F80      CMP      R4,#+65536
   \   0000005A   0xD017             BEQ.N    ??EXTI_GetITStatus_0
   \   0000005C   0xF5B4 0x3F00      CMP      R4,#+131072
   \   00000060   0xD014             BEQ.N    ??EXTI_GetITStatus_0
   \   00000062   0xF5B4 0x2F80      CMP      R4,#+262144
   \   00000066   0xD011             BEQ.N    ??EXTI_GetITStatus_0
   \   00000068   0xF5B4 0x2F00      CMP      R4,#+524288
   \   0000006C   0xD00E             BEQ.N    ??EXTI_GetITStatus_0
   \   0000006E   0xF5B4 0x1F80      CMP      R4,#+1048576
   \   00000072   0xD00B             BEQ.N    ??EXTI_GetITStatus_0
   \   00000074   0xF5B4 0x1F00      CMP      R4,#+2097152
   \   00000078   0xD008             BEQ.N    ??EXTI_GetITStatus_0
   \   0000007A   0xF5B4 0x0F80      CMP      R4,#+4194304
   \   0000007E   0xD005             BEQ.N    ??EXTI_GetITStatus_0
   \   00000080   0xF44F 0x7186      MOV      R1,#+268
   \   00000084   0x.... 0x....      ADR.W    R0,?_0
   \   00000088   0x.... 0x....      BL       assert_failed
    269            
    270            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
   \                     ??EXTI_GetITStatus_0: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013c14
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x4220             TST      R0,R4
   \   00000092   0xD000             BEQ.N    ??EXTI_GetITStatus_1
    271            {
    272              bitstatus = SET;
   \   00000094   0x2501             MOVS     R5,#+1
    273            }
    274            else
    275            {
    276              bitstatus = RESET;
    277            }
    278            return bitstatus;
   \                     ??EXTI_GetITStatus_1: (+1)
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    279            
    280          }
    281          
    282          /**
    283            * @brief  Clears the EXTI's line pending bits.
    284            * @param  EXTI_Line: specifies the EXTI lines to clear.
    285            *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
    286            * @retval None
    287            */

   \                                 In section .text, align 2, keep-with-next
    288          void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
    289          {
   \                     EXTI_ClearITPendingBit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    290            /* Check the parameters */
    291            assert_param(IS_EXTI_LINE(EXTI_Line));
   \   00000004   0x0DE0             LSRS     R0,R4,#+23
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD101             BNE.N    ??EXTI_ClearITPendingBit_0
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD105             BNE.N    ??EXTI_ClearITPendingBit_1
   \                     ??EXTI_ClearITPendingBit_0: (+1)
   \   0000000E   0xF240 0x1123      MOVW     R1,#+291
   \   00000012   0x.... 0x....      ADR.W    R0,?_0
   \   00000016   0x.... 0x....      BL       assert_failed
    292            
    293            EXTI->PR = EXTI_Line;
   \                     ??EXTI_ClearITPendingBit_1: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40013c14
   \   0000001C   0x6004             STR      R4,[R0, #+0]
    294          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40013C00         DC32     0x40013c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x007FFFFF         DC32     0x7fffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40013C10         DC32     0x40013c10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 57H, 4FH, 52H, 4BH, 5CH
   \              0x5C 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5C    
   \   00000008   0x46 0x69          DC8 46H, 69H, 72H, 6DH, 77H, 61H, 72H, 65H
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \   00000010   0x5F 0x4C          DC8 5FH, 4CH, 61H, 73H, 74H, 52H, 65H, 6CH
   \              0x61 0x73    
   \              0x74 0x52    
   \              0x65 0x6C    
   \   00000018   0x65 0x61          DC8 65H, 61H, 73H, 65H, 5CH, 5FH, 37H, 2EH
   \              0x73 0x65    
   \              0x5C 0x5F    
   \              0x37 0x2E    
   \   00000020   0x30 0x2E          DC8 30H, 2EH, 39H, 35H, 5CH, 4DH, 61H, 69H
   \              0x39 0x35    
   \              0x5C 0x4D    
   \              0x61 0x69    
   \   00000028   0x6E 0x4D          DC8 6EH, 4DH, 43H, 55H, 5CH, 4CH, 69H, 62H
   \              0x43 0x55    
   \              0x5C 0x4C    
   \              0x69 0x62    
   \   00000030   0x72 0x61          DC8 72H, 61H, 72H, 69H, 65H, 73H, 5CH, 53H
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x5C 0x53    
   \   00000038   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 46H, 34H, 78H, 78H
   \              0x33 0x32    
   \              0x46 0x34    
   \              0x78 0x78    
   \   00000040   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000048   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000050   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 73H, 74H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x73 0x74    
   \   00000058   0x6D 0x33          DC8 6DH, 33H, 32H, 66H, 34H, 78H, 78H, 5FH
   \              0x32 0x66    
   \              0x34 0x78    
   \              0x78 0x5F    
   \   00000060   0x65 0x78          DC8 65H, 78H, 74H, 69H, 2EH, 63H, 0
   \              0x74 0x69    
   \              0x2E 0x63    
   \              0x00         
   \   00000067   0x00               DC8 0
    295          
    296          /**
    297            * @}
    298            */
    299          
    300          /**
    301            * @}
    302            */
    303          
    304          /**
    305            * @}
    306            */
    307          
    308          /**
    309            * @}
    310            */
    311          
    312          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EXTI_ClearFlag
         8   -> assert_failed
       8   EXTI_ClearITPendingBit
         8   -> assert_failed
       0   EXTI_DeInit
       8   EXTI_GenerateSWInterrupt
         8   -> assert_failed
      16   EXTI_GetFlagStatus
        16   -> assert_failed
      16   EXTI_GetITStatus
        16   -> assert_failed
      16   EXTI_Init
        16   -> assert_failed
       0   EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
     104  ?_0
      30  EXTI_ClearFlag
      32  EXTI_ClearITPendingBit
      18  EXTI_DeInit
      34  EXTI_GenerateSWInterrupt
     152  EXTI_GetFlagStatus
     154  EXTI_GetITStatus
     194  EXTI_Init
      16  EXTI_StructInit

 
 750 bytes in section .text
 
 750 bytes of CODE memory

Errors: none
Warnings: none

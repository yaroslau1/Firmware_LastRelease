###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        08/Oct/2018  09:58:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TRespProcessor.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TRespProcessor.cpp -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\TRespProcessor.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\TRespProcessor.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TRespProcessor.cpp
      1          /************************************************************************************/
      2          /* @title																			*/
      3          /* @author		Aleksis														*/
      4          /* @version		0.1																	*/
      5          /* @date		12.11.2012															*/
      6          /************************************************************************************/
      7          /* @brief																			*/
      8          /************************************************************************************/
      9          #include "TRespProcessor.h"
     10          #include "TFrame.h"
     11          #include "TDevice.h"
     12          #include "TAppProcessor.h"
     13          /*----------------------------------------------------------------------------------*/
     14          RespData_t TRespProcessor::RespData;
     15          RespData_t TRespProcessor::WrRespData;
     16          Respiration_TypeDef TRespProcessor::Respiration;
     17          
     18          bool TRespProcessor::RR_Led_Enable = false;
     19          
     20          /*----------------------------------------------------------------------------------*/
     21          /* @brief	ЦОС ЭКГ данных															*/
     22          /* @param	None																	*/
     23          /* @return	None																	*/
     24          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     25          void TRespProcessor::ChannelsProcessing( void )
     26          {
   \                     _ZN14TRespProcessor18ChannelsProcessingEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     27          	RespData.Channel_1.ChannelData = ( RespData.Channel_1.ChannelData * 100 ) / ADS1292_NORMALIZE_DIVIDER;	// нормализуем сигнал по ГОСТ 
   \   00000002   0x....             LDR.N    R4,??DataTable5
   \   00000004   0x6A60             LDR      R0,[R4, #+36]
   \   00000006   0x2164             MOVS     R1,#+100
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0xF44F 0x7107      MOV      R1,#+540
   \   0000000E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000012   0x6260             STR      R0,[R4, #+36]
     28          //	RespData.Channel_1.ChannelData = RespData.Channel_1.ChannelData * 10000;	// нормализуем сигнал по ГОСТ 
     29          	RespData.Channel_2.ChannelData = RespData.Channel_1.ChannelData;
   \   00000014   0x62A0             STR      R0,[R4, #+40]
     30          //	RespData.Channel_2.ChannelData = ( RespData.Channel_2.ChannelData * 100 ) / ADS1292_NORMALIZE_DIVIDER;	// нормализуем сигнал по ГОСТ 
     31          	if( TFrame::StartMonitioring == true )
   \   00000016   0x....             LDR.N    R1,??DataTable5_1
   \   00000018   0x7809             LDRB     R1,[R1, #+0]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD007             BEQ.N    ??ChannelsProcessing_0
     32          	{
     33          		RespData.Channel_1.ChannelData = FHigh_0_32_Fixed_Resp( RespData.Channel_1.ChannelData, false );	// активировать фильтр при тестах 
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x.... 0x....      BL       _ZN4TDSP21FHigh_0_32_Fixed_RespEib
   \   00000024   0x6260             STR      R0,[R4, #+36]
     34          //		RespData.Channel_2.ChannelData = FHigh_0_32_Fixed( RespData.Channel_2.ChannelData, 9, false, true );	// активировать фильтр при тестах 
     35          		RespData.Channel_2.ChannelData = FF_LP_12( RespData.Channel_1.ChannelData );
   \   00000026   0x.... 0x....      BL       _ZN4TDSP8FF_LP_12Ei
   \   0000002A   0x62A0             STR      R0,[R4, #+40]
   \   0000002C   0xBD10             POP      {R4,PC}
     36          //RespData.Channel_2.ChannelData = RFF_LP_12( RespData.Channel_1.ChannelData );
     37          	}
     38          	else
     39          	{
     40          		RespData.Channel_1.ChannelData = FHigh_0_32_Fixed_Resp( RespData.Channel_1.ChannelData, false );
   \                     ??ChannelsProcessing_0: (+1)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x.... 0x....      BL       _ZN4TDSP21FHigh_0_32_Fixed_RespEib
   \   00000034   0x6260             STR      R0,[R4, #+36]
     41          //		RespData.Channel_2.ChannelData = FHigh_0_32_Fixed( RespData.Channel_2.ChannelData, 9, false, false );
     42          		RespData.Channel_2.ChannelData = RFF_LP_12( RespData.Channel_1.ChannelData );
   \   00000036   0x.... 0x....      BL       _ZN4TDSP9RFF_LP_12Ei
   \   0000003A   0x62A0             STR      R0,[R4, #+40]
     43          	}
     44          
     45          //	RespirationRateCalculation();
     46          
     47          //	RespData.Channel_1.ChannelData = FF_Butterworth_HF8( RespData.Channel_1.ChannelData );				// усиливаем ВЧ область Fc = 50Гц, чтобы поднять АЧХ 
     48          //	RespData.Channel_2.ChannelData = FF_Butterworth_HF9( RespData.Channel_2.ChannelData );				// усиливаем ВЧ область Fc = 50Гц, чтобы поднять АЧХ 
     49          
     50          //	RespData.Channel_1.ChannelData *= -1;
     51          //	RespData.Channel_2.ChannelData *= -1;
     52          		
     53          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
     54          
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void TRespProcessor::WrChannelsProcessing( void )
     57          {
   \                     _ZN14TRespProcessor20WrChannelsProcessingEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     58          /*
     59          	WrRespData.Channel_1.ChannelData = ( WrRespData.Channel_1.ChannelData * 100 ) / ADS1292_NORMALIZE_DIVIDER;	// нормализуем сигнал по ГОСТ 
     60          	WrRespData.Channel_2.ChannelData = RespData.Channel_1.ChannelData;
     61          	if( TFrame::StartMonitioring == true )
     62          	{
     63          		WrRespData.Channel_1.ChannelData = FHigh_0_32_Fixed_Resp( WrRespData.Channel_1.ChannelData, false, true );	// активировать фильтр при тестах 
     64          		WrRespData.Channel_2.ChannelData = FF_LP_12( WrRespData.Channel_1.ChannelData );
     65          	}
     66          	else
     67          	{
     68          		WrRespData.Channel_1.ChannelData = FHigh_0_32_Fixed_Resp( WrRespData.Channel_1.ChannelData, false, false );
     69          		WrRespData.Channel_2.ChannelData = RFF_LP_12( WrRespData.Channel_1.ChannelData );
     70          	}
     71          */
     72          	TRespProcessor::WrRespData.Channel_1.ChannelData = ( TRespProcessor::WrRespData.Channel_1.ChannelData * 100 ) / ADS1292_NORMALIZE_DIVIDER;	// нормализуем сигнал по ГОСТ 
   \   00000002   0x....             LDR.N    R4,??DataTable5_2
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0x2164             MOVS     R1,#+100
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0xF44F 0x7107      MOV      R1,#+540
   \   0000000E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000012   0x6060             STR      R0,[R4, #+4]
     73          	TRespProcessor::WrRespData.Channel_1.ChannelData = FHigh_0_32_Fixed_Resp( TRespProcessor::WrRespData.Channel_1.ChannelData, false );
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      BL       _ZN4TDSP21FHigh_0_32_Fixed_RespEib
   \   0000001A   0x6060             STR      R0,[R4, #+4]
     74          	TRespProcessor::WrRespData.Channel_1.ChannelData = FF_LP_12( TRespProcessor::WrRespData.Channel_1.ChannelData );
   \   0000001C   0x.... 0x....      BL       _ZN4TDSP8FF_LP_12Ei
   \   00000020   0x6060             STR      R0,[R4, #+4]
     75          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
     76          
     77          
     78          
     79          /*----------------------------------------------------------------------------------*/
     80          /* @brief	ЧСС ЭКГ Детектор														*/
     81          /* @param	wData - входные данные													*/
     82          /* @return	отфильтрованные данные													*/
     83          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     84          int TRespProcessor::respirationrate_detector( int16_t wData )
     85          {
   \                     _ZN14TRespProcessor24respirationrate_detectorEs: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
     86          	static int32_t rX_i_1;
     87          	static int32_t rY_i;
     88          	static int16_t rwData = 0;
     89          
     90          	rY_i = (1500 * (rY_i + wData - rX_i_1));
   \   00000004   0x....             LDR.N    R4,??DataTable5_3
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x1828             ADDS     R0,R5,R0
   \   0000000A   0x6861             LDR      R1,[R4, #+4]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0xF240 0x51DC      MOVW     R1,#+1500
   \   00000012   0x4348             MULS     R0,R1,R0
   \   00000014   0x60A0             STR      R0,[R4, #+8]
     91          
     92          	if(rY_i < 0)
   \   00000016   0xD506             BPL.N    ??respirationrate_detector_0
     93          	{
     94          		rY_i = labs(rY_i);
   \   00000018   0x.... 0x....      BL       labs
   \   0000001C   0x60A0             STR      R0,[R4, #+8]
     95          		rY_i >>= 11;
     96          		rY_i = -rY_i;
   \   0000001E   0x12C0             ASRS     R0,R0,#+11
   \   00000020   0x4240             RSBS     R0,R0,#+0
   \   00000022   0x60A0             STR      R0,[R4, #+8]
   \   00000024   0xE001             B.N      ??respirationrate_detector_1
     97          	}
     98          	else rY_i >>= 11;
   \                     ??respirationrate_detector_0: (+1)
   \   00000026   0x12C0             ASRS     R0,R0,#+11
   \   00000028   0x60A0             STR      R0,[R4, #+8]
     99          
    100          	rX_i_1 = wData;
   \                     ??respirationrate_detector_1: (+1)
   \   0000002A   0x6065             STR      R5,[R4, #+4]
    101          
    102          	/* ограничитель */
    103          	if(rY_i >  32766) rwData = 32766;
   \   0000002C   0x68A0             LDR      R0,[R4, #+8]
   \   0000002E   0xF647 0x71FF      MOVW     R1,#+32767
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xDB03             BLT.N    ??respirationrate_detector_2
   \   00000036   0xF647 0x70FE      MOVW     R0,#+32766
   \   0000003A   0x8020             STRH     R0,[R4, #+0]
   \   0000003C   0xE006             B.N      ??respirationrate_detector_3
    104          	else if(rY_i < -32766) rwData = -32766;
   \                     ??respirationrate_detector_2: (+1)
   \   0000003E   0x....             LDR.N    R1,??DataTable5_4  ;; 0xffff8002
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xDA02             BGE.N    ??respirationrate_detector_4
   \   00000044   0x4608             MOV      R0,R1
   \   00000046   0x8020             STRH     R0,[R4, #+0]
   \   00000048   0xE000             B.N      ??respirationrate_detector_3
    105          	else rwData = rY_i;
   \                     ??respirationrate_detector_4: (+1)
   \   0000004A   0x8020             STRH     R0,[R4, #+0]
    106          	/* ENDBLOCK */
    107          
    108          	return (rwData*2);
   \                     ??respirationrate_detector_3: (+1)
   \   0000004C   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   00000050   0x0040             LSLS     R0,R0,#+1
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    109          }
    110          
    111          
    112          
    113          /*----------------------------------------------------------------------------------*/
    114          /* @brief	Функция измерения ЧСС													*/
    115          /* @param	None																	*/
    116          /* @return	None																	*/
    117          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    118          void TRespProcessor::RespirationRateCalculation( void )
    119          {
   \                     _ZN14TRespProcessor26RespirationRateCalculationEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    120          	static int16_t data;
    121          	static int16_t rOnStatus = 0;
    122          	static int16_t rOffStatus = 0;
    123          	static int16_t rMaxVal = 0;
    124          	static uint16_t rOnOffPrd = 0;
    125          	static bool StartMeasurment;
    126          
    127          //	if( Hartbeat.Status == false )
    128          //		return;
    129          
    130          	data = respirationrate_detector( (int16_t)RespData.Channel_1.ChannelData );
   \   00000002   0x....             LDR.N    R4,??DataTable5
   \   00000004   0x6A60             LDR      R0,[R4, #+36]
   \   00000006   0xB200             SXTH     R0,R0
   \   00000008   0x.... 0x....      BL       _ZN14TRespProcessor24respirationrate_detectorEs
   \   0000000C   0x82A0             STRH     R0,[R4, #+20]
    131          
    132          	if( data > rMaxVal ){
   \   0000000E   0xF9B4 0x0014      LDRSH    R0,[R4, #+20]
   \   00000012   0xF9B4 0x101A      LDRSH    R1,[R4, #+26]
   \   00000016   0x4281             CMP      R1,R0
   \   00000018   0xDA00             BGE.N    ??RespirationRateCalculation_0
    133          		rMaxVal = data;
   \   0000001A   0x8360             STRH     R0,[R4, #+26]
    134          	}
    135          
    136          	int16_t Threshold;
    137          
    138          	static uint8_t OffStat = 0;
    139          
    140          	Threshold = (int16_t)(((int16_t)rMaxVal * 1) / 2);
    141          
    142          	if( data > Threshold ){ 												/* засекли высокий уровень (пик) */
   \                     ??RespirationRateCalculation_0: (+1)
   \   0000001C   0xF9B4 0x101A      LDRSH    R1,[R4, #+26]
   \   00000020   0xEB01 0x71D1      ADD      R1,R1,R1, LSR #+31
   \   00000024   0x1049             ASRS     R1,R1,#+1
   \   00000026   0xB209             SXTH     R1,R1
   \   00000028   0x4281             CMP      R1,R0
   \   0000002A   0xDA14             BGE.N    ??RespirationRateCalculation_1
    143          		OffStat = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x74A0             STRB     R0,[R4, #+18]
    144          //!!!    if(RR_Led_Enable) TDevice::LedOn();
    145          //		LedOn();
    146          //		TDevice::DEVICE->DebugTools->Led.On();
    147          		if( StartMeasurment == false ){										/* если таймер не запущен */
   \   00000030   0x7C60             LDRB     R0,[R4, #+17]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD10B             BNE.N    ??RespirationRateCalculation_2
    148          			Respiration.Value = (int)( TIM_GetCounter( TIM5 ));
   \   00000036   0x....             LDR.N    R5,??DataTable5_5  ;; 0x40000c00
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       TIM_GetCounter
   \   0000003E   0x60A0             STR      R0,[R4, #+8]
    149          			TRespProcessor::Respiration.Redraw = true;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x7320             STRB     R0,[R4, #+12]
    150          			StartMeasurment = true;
   \   00000044   0x7460             STRB     R0,[R4, #+17]
    151          			TIM_SetCounter( TIM5, 0 );										/* сброс счётчика */
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x4628             MOV      R0,R5
   \   0000004A   0x.... 0x....      BL       TIM_SetCounter
    152          		}
    153          
    154          		rOnStatus++;
   \                     ??RespirationRateCalculation_2: (+1)
   \   0000004E   0x8AE0             LDRH     R0,[R4, #+22]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x82E0             STRH     R0,[R4, #+22]
   \   00000054   0xE010             B.N      ??RespirationRateCalculation_3
    155          	}
    156          	else {																	/* засекли низкий уровень */
    157          		if( OffStat > 10 ){
   \                     ??RespirationRateCalculation_1: (+1)
   \   00000056   0x7CA0             LDRB     R0,[R4, #+18]
   \   00000058   0x280B             CMP      R0,#+11
   \   0000005A   0xDB07             BLT.N    ??RespirationRateCalculation_4
    158          			OffStat = 0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x74A0             STRB     R0,[R4, #+18]
    159          			StartMeasurment = false;
   \   00000060   0x7460             STRB     R0,[R4, #+17]
    160                if(RR_Led_Enable) TDevice::LedOff();
   \   00000062   0x7C20             LDRB     R0,[R4, #+16]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD001             BEQ.N    ??RespirationRateCalculation_4
   \   00000068   0x.... 0x....      BL       _ZN9THardware6LedOffEv
    161          //			LedOff();
    162          //			TDevice::DEVICE->DebugTools->Led.Off();
    163          		}
    164          		OffStat++;
   \                     ??RespirationRateCalculation_4: (+1)
   \   0000006C   0x7CA0             LDRB     R0,[R4, #+18]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0x74A0             STRB     R0,[R4, #+18]
    165          		rOffStatus++;
   \   00000072   0x8B20             LDRH     R0,[R4, #+24]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0x8320             STRH     R0,[R4, #+24]
    166          	}
    167          
    168          	rOnOffPrd++;
   \                     ??RespirationRateCalculation_3: (+1)
   \   00000078   0x8BA0             LDRH     R0,[R4, #+28]
   \   0000007A   0x1C40             ADDS     R0,R0,#+1
   \   0000007C   0x83A0             STRH     R0,[R4, #+28]
    169          	if( rOnOffPrd > 800 ){													/* сброс порога, пика давно нет */
   \   0000007E   0xB280             UXTH     R0,R0
   \   00000080   0xF5B0 0x7F48      CMP      R0,#+800
   \   00000084   0xDD13             BLE.N    ??RespirationRateCalculation_5
   \   00000086   0xF9B4 0x0018      LDRSH    R0,[R4, #+24]
   \   0000008A   0xF9B4 0x1016      LDRSH    R1,[R4, #+22]
   \   0000008E   0xF240 0x320D      MOVW     R2,#+781
   \   00000092   0x1A0B             SUBS     R3,R1,R0
   \   00000094   0x4293             CMP      R3,R2
   \   00000096   0xDB01             BLT.N    ??RespirationRateCalculation_6
    170          		if((rOnStatus - rOffStatus) > 780)
    171          			rMaxVal = 0;
   \   00000098   0x2300             MOVS     R3,#+0
   \   0000009A   0x8363             STRH     R3,[R4, #+26]
    172          		if((rOffStatus - rOnStatus) > 780)
   \                     ??RespirationRateCalculation_6: (+1)
   \   0000009C   0x1A40             SUBS     R0,R0,R1
   \   0000009E   0x4290             CMP      R0,R2
   \   000000A0   0xDB01             BLT.N    ??RespirationRateCalculation_7
    173          			rMaxVal = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x8360             STRH     R0,[R4, #+26]
    174          
    175          		rOnOffPrd = 0;
   \                     ??RespirationRateCalculation_7: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x83A0             STRH     R0,[R4, #+28]
    176          		rOnStatus = 0;
   \   000000AA   0x82E0             STRH     R0,[R4, #+22]
    177          		rOffStatus = 0;
   \   000000AC   0x8320             STRH     R0,[R4, #+24]
    178          	}
    179          }
   \                     ??RespirationRateCalculation_5: (+1)
   \   000000AE   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 4
   \                     _ZN14TRespProcessor11RespirationE:
   \   00000000                      DS8 16
   \                     _ZN14TRespProcessor13RR_Led_EnableE:
   \   00000010                      DS8 1
   \   00000011                      DS8 1
   \   00000012                      DS8 1
   \   00000013                      DS8 1
   \   00000014                      DS8 2
   \   00000016                      DS8 2
   \   00000018                      DS8 2
   \   0000001A                      DS8 2
   \   0000001C                      DS8 2
   \   0000001E                      DS8 2
   \                     _ZN14TRespProcessor8RespDataE:
   \   00000020                      DS8 12

   \                                 In section .bss, align 4
   \                     _ZN14TRespProcessor10WrRespDataE:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     ??rwData:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 4
   \   00000008                      DS8 4
    180          
    181          
    182          
    183          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    184          void TRespProcessor::TimerInit( void )
    185          {
   \                     _ZN14TRespProcessor9TimerInitEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    186          	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    187          
    188          	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM5, ENABLE );
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    189          
    190          #ifdef CLK_48
    191          	TIM_TimeBaseStructure.TIM_Prescaler = 2049;
    192          #else
    193          	TIM_TimeBaseStructure.TIM_Prescaler = 1024;
   \   0000000C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000010   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    194          #endif /* CLK_48 */
    195          	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    196          	TIM_TimeBaseStructure.TIM_Period = 65535;
   \   0000001A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000001E   0x9001             STR      R0,[SP, #+4]
    197          	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    198          	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
   \   00000026   0xF88D 0x000A      STRB     R0,[SP, #+10]
    199          
    200          	TIM_TimeBaseInit( TIM5, &TIM_TimeBaseStructure );
   \   0000002A   0x....             LDR.N    R4,??DataTable5_5  ;; 0x40000c00
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       TIM_TimeBaseInit
    201          
    202          	TIM_Cmd( TIM5, ENABLE );		/* запускаем таймер для измерения периода между R зубцами */
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       TIM_Cmd
    203          
    204          	DBGMCU_Config( DBGMCU_TIM5_STOP, ENABLE );
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x2008             MOVS     R0,#+8
   \   00000040   0x.... 0x....      BL       DBGMCU_Config
    205          }
   \   00000044   0xBD1F             POP      {R0-R4,PC}       ;; return
    206          
    207          
    208          
    209          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    210          void TRespProcessor::TimerDeinit( void )
    211          {
    212          	TIM_DeInit( TIM5 );
   \                     _ZN14TRespProcessor11TimerDeinitEv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40000c00
   \   00000002   0x.... 0x....      B.W      TIM_DeInit
    213          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     _ZN14TRespProcessor11RespirationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     _ZN6TFrame16StartMonitioringE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     _ZN14TRespProcessor10WrRespDataE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     ??rwData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xFFFF8002         DC32     0xffff8002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40000C00         DC32     0x40000c00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TRespProcessor::ChannelsProcessing()
         8   -> TDSP::FF_LP_12(int)
         8   -> TDSP::FHigh_0_32_Fixed_Resp(int32_t, bool)
         8   -> TDSP::RFF_LP_12(int)
      16   TRespProcessor::RespirationRateCalculation()
        16   -> THardware::LedOff()
        16   -> TIM_GetCounter
        16   -> TIM_SetCounter
        16   -> TRespProcessor::respirationrate_detector(int16_t)
       0   TRespProcessor::TimerDeinit()
         0   -> TIM_DeInit
      24   TRespProcessor::TimerInit()
        24   -> DBGMCU_Config
        24   -> RCC_APB1PeriphClockCmd
        24   -> TIM_Cmd
        24   -> TIM_TimeBaseInit
       8   TRespProcessor::WrChannelsProcessing()
         8   -> TDSP::FF_LP_12(int)
         8   -> TDSP::FHigh_0_32_Fixed_Resp(int32_t, bool)
      16   TRespProcessor::respirationrate_detector(int16_t)
        16   -> labs


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      62  TRespProcessor::ChannelsProcessing()
      44  TRespProcessor::Respiration
          TRespProcessor::RR_Led_Enable
          StartMeasurment
          OffStat
          data
          rOnStatus
          rOffStatus
          rMaxVal
          rOnOffPrd
          TRespProcessor::RespData
     176  TRespProcessor::RespirationRateCalculation()
       6  TRespProcessor::TimerDeinit()
      70  TRespProcessor::TimerInit()
      36  TRespProcessor::WrChannelsProcessing()
      12  TRespProcessor::WrRespData
      84  TRespProcessor::respirationrate_detector(int16_t)
      12  rwData
          rX_i_1
          rY_i

 
  68 bytes in section .bss
 458 bytes in section .text
 
 458 bytes of CODE memory
  68 bytes of DATA memory

Errors: none
Warnings: none

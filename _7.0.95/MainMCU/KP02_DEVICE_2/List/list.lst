###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:08
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\list.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\list.c -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\list.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\list.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\list.c
      1          /*
      2              FreeRTOS V7.1.1 - Copyright (C) 2012 Real Time Engineers Ltd.
      3          
      4          
      5              ***************************************************************************
      6               *                                                                       *
      7               *    FreeRTOS tutorial books are available in pdf and paperback.        *
      8               *    Complete, revised, and edited pdf reference manuals are also       *
      9               *    available.                                                         *
     10               *                                                                       *
     11               *    Purchasing FreeRTOS documentation will not only help you, by       *
     12               *    ensuring you get running as quickly as possible and with an        *
     13               *    in-depth knowledge of how to use FreeRTOS, it will also help       *
     14               *    the FreeRTOS project to continue with its mission of providing     *
     15               *    professional grade, cross platform, de facto standard solutions    *
     16               *    for microcontrollers - completely free of charge!                  *
     17               *                                                                       *
     18               *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
     19               *                                                                       *
     20               *    Thank you for using FreeRTOS, and thank you for your support!      *
     21               *                                                                       *
     22              ***************************************************************************
     23          
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              >>>NOTE<<< The modification to the GPL is included to allow you to
     31              distribute a combined work that includes FreeRTOS without being obliged to
     32              provide the source code for proprietary components outside of the FreeRTOS
     33              kernel.  FreeRTOS is distributed in the hope that it will be useful, but
     34              WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     35              or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43              
     44              ***************************************************************************
     45               *                                                                       *
     46               *    Having a problem?  Start by reading the FAQ "My application does   *
     47               *    not run, what could be wrong?                                      *
     48               *                                                                       *
     49               *    http://www.FreeRTOS.org/FAQHelp.html                               *
     50               *                                                                       *
     51              ***************************************************************************
     52          
     53              
     54              http://www.FreeRTOS.org - Documentation, training, latest information, 
     55              license and contact details.
     56              
     57              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     58              including FreeRTOS+Trace - an indispensable productivity tool.
     59          
     60              Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
     61              the code with commercial support, indemnification, and middleware, under 
     62              the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
     63              provide a safety engineered and independently SIL3 certified version under 
     64              the SafeRTOS brand: http://www.SafeRTOS.com.
     65          */
     66          
     67          
     68          #include <stdlib.h>
     69          #include "FreeRTOS.h"
     70          #include "list.h"
     71          
     72          /*-----------------------------------------------------------
     73           * PUBLIC LIST API documented in list.h
     74           *----------------------------------------------------------*/
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void vListInitialise( xList *pxList )
     77          {
     78          	/* The list structure contains a list item which is used to mark the
     79          	end of the list.  To initialise the list the list end is inserted
     80          	as the only list entry. */
     81          	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   \                     vListInitialise: (+1)
   \   00000000   0xF100 0x0108      ADD      R1,R0,#+8
   \   00000004   0x6041             STR      R1,[R0, #+4]
     82          
     83          	/* The list end value is the highest possible value in the list to
     84          	ensure it remains at the end of the list. */
     85          	pxList->xListEnd.xItemValue = portMAX_DELAY;
   \   00000006   0xF04F 0x31FF      MOV      R1,#-1
   \   0000000A   0x6081             STR      R1,[R0, #+8]
     86          
     87          	/* The list end next and previous pointers point to itself so we know
     88          	when the list is empty. */
     89          	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   \   0000000C   0xF100 0x0108      ADD      R1,R0,#+8
   \   00000010   0x60C1             STR      R1,[R0, #+12]
     90          	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   \   00000012   0x6101             STR      R1,[R0, #+16]
     91          
     92          	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6001             STR      R1,[R0, #+0]
     93          }
   \   00000018   0x4770             BX       LR               ;; return
     94          /*-----------------------------------------------------------*/
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void vListInitialiseItem( xListItem *pxItem )
     97          {
     98          	/* Make sure the list item is not recorded as being on a list. */
     99          	pxItem->pvContainer = NULL;
   \                     vListInitialiseItem: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6101             STR      R1,[R0, #+16]
    100          }
   \   00000004   0x4770             BX       LR               ;; return
    101          /*-----------------------------------------------------------*/
    102          

   \                                 In section .text, align 2, keep-with-next
    103          void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
    104          {
    105          volatile xListItem * pxIndex;
    106          
    107          	/* Insert a new list item into pxList, but rather than sort the list,
    108          	makes the new list item the last item to be removed by a call to
    109          	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
    110          	the pxIndex member. */
    111          	pxIndex = pxList->pxIndex;
   \                     vListInsertEnd: (+1)
   \   00000000   0x6842             LDR      R2,[R0, #+4]
    112          
    113          	pxNewListItem->pxNext = pxIndex->pxNext;
   \   00000002   0x6853             LDR      R3,[R2, #+4]
   \   00000004   0x604B             STR      R3,[R1, #+4]
    114          	pxNewListItem->pxPrevious = pxList->pxIndex;
   \   00000006   0x6843             LDR      R3,[R0, #+4]
   \   00000008   0x608B             STR      R3,[R1, #+8]
    115          	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   \   0000000A   0x6853             LDR      R3,[R2, #+4]
   \   0000000C   0x6099             STR      R1,[R3, #+8]
    116          	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   \   0000000E   0x6051             STR      R1,[R2, #+4]
    117          	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   \   00000010   0x6041             STR      R1,[R0, #+4]
    118          
    119          	/* Remember which list the item is in. */
    120          	pxNewListItem->pvContainer = ( void * ) pxList;
   \   00000012   0x6108             STR      R0,[R1, #+16]
    121          
    122          	( pxList->uxNumberOfItems )++;
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x6001             STR      R1,[R0, #+0]
    123          }
   \   0000001A   0x4770             BX       LR               ;; return
    124          /*-----------------------------------------------------------*/
    125          

   \                                 In section .text, align 2, keep-with-next
    126          void vListInsert( xList *pxList, xListItem *pxNewListItem )
    127          {
   \                     vListInsert: (+1)
   \   00000000   0xB410             PUSH     {R4}
    128          volatile xListItem *pxIterator;
    129          portTickType xValueOfInsertion;
    130          
    131          	/* Insert the new list item into the list, sorted in ulListItem order. */
    132          	xValueOfInsertion = pxNewListItem->xItemValue;
   \   00000002   0x680A             LDR      R2,[R1, #+0]
    133          
    134          	/* If the list already contains a list item with the same item value then
    135          	the new list item should be placed after it.  This ensures that TCB's which
    136          	are stored in ready lists (all of which have the same ulListItem value)
    137          	get an equal share of the CPU.  However, if the xItemValue is the same as
    138          	the back marker the iteration loop below will not end.  This means we need
    139          	to guard against this by checking the value first and modifying the
    140          	algorithm slightly if necessary. */
    141          	if( xValueOfInsertion == portMAX_DELAY )
   \   00000004   0xF112 0x0F01      CMN      R2,#+1
   \   00000008   0xD101             BNE.N    ??vListInsert_0
    142          	{
    143          		pxIterator = pxList->xListEnd.pxPrevious;
   \   0000000A   0x6903             LDR      R3,[R0, #+16]
   \   0000000C   0xE007             B.N      ??vListInsert_1
    144          	}
    145          	else
    146          	{
    147          		/* *** NOTE ***********************************************************
    148          		If you find your application is crashing here then likely causes are:
    149          			1) Stack overflow -
    150          			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
    151          			2) Incorrect interrupt priority assignment, especially on Cortex-M3
    152          			   parts where numerically high priority values denote low actual
    153          			   interrupt priories, which can seem counter intuitive.  See
    154          			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
    155          			3) Calling an API function from within a critical section or when
    156          			   the scheduler is suspended.
    157          			4) Using a queue or semaphore before it has been initialised or
    158          			   before the scheduler has been started (are interrupts firing
    159          			   before vTaskStartScheduler() has been called?).
    160          		See http://www.freertos.org/FAQHelp.html for more tips.
    161          		**********************************************************************/
    162          		
    163          		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   \                     ??vListInsert_0: (+1)
   \   0000000E   0xF100 0x0308      ADD      R3,R0,#+8
   \   00000012   0xE000             B.N      ??vListInsert_2
   \                     ??vListInsert_3: (+1)
   \   00000014   0x685B             LDR      R3,[R3, #+4]
   \                     ??vListInsert_2: (+1)
   \   00000016   0x685C             LDR      R4,[R3, #+4]
   \   00000018   0x6824             LDR      R4,[R4, #+0]
   \   0000001A   0x42A2             CMP      R2,R4
   \   0000001C   0xD2FA             BCS.N    ??vListInsert_3
    164          		{
    165          			/* There is nothing to do here, we are just iterating to the
    166          			wanted insertion position. */
    167          		}
    168          	}
    169          
    170          	pxNewListItem->pxNext = pxIterator->pxNext;
   \                     ??vListInsert_1: (+1)
   \   0000001E   0x685A             LDR      R2,[R3, #+4]
   \   00000020   0x604A             STR      R2,[R1, #+4]
    171          	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   \   00000022   0x6091             STR      R1,[R2, #+8]
    172          	pxNewListItem->pxPrevious = pxIterator;
   \   00000024   0x608B             STR      R3,[R1, #+8]
    173          	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   \   00000026   0x6059             STR      R1,[R3, #+4]
    174          
    175          	/* Remember which list the item is in.  This allows fast removal of the
    176          	item later. */
    177          	pxNewListItem->pvContainer = ( void * ) pxList;
   \   00000028   0x6108             STR      R0,[R1, #+16]
    178          
    179          	( pxList->uxNumberOfItems )++;
   \   0000002A   0x6801             LDR      R1,[R0, #+0]
   \   0000002C   0x1C49             ADDS     R1,R1,#+1
   \   0000002E   0x6001             STR      R1,[R0, #+0]
    180          }
   \   00000030   0xBC10             POP      {R4}
   \   00000032   0x4770             BX       LR               ;; return
    181          /*-----------------------------------------------------------*/
    182          

   \                                 In section .text, align 2, keep-with-next
    183          void vListRemove( xListItem *pxItemToRemove )
    184          {
    185          xList * pxList;
    186          
    187          	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   \                     vListRemove: (+1)
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0x6842             LDR      R2,[R0, #+4]
   \   00000004   0x6091             STR      R1,[R2, #+8]
    188          	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0x6882             LDR      R2,[R0, #+8]
   \   0000000A   0x6051             STR      R1,[R2, #+4]
    189          	
    190          	/* The list item knows which list it is in.  Obtain the list from the list
    191          	item. */
    192          	pxList = ( xList * ) pxItemToRemove->pvContainer;
   \   0000000C   0x6901             LDR      R1,[R0, #+16]
    193          
    194          	/* Make sure the index is left pointing to a valid item. */
    195          	if( pxList->pxIndex == pxItemToRemove )
   \   0000000E   0x684A             LDR      R2,[R1, #+4]
   \   00000010   0x4282             CMP      R2,R0
   \   00000012   0xD101             BNE.N    ??vListRemove_0
    196          	{
    197          		pxList->pxIndex = pxItemToRemove->pxPrevious;
   \   00000014   0x6882             LDR      R2,[R0, #+8]
   \   00000016   0x604A             STR      R2,[R1, #+4]
    198          	}
    199          
    200          	pxItemToRemove->pvContainer = NULL;
   \                     ??vListRemove_0: (+1)
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x6102             STR      R2,[R0, #+16]
    201          	( pxList->uxNumberOfItems )--;
   \   0000001C   0x6808             LDR      R0,[R1, #+0]
   \   0000001E   0x1E40             SUBS     R0,R0,#+1
   \   00000020   0x6008             STR      R0,[R1, #+0]
    202          }
   \   00000022   0x4770             BX       LR               ;; return
    203          /*-----------------------------------------------------------*/
    204          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   vListInitialise
       0   vListInitialiseItem
       4   vListInsert
       0   vListInsertEnd
       0   vListRemove


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      26  vListInitialise
       6  vListInitialiseItem
      52  vListInsert
      28  vListInsertEnd
      36  vListRemove

 
 148 bytes in section .text
 
 148 bytes of CODE memory

Errors: none
Warnings: none

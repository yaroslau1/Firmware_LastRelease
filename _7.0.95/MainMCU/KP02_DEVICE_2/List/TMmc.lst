###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        17/Oct/2018  09:51:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TMmc.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TMmc.cpp -D IAR_ARM_CM4
#        -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H -D
#        SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D STENDBUY_NOT_USE
#        -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO -D
#        BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\TMmc.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\TMmc.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TMmc.cpp
      1          /*
      2              Title:    
      3              Author:   VN Asliuk(Cardian)
      4              Date:     06.04.2004 12:13
      5              Purpose:  
      6              Software:
      7              Hardware:
      8              Note:    
      9          */
     10          //------------------------------------------------------------------------------------
     11          #include "TMmc.h"
     12          /*-----------------------------------------------------------------------*/
     13          #include "sd_spi.h"
     14          //------------------------------------------------------------------------------------
     15          //#define MMC_SEND_CARDINFO
     16          //------------------------------------------------------------------------------------
     17          struct CMD
     18          {
     19          	WORD index;
     20          	WORD tx_data;
     21          	WORD arg;
     22          	WORD resp;
     23          };
     24          
     25          

   \                                 In section .text, align 4, keep-with-next
     26          const struct CMD sd_cmd[CMD_TOT] =
   \                     sd_cmd:
   \   00000000   0x0000 0x0040      DC16 0, 64, 0, 0, 1, 65, 0, 0, 2, 73, 0, 0, 3, 74, 0, 0, 4, 76, 0, 0, 5
   \              0x0000 0x0000
   \              0x0001 0x0041
   \              0x0000 0x0000
   \              0x0002 0x0049
   \              0x0000 0x0000
   \              0x0003 0x004A
   \              0x0000 0x0000
   \              0x0004 0x004C
   \              0x0000 0x0000
   \              0x0005       
   \   0000002A   0x004D 0x0000      DC16 77, 0, 2, 6, 80, 1, 0, 7, 81, 2, 0, 8, 82, 2, 0, 9, 88, 2, 0, 10
   \              0x0002 0x0006
   \              0x0050 0x0001
   \              0x0000 0x0007
   \              0x0051 0x0002
   \              0x0000 0x0008
   \              0x0052 0x0002
   \              0x0000 0x0009
   \              0x0058 0x0002
   \              0x0000 0x000A
   \   00000052   0x0059 0x0002      DC16 89, 2, 0, 11, 91, 0, 0, 12, 92, 2, 1, 13, 93, 2, 1, 14, 94, 2, 0
   \              0x0000 0x000B
   \              0x005B 0x0000
   \              0x0000 0x000C
   \              0x005C 0x0002
   \              0x0001 0x000D
   \              0x005D 0x0002
   \              0x0001 0x000E
   \              0x005E 0x0002
   \              0x0000       
   \   00000078   0x000F 0x0060      DC16 15, 96, 2, 0, 16, 97, 2, 0, 17, 98, 2, 0, 18, 99, 2, 0, 19, 100, 2
   \              0x0002 0x0000
   \              0x0010 0x0061
   \              0x0002 0x0000
   \              0x0011 0x0062
   \              0x0002 0x0000
   \              0x0012 0x0063
   \              0x0002 0x0000
   \              0x0013 0x0064
   \              0x0002       
   \   0000009E   0x0000 0x0014      DC16 0, 20, 101, 2, 0, 21, 102, 3, 1, 22, 106, 3, 1, 23, 122, 0, 3, 24
   \              0x0065 0x0002
   \              0x0000 0x0015
   \              0x0066 0x0003
   \              0x0001 0x0016
   \              0x006A 0x0003
   \              0x0001 0x0017
   \              0x007A 0x0000
   \              0x0003 0x0018
   \   000000C2   0x007B 0x0003      DC16 123, 3, 0, 25, 105, 0, 0
   \              0x0000 0x0019
   \              0x0069 0x0000
   \              0x0000       
     27          {
     28          	{CMD0,	0x40,	NO_ARG,		RESP_1},		// GO_IDLE_STATE
     29          	{CMD1,	0x41,	NO_ARG,		RESP_1},		// SEND_OP_COND (ACMD41 = 0x69)
     30          	{CMD9,	0x49,	NO_ARG,		RESP_1},		// SEND_CSD
     31          	{CMD10,	0x4A,	NO_ARG,		RESP_1},		// SEND_CID
     32          	{CMD12,	0x4C,	NO_ARG,		RESP_1},		// STOP_TRANSMISSION
     33          	{CMD13,	0x4D,	NO_ARG,		RESP_2},		// SEND_STATUS
     34          	{CMD16,	0x50,	BLOCK_LEN,	RESP_1},		// SET_BLOCKLEN
     35          	{CMD17, 0x51,	DATA_ADDR,	RESP_1},		// READ_SINGLE_BLOCK
     36          	{CMD18, 0x52,	DATA_ADDR,	RESP_1},		// READ_MULTIPLE_BLOCK
     37          	{CMD24, 0x58,	DATA_ADDR,	RESP_1},		// WRITE_BLOCK
     38          	{CMD25, 0x59,	DATA_ADDR,	RESP_1},		// WRITE_MULTIPLE_BLOCK
     39          	{CMD27,	0x5B,	NO_ARG,		RESP_1},		// PROGRAM_CSD
     40          	{CMD28, 0x5C,	DATA_ADDR,	RESP_1b},		// SET_WRITE_PROT
     41          	{CMD29, 0x5D,	DATA_ADDR,	RESP_1b},		// CLR_WRITE_PROT
     42          	{CMD30, 0x5E,	DATA_ADDR,	RESP_1},		// SEND_WRITE_PROT
     43          	{CMD32,	0x60,	DATA_ADDR,	RESP_1},		// TAG_SECTOR_START
     44          	{CMD33,	0x61,	DATA_ADDR,	RESP_1},		// TAG_SECTOR_END
     45          	{CMD34,	0x62,	DATA_ADDR,	RESP_1},		// UNTAG_SECTOR
     46          	{CMD35,	0x63,	DATA_ADDR,	RESP_1},		// TAG_ERASE_GROUP_START
     47          	{CMD36,	0x64,	DATA_ADDR,	RESP_1},		// TAG_ERASE_GROUP_END
     48          	{CMD37,	0x65,	DATA_ADDR,	RESP_1},		// TAG_ERASE_GROUP
     49          	{CMD38,	0x66,	STUFF_BITS,	RESP_1b},		// ERASE
     50          	{CMD42,	0x6A,	STUFF_BITS,	RESP_1b},		// LOCK_UNLOCK
     51          	{CMD58,	0x7A,	NO_ARG,		RESP_3},		// READ_OCR
     52          	{CMD59,	0x7B,	STUFF_BITS,	RESP_1},		// CRC_ON_OFF
     53          	{ACMD41, 0x69,	NO_ARG,		RESP_1}
     54          };
     55          //------------------------------------------------------------------------------------

   \                                 In section .data, align 1
     56          BYTE  TMmc::MMCResponse = 0x55;
   \                     _ZN4TMmc11MMCResponseE:
   \   00000000   0x55               DC8 85

   \                                 In section .bss, align 4
     57          DWORD TMmc::OCR_REG;
   \                     _ZN4TMmc7OCR_REGE:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          BYTE  TMmc::_FF_buff[512];
   \                     _ZN4TMmc8_FF_buffE:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
     59          WORD  TMmc::PT_SecStart;
     60          DWORD TMmc::BS_jmpBoot;
     61          WORD  TMmc::BPB_BytsPerSec;
     62          BYTE  TMmc::BPB_SecPerClus;
     63          WORD  TMmc::BPB_RsvdSecCnt;
     64          BYTE  TMmc::BPB_NumFATs;
     65          WORD  TMmc::BPB_RootEntCnt;
     66          WORD  TMmc::BPB_FATSz16;
     67          BYTE  TMmc::BPB_FATType;
     68          DWORD TMmc::BPB_TotSec;
     69          DWORD TMmc::BS_VolSerial;
     70          char  TMmc::BS_VolLab[12];
   \                     _ZN4TMmc9BS_VolLabE:
   \   00000000                      DS8 12
   \                     _ZN4TMmc14BPB_SecPerClusE:
   \   0000000C                      DS8 1
   \                     _ZN4TMmc11BPB_NumFATsE:
   \   0000000D                      DS8 1
   \                     _ZN4TMmc11BPB_FATTypeE:
   \   0000000E                      DS8 1
     71          DWORD TMmc::_FF_PART_ADDR, TMmc::_FF_ROOT_ADDR, TMmc::_FF_DIR_ADDR;
     72          DWORD TMmc::_FF_FAT1_ADDR, TMmc::_FF_FAT2_ADDR;
     73          DWORD TMmc::_FF_RootDirSectors;
     74          WORD  TMmc::FirstDataSector;
     75          DWORD TMmc::FirstSectorofCluster;
     76          BYTE  TMmc::_FF_error;
   \                     _ZN4TMmc9_FF_errorE:
   \   0000000F                      DS8 1
   \                     _ZN4TMmc11PT_SecStartE:
   \   00000010                      DS8 2
   \                     _ZN4TMmc14BPB_BytsPerSecE:
   \   00000012                      DS8 2
   \                     _ZN4TMmc14BPB_RsvdSecCntE:
   \   00000014                      DS8 2
   \                     _ZN4TMmc14BPB_RootEntCntE:
   \   00000016                      DS8 2
   \                     _ZN4TMmc11BPB_FATSz16E:
   \   00000018                      DS8 2
   \                     _ZN4TMmc15FirstDataSectorE:
   \   0000001A                      DS8 2
     77          DWORD TMmc::_FF_buff_addr;
     78          DWORD TMmc::clus_0_addr, TMmc::_FF_n_temp;
     79          WORD  TMmc::c_counter;
   \                     _ZN4TMmc9c_counterE:
   \   0000001C                      DS8 2
   \   0000001E                      DS8 2
   \                     _ZN4TMmc10BS_jmpBootE:
   \   00000020                      DS8 4
   \                     _ZN4TMmc10BPB_TotSecE:
   \   00000024                      DS8 4
   \                     _ZN4TMmc12BS_VolSerialE:
   \   00000028                      DS8 4
   \                     _ZN4TMmc13_FF_PART_ADDRE:
   \   0000002C                      DS8 4
   \                     _ZN4TMmc13_FF_ROOT_ADDRE:
   \   00000030                      DS8 4
   \                     _ZN4TMmc12_FF_DIR_ADDRE:
   \   00000034                      DS8 4
   \                     _ZN4TMmc13_FF_FAT1_ADDRE:
   \   00000038                      DS8 4
   \                     _ZN4TMmc13_FF_FAT2_ADDRE:
   \   0000003C                      DS8 4
   \                     _ZN4TMmc18_FF_RootDirSectorsE:
   \   00000040                      DS8 4
   \                     _ZN4TMmc13_FF_buff_addrE:
   \   00000044                      DS8 4
   \                     _ZN4TMmc11clus_0_addrE:
   \   00000048                      DS8 4
   \                     _ZN4TMmc10_FF_n_tempE:
   \   0000004C                      DS8 4
     80          DWORD TMmc::DataClusTot;
   \                     _ZN4TMmc11DataClusTotE:
   \   00000050                      DS8 4

   \                                 In section .bss, align 4
   \                     _ZN4TMmc20FirstSectorofClusterE:
   \   00000000                      DS8 4
     81          //char  TMmc::_FF_FULL_PATH[_FF_PATH_LENGTH];
     82          //------------------------------------------------------------------------------------
     83          

   \                                 In section .text, align 2, keep-with-next
     84          bool TMmc::MMCPresence()
     85          {
   \                     _ZN4TMmc11MMCPresenceEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86          	if(reset_sd() == 0) return false;
   \   00000002   0x.... 0x....      BL       _ZN4TMmc8reset_sdEv
   \   00000006   0x1E40             SUBS     R0,R0,#+1
   \   00000008   0x4180             SBCS     R0,R0,R0
   \   0000000A   0x43C0             MVNS     R0,R0
   \   0000000C   0x0FC0             LSRS     R0,R0,#+31
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
     87            return true;
     88          }
     89          //------------------------------------------------------------------------------------
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void TMmc::SD_Select()
     92          {
     93            CS_LOW();
   \                     _ZN4TMmc9SD_SelectEv: (+1)
   \   00000000   0x.... 0x....      B.W      CS_LOW
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void TMmc::SD_Unselect()
     97          {
     98            CS_HIGH();
   \                     _ZN4TMmc11SD_UnselectEv: (+1)
   \   00000000   0x.... 0x....      B.W      CS_HIGH
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          BYTE TMmc::Change(BYTE dat)
    102          {
    103            return xmit_spi(dat);
   \                     _ZN4TMmc6ChangeEh: (+1)
   \   00000000   0x.... 0x....      B.W      xmit_spi
    104          }
    105          //------------------------------------------------------------------------------------
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void TMmc::SD_CS_ON()
    108          {
    109            CS_LOW();
   \                     _ZN4TMmc8SD_CS_ONEv: (+1)
   \   00000000   0x.... 0x....      B.W      CS_LOW
    110          }
    111          //------------------------------------------------------------------------------------
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void TMmc::SD_CS_OFF()
    114          {
    115            CS_HIGH();
   \                     _ZN4TMmc9SD_CS_OFFEv: (+1)
   \   00000000   0x.... 0x....      B.W      CS_HIGH
    116          }
    117          //------------------------------------------------------------------------------------
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void TMmc::MMCInit()
    120          {
   \                     _ZN4TMmc7MMCInitEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    121            SD_Unselect();
   \   00000002   0x.... 0x....      BL       _ZN4TMmc11SD_UnselectEv
    122            vTaskDelay( 2 / portTICK_RATE_MS );
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x.... 0x....      BL       vTaskDelay
    123          //  __delay_cycles(USEC(100));
    124            for(BYTE i = 0;i < 10;i++) Change(0xFF);
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE003             B.N      ??MMCInit_0
   \                     ??MMCInit_1: (+1)
   \   00000010   0x20FF             MOVS     R0,#+255
   \   00000012   0x.... 0x....      BL       _ZN4TMmc6ChangeEh
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \                     ??MMCInit_0: (+1)
   \   00000018   0x2C0A             CMP      R4,#+10
   \   0000001A   0xDBF9             BLT.N    ??MMCInit_1
    125          //  MMCResponse = GetResponse();
    126          //  SendCommand(CMD1,0,0xFF);
    127          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    128          //------------------------------------------------------------------------------------
    129          

   \                                 In section .text, align 2, keep-with-next
    130          BYTE TMmc::_FF_spi(BYTE mydata)
    131          {
    132            return Change(mydata);
   \                     _ZN4TMmc7_FF_spiEh: (+1)
   \   00000000   0x....             B.N      _ZN4TMmc6ChangeEh
    133          }
    134          //------------------------------------------------------------------------------------
    135          

   \                                 In section .text, align 2, keep-with-next
    136          WORD TMmc::send_cmd(BYTE command, DWORD argument)
    137          {
   \                     _ZN4TMmc8send_cmdEhm: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    138          	BYTE spi_data_out;
    139          	BYTE response_1;
    140          	DWORD response_2;
    141          	WORD c, i;
    142          	
    143          	SD_CS_ON();			// select chip
   \   00000006   0x.... 0x....      BL       _ZN4TMmc8SD_CS_ONEv
   \   0000000A   0x.... 0x....      ADR.W    R0,sd_cmd
   \   0000000E   0xEB00 0x06C4      ADD      R6,R0,R4, LSL #+3
   \   00000012   0x8870             LDRH     R0,[R6, #+2]
   \   00000014   0xB2C0             UXTB     R0,R0
    144          	
    145          	spi_data_out = sd_cmd[command].tx_data;
    146          	_FF_spi(spi_data_out);
   \   00000016   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    147          	
    148          	c = sd_cmd[command].arg;
    149          	if (c == NO_ARG)
   \   0000001A   0x88B0             LDRH     R0,[R6, #+4]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD107             BNE.N    ??send_cmd_0
    150          		for (i=0; i<4; i++)
   \   00000020   0x2500             MOVS     R5,#+0
   \                     ??send_cmd_1: (+1)
   \   00000022   0x2D04             CMP      R5,#+4
   \   00000024   0xDA13             BGE.N    ??send_cmd_2
    151          			_FF_spi(0);
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \   0000002E   0xE7F8             B.N      ??send_cmd_1
    152          	else
    153          	{
    154          		spi_data_out = (argument & 0xFF000000) >> 24;
    155          		_FF_spi(spi_data_out);
   \                     ??send_cmd_0: (+1)
   \   00000030   0x0E28             LSRS     R0,R5,#+24
   \   00000032   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    156          		spi_data_out = (argument & 0x00FF0000) >> 16;
    157          		_FF_spi(spi_data_out);
   \   00000036   0x0C28             LSRS     R0,R5,#+16
   \   00000038   0xB2C0             UXTB     R0,R0
   \   0000003A   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    158          		spi_data_out = (argument & 0x0000FF00) >> 8;
    159          		_FF_spi(spi_data_out);
   \   0000003E   0x0A28             LSRS     R0,R5,#+8
   \   00000040   0xB2C0             UXTB     R0,R0
   \   00000042   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    160          		spi_data_out = (argument & 0x000000FF);
    161          		_FF_spi(spi_data_out);
   \   00000046   0x4628             MOV      R0,R5
   \   00000048   0xB2C0             UXTB     R0,R0
   \   0000004A   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    162          	}
    163          	if (command == CMD0)
   \                     ??send_cmd_2: (+1)
   \   0000004E   0x2C00             CMP      R4,#+0
   \   00000050   0xD101             BNE.N    ??send_cmd_3
    164          		spi_data_out = 0x95;		// CRC byte, don't care except for first signal=0x95
   \   00000052   0x2095             MOVS     R0,#+149
   \   00000054   0xE000             B.N      ??send_cmd_4
    165          	else
    166          		spi_data_out = 0xFF;
   \                     ??send_cmd_3: (+1)
   \   00000056   0x20FF             MOVS     R0,#+255
    167          	_FF_spi(spi_data_out);
   \                     ??send_cmd_4: (+1)
   \   00000058   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    168          	_FF_spi(0xff);	
   \   0000005C   0x20FF             MOVS     R0,#+255
   \   0000005E   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    169          
    170          	c = sd_cmd[command].resp;
    171          	switch(c)
   \   00000062   0x88F0             LDRH     R0,[R6, #+6]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD005             BEQ.N    ??send_cmd_5
   \   00000068   0x2802             CMP      R0,#+2
   \   0000006A   0xD014             BEQ.N    ??send_cmd_6
   \   0000006C   0xD306             BCC.N    ??send_cmd_7
   \   0000006E   0x2803             CMP      R0,#+3
   \   00000070   0xD01B             BEQ.N    ??send_cmd_8
   \   00000072   0xE03D             B.N      ??send_cmd_9
    172          	{
    173          		case RESP_1:
    174          			return (_FF_spi(0xFF));
   \                     ??send_cmd_5: (+1)
   \   00000074   0x20FF             MOVS     R0,#+255
   \   00000076   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000007A   0x....             B.N      _ZN4TMmc7_FF_spiEh
    175          		case RESP_1b:
    176          			response_1 = _FF_spi(0xFF);
   \                     ??send_cmd_7: (+1)
   \   0000007C   0x20FF             MOVS     R0,#+255
   \   0000007E   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000082   0x4604             MOV      R4,R0
    177          			response_2 = 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0xE002             B.N      ??send_cmd_10
    178          			while (response_2 == 0)
    179          				response_2 = _FF_spi(0xFF);
   \                     ??send_cmd_11: (+1)
   \   00000088   0x20FF             MOVS     R0,#+255
   \   0000008A   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \                     ??send_cmd_10: (+1)
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD0FA             BEQ.N    ??send_cmd_11
    180          			return (response_1);
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0xBD70             POP      {R4-R6,PC}
    181          		case RESP_2:
    182          			response_2 = _FF_spi(0xFF);
   \                     ??send_cmd_6: (+1)
   \   00000096   0x20FF             MOVS     R0,#+255
   \   00000098   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000009C   0x4604             MOV      R4,R0
    183          			response_2 = (response_2 << 8) | _FF_spi(0xFF);
   \   0000009E   0x20FF             MOVS     R0,#+255
   \   000000A0   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   000000A4   0xEA40 0x2004      ORR      R0,R0,R4, LSL #+8
    184          			return (response_2);
   \   000000A8   0xBD70             POP      {R4-R6,PC}
    185          		case RESP_3:
    186          			response_1 = _FF_spi(0xFF);
   \                     ??send_cmd_8: (+1)
   \   000000AA   0x20FF             MOVS     R0,#+255
   \   000000AC   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   000000B0   0x4604             MOV      R4,R0
    187          			OCR_REG = 0;
   \   000000B2   0x.... 0x....      LDR.W    R5,??DataTable7_1
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x6028             STR      R0,[R5, #+0]
    188          			response_2 = _FF_spi(0xFF);
   \   000000BA   0x20FF             MOVS     R0,#+255
   \   000000BC   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    189          			OCR_REG = response_2 << 24;
   \   000000C0   0x0600             LSLS     R0,R0,#+24
   \   000000C2   0x6028             STR      R0,[R5, #+0]
    190          			response_2 = _FF_spi(0xFF);
   \   000000C4   0x20FF             MOVS     R0,#+255
   \   000000C6   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    191          			OCR_REG |= (response_2 << 16);
   \   000000CA   0x6829             LDR      R1,[R5, #+0]
   \   000000CC   0xEA41 0x4000      ORR      R0,R1,R0, LSL #+16
   \   000000D0   0x6028             STR      R0,[R5, #+0]
    192          			response_2 = _FF_spi(0xFF);
   \   000000D2   0x20FF             MOVS     R0,#+255
   \   000000D4   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    193          			OCR_REG |= (response_2 << 8);
   \   000000D8   0x6829             LDR      R1,[R5, #+0]
   \   000000DA   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   000000DE   0x6028             STR      R0,[R5, #+0]
    194          			response_2 = _FF_spi(0xFF);
   \   000000E0   0x20FF             MOVS     R0,#+255
   \   000000E2   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    195          			OCR_REG |= (response_2);
   \   000000E6   0x6829             LDR      R1,[R5, #+0]
   \   000000E8   0x4308             ORRS     R0,R0,R1
   \   000000EA   0x6028             STR      R0,[R5, #+0]
    196          			return (response_1);
   \   000000EC   0x4620             MOV      R0,R4
   \   000000EE   0xBD70             POP      {R4-R6,PC}
    197          	}
    198          	return (0);
   \                     ??send_cmd_9: (+1)
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0xBD70             POP      {R4-R6,PC}       ;; return
    199          }
    200          //------------------------------------------------------------------------------------
    201          

   \                                 In section .text, align 2, keep-with-next
    202          BYTE TMmc::reset_sd(void)
    203          {
   \                     _ZN4TMmc8reset_sdEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    204          	BYTE resp, n, c;
    205          
    206          	for (c=0; c<4; c++)		// try reset command 3 times if needed
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE000             B.N      ??reset_sd_0
   \                     ??reset_sd_1: (+1)
   \   00000006   0x1C64             ADDS     R4,R4,#+1
   \                     ??reset_sd_0: (+1)
   \   00000008   0xB2E4             UXTB     R4,R4
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDA1D             BGE.N    ??reset_sd_2
    207          	{
    208          		SD_CS_OFF();
   \   0000000E   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
    209          		for (n=0; n<10; n++)	// initialize clk signal to sync card
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0xE003             B.N      ??reset_sd_3
    210          			_FF_spi(0xFF);
   \                     ??reset_sd_4: (+1)
   \   00000016   0x20FF             MOVS     R0,#+255
   \   00000018   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??reset_sd_3: (+1)
   \   0000001E   0x2D0A             CMP      R5,#+10
   \   00000020   0xDBF9             BLT.N    ??reset_sd_4
    211          		resp = send_cmd(CMD0,0);
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x4608             MOV      R0,R1
   \   00000026   0x.... 0x....      BL       _ZN4TMmc8send_cmdEhm
    212          		for (n=0; n<200; n++)
   \   0000002A   0x2500             MOVS     R5,#+0
   \   0000002C   0xE003             B.N      ??reset_sd_5
    213          		{
    214          			if (resp == 0x1)
    215            			{
    216            				SD_CS_OFF();
    217            				return(1);
    218            			}
    219          	    resp = _FF_spi(0xFF);
   \                     ??reset_sd_6: (+1)
   \   0000002E   0x20FF             MOVS     R0,#+255
   \   00000030   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??reset_sd_5: (+1)
   \   00000036   0xB2ED             UXTB     R5,R5
   \   00000038   0x2DC8             CMP      R5,#+200
   \   0000003A   0xDAE4             BGE.N    ??reset_sd_1
   \   0000003C   0xB2C0             UXTB     R0,R0
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD1F5             BNE.N    ??reset_sd_6
   \   00000042   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}
    220          		}
    221          	}
    222          	return 0;
   \                     ??reset_sd_2: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    223          }
    224          //------------------------------------------------------------------------------------
    225          

   \                                 In section .text, align 2, keep-with-next
    226          void TMmc::clear_sd_buff(void)
    227          {
   \                     _ZN4TMmc13clear_sd_buffEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    228          	SD_CS_OFF();
   \   00000002   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
    229          	_FF_spi(0xFF);
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    230          	_FF_spi(0xFF);
   \   0000000C   0x20FF             MOVS     R0,#+255
   \   0000000E   0xE8BD 0x4002      POP      {R1,LR}
   \   00000012   0x....             B.N      _ZN4TMmc7_FF_spiEh
    231          }	
    232          //------------------------------------------------------------------------------------
    233          

   \                                 In section .text, align 2, keep-with-next
    234          BYTE TMmc::init_sd(void)
    235          {
   \                     _ZN4TMmc7init_sdEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    236          	BYTE resp;
    237          	WORD c;
    238          	
    239          	clear_sd_buff();
   \   00000002   0x.... 0x....      BL       _ZN4TMmc13clear_sd_buffEv
    240          
    241              for (c=0; c<1000; c++)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE000             B.N      ??init_sd_0
   \                     ??init_sd_1: (+1)
   \   0000000A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??init_sd_0: (+1)
   \   0000000C   0xB2AD             UXTH     R5,R5
   \   0000000E   0xF5B5 0x7F7A      CMP      R5,#+1000
   \   00000012   0xDA11             BGE.N    ??init_sd_2
    242              {
    243              	resp = send_cmd(CMD1, 0);
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       _ZN4TMmc8send_cmdEhm
   \   0000001C   0x4604             MOV      R4,R0
    244              	if (resp == 0)
   \   0000001E   0xB2E4             UXTB     R4,R4
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD009             BEQ.N    ??init_sd_2
    245              		break;
    246             		resp = _FF_spi(0xFF);
   \   00000024   0x20FF             MOVS     R0,#+255
   \   00000026   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000002A   0x0004             MOVS     R4,R0
    247             		if (resp == 0)
   \   0000002C   0xD004             BEQ.N    ??init_sd_2
    248             			break;
    249             		resp = _FF_spi(0xFF);
   \   0000002E   0x20FF             MOVS     R0,#+255
   \   00000030   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000034   0x0004             MOVS     R4,R0
    250             		if (resp == 0)
   \   00000036   0xD1E8             BNE.N    ??init_sd_1
    251             			break;
    252          	}
    253             	if (resp == 0)
   \                     ??init_sd_2: (+1)
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x4180             SBCS     R0,R0,R0
   \   00000040   0x0FC0             LSRS     R0,R0,#+31
    254          	{
    255          		return (1);
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    256          	}
    257          	else
    258          	{
    259          		return (0);
    260           	}        		
    261          }
    262          //------------------------------------------------------------------------------------
    263          

   \                                 In section .text, align 2, keep-with-next
    264          BYTE TMmc::_FF_read_disp(DWORD sd_addr)
    265          {
   \                     _ZN4TMmc13_FF_read_dispEm: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    266          	BYTE resp;
    267          	DWORD n, remainder;
    268          	
    269          	if (sd_addr % 0x200)
   \   00000004   0x05E0             LSLS     R0,R4,#+23
   \   00000006   0xD005             BEQ.N    ??_FF_read_disp_0
    270          	{	// Not a valid read address, return 0
    271          		_FF_error = READ_ERR;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000000E   0x73C8             STRB     R0,[R1, #+15]
    272          		return (0);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}
    273          	}
    274          
    275          	clear_sd_buff();
   \                     ??_FF_read_disp_0: (+1)
   \   00000014   0x.... 0x....      BL       _ZN4TMmc13clear_sd_buffEv
    276          	resp = send_cmd(CMD17, sd_addr);		// Send read request
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0x2007             MOVS     R0,#+7
   \   0000001C   0x.... 0x....      BL       _ZN4TMmc8send_cmdEhm
   \   00000020   0xE002             B.N      ??_FF_read_disp_1
    277          	
    278          	while(resp!=0xFE)
    279          		resp = _FF_spi(0xFF);
   \                     ??_FF_read_disp_2: (+1)
   \   00000022   0x20FF             MOVS     R0,#+255
   \   00000024   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \                     ??_FF_read_disp_1: (+1)
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x28FE             CMP      R0,#+254
   \   0000002C   0xD1F9             BNE.N    ??_FF_read_disp_2
    280          	for (n=0; n<512; n++)
   \   0000002E   0x2400             MOVS     R4,#+0
   \   00000030   0x....             LDR.N    R5,??DataTable7_3
   \   00000032   0xE013             B.N      ??_FF_read_disp_3
    281          	{
    282          		remainder = n % 0x10;
    283          		if (remainder == 0)
   \                     ??_FF_read_disp_4: (+1)
   \   00000034   0xF014 0x0F0F      TST      R4,#0xF
   \   00000038   0xD102             BNE.N    ??_FF_read_disp_5
    284          			printf("\n\r");
   \   0000003A   0x....             ADR.N    R0,??DataTable6  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000003C   0x.... 0x....      BL       printf
    285          		_FF_buff[n] = _FF_spi(0xFF);
   \                     ??_FF_read_disp_5: (+1)
   \   00000040   0x20FF             MOVS     R0,#+255
   \   00000042   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000046   0x5560             STRB     R0,[R4, R5]
    286          		if (_FF_buff[n]<0x10)
   \   00000048   0x2810             CMP      R0,#+16
   \   0000004A   0xDA02             BGE.N    ??_FF_read_disp_6
    287          			putchar(0x30);
   \   0000004C   0x2030             MOVS     R0,#+48
   \   0000004E   0x.... 0x....      BL       putchar
    288          		printf("%X ", _FF_buff[n]);
   \                     ??_FF_read_disp_6: (+1)
   \   00000052   0x5D61             LDRB     R1,[R4, R5]
   \   00000054   0x....             ADR.N    R0,??DataTable7  ;; "%X "
   \   00000056   0x.... 0x....      BL       printf
    289          	}
   \   0000005A   0x1C64             ADDS     R4,R4,#+1
   \                     ??_FF_read_disp_3: (+1)
   \   0000005C   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000060   0xD3E8             BCC.N    ??_FF_read_disp_4
    290          	_FF_spi(0xFF);
   \   00000062   0x20FF             MOVS     R0,#+255
   \   00000064   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    291          	_FF_spi(0xFF);
   \   00000068   0x20FF             MOVS     R0,#+255
   \   0000006A   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    292          	_FF_spi(0xFF);
   \   0000006E   0x20FF             MOVS     R0,#+255
   \   00000070   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
    293          	SD_CS_OFF();
   \   00000074   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
    294          	return (1);
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    295          }
    296          //------------------------------------------------------------------------------------
    297          
    298          // Read data from a SD card @ address

   \                                 In section .text, align 2, keep-with-next
    299          BYTE TMmc::_FF_read(DWORD sd_addr)
    300          {
   \                     _ZN4TMmc8_FF_readEm: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
    301          	BYTE resp;
    302          	DWORD n;
    303          	
    304          	if (sd_addr % BPB_BytsPerSec)
   \   00000004   0x....             LDR.N    R4,??DataTable7_2
   \   00000006   0x8A60             LDRH     R0,[R4, #+18]
   \   00000008   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000000C   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD005             BEQ.N    ??_FF_read_0
    305          	{	// Not a valid read address, return 0
    306          		_FF_error = READ_ERR;
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x73E0             STRB     R0,[R4, #+15]
    307          		return (0);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD70             POP      {R4-R6,PC}
    308          	}
    309          		
    310          //  __watchdog_reset();
    311          	for (;;)
    312          	{
    313          		clear_sd_buff();
    314          		
    315          		resp = send_cmd(CMD17, sd_addr);	// read block command
    316          		
    317          		for(n =0;n < 1000; n++)
    318            		{
    319            			if (resp == 0xFE)
    320              			{	// waiting for start byte
    321              				break;
    322              			}
    323            			resp = _FF_spi(0xFF);
    324            		}
    325          		if(resp == 0xFE)
    326            		{	// if it is a valid start byte => start reading SD Card
    327            			for (n = 0;n < BPB_BytsPerSec; n++)
    328            				_FF_buff[n] = _FF_spi(0xFF);
    329            			_FF_spi(0xFF);
    330            			_FF_spi(0xFF);
    331            			_FF_spi(0xFF);
    332            			SD_CS_OFF();
    333            			_FF_error = NO_ERR;
    334            			_FF_buff_addr = sd_addr;
    335            			return (1);
    336            		}
    337          
    338          		SD_CS_OFF();
   \                     ??_FF_read_1: (+1)
   \   0000001C   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
   \                     ??_FF_read_0: (+1)
   \   00000020   0x.... 0x....      BL       _ZN4TMmc13clear_sd_buffEv
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x2007             MOVS     R0,#+7
   \   00000028   0x.... 0x....      BL       _ZN4TMmc8send_cmdEhm
   \   0000002C   0x2600             MOVS     R6,#+0
   \   0000002E   0xE003             B.N      ??_FF_read_2
   \                     ??_FF_read_3: (+1)
   \   00000030   0x20FF             MOVS     R0,#+255
   \   00000032   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000036   0x1C76             ADDS     R6,R6,#+1
   \                     ??_FF_read_2: (+1)
   \   00000038   0xB2C0             UXTB     R0,R0
   \   0000003A   0xF5B6 0x7F7A      CMP      R6,#+1000
   \   0000003E   0xD201             BCS.N    ??_FF_read_4
   \   00000040   0x28FE             CMP      R0,#+254
   \   00000042   0xD1F5             BNE.N    ??_FF_read_3
   \                     ??_FF_read_4: (+1)
   \   00000044   0x28FE             CMP      R0,#+254
   \   00000046   0xD1E9             BNE.N    ??_FF_read_1
   \   00000048   0x2600             MOVS     R6,#+0
   \   0000004A   0xE005             B.N      ??_FF_read_5
   \                     ??_FF_read_6: (+1)
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000052   0x....             LDR.N    R1,??DataTable7_3
   \   00000054   0x5470             STRB     R0,[R6, R1]
   \   00000056   0x1C76             ADDS     R6,R6,#+1
   \                     ??_FF_read_5: (+1)
   \   00000058   0x8A60             LDRH     R0,[R4, #+18]
   \   0000005A   0x4286             CMP      R6,R0
   \   0000005C   0xD3F6             BCC.N    ??_FF_read_6
   \   0000005E   0x20FF             MOVS     R0,#+255
   \   00000060   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000064   0x20FF             MOVS     R0,#+255
   \   00000066   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000006A   0x20FF             MOVS     R0,#+255
   \   0000006C   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000070   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x73E0             STRB     R0,[R4, #+15]
   \   00000078   0x6465             STR      R5,[R4, #+68]
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0xBD70             POP      {R4-R6,PC}       ;; return
    339          	}	
    340          }
    341          //------------------------------------------------------------------------------------
    342          

   \                                 In section .text, align 2, keep-with-next
    343          BYTE TMmc::_FF_write(DWORD sd_addr)
    344          {
   \                     _ZN4TMmc9_FF_writeEm: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    345          	BYTE resp, calc, valid_flag;
    346          	WORD n;
    347          	
    348          //	LedOn();
    349          	
    350          	if ((sd_addr % BPB_BytsPerSec) || (sd_addr <= _FF_PART_ADDR))
   \   00000004   0x....             LDR.N    R5,??DataTable7_2
   \   00000006   0x8A68             LDRH     R0,[R5, #+18]
   \   00000008   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   0000000C   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD102             BNE.N    ??_FF_write_0
   \   00000014   0x6AE8             LDR      R0,[R5, #+44]
   \   00000016   0x42A0             CMP      R0,R4
   \   00000018   0xD305             BCC.N    ??_FF_write_1
    351            	{	// Not a valid write address, return 0
    352            		_FF_error = WRITE_ERR;
   \                     ??_FF_write_0: (+1)
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x73E8             STRB     R0,[R5, #+15]
    353            		return (0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBDF2             POP      {R1,R4-R7,PC}
    354            	}
    355          
    356          	for (;;)
    357            	{
    358            		clear_sd_buff();
    359            		resp = send_cmd(CMD24, sd_addr);
    360            		valid_flag = 0;
    361            		for (n=0; n<1000; n++)
    362              		{
    363              			if (resp == 0x00)
    364                			{
    365                				valid_flag = 1;
    366                				break;
    367                			}
    368              			resp = _FF_spi(0xFF);
    369              		}
    370            		if (valid_flag)
    371              		{
    372          	        BYTE *ArrPtr;
    373          	        ArrPtr = &_FF_buff[0];
    374              			_FF_spi(0xFF);
    375                    Change(0xFE);	
    376          //    			ChangeWithoutWaiting(0xFE);					// Start Block Token
    377              			for (n=0; n<512; n++)		// Write Data in buffer to card
    378              			  {
    379              			    BYTE ChByte;
    380              			    
    381              			    ChByte = *ArrPtr;
    382              			    ArrPtr++;
    383                        Change(ChByte);	
    384          //    				  WaitThenChange(ChByte);
    385              				}
    386          //    			WaitForChange();	
    387             				SD_CS_ON();
    388              			_FF_spi(0xFF);					// Send 2 blank CRC bytes
    389              			_FF_spi(0xFF);
    390              			resp = _FF_spi(0xFF);			// Response should be 0bXXX00101
    391              			calc = resp | 0xE0;
    392              			if (calc==0xE5)
    393                			{
    394                				while(_FF_spi(0xFF)==0)
    395                					;	// Clear Buffer before returning 'OK'
    396                				SD_CS_OFF();
    397                				_FF_error = NO_ERR;
    398                				return(1);
    399              			  }
    400              		}
    401          		SD_CS_OFF(); 
   \                     ??_FF_write_2: (+1)
   \   00000022   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
   \                     ??_FF_write_1: (+1)
   \   00000026   0x.... 0x....      BL       _ZN4TMmc13clear_sd_buffEv
   \   0000002A   0x4621             MOV      R1,R4
   \   0000002C   0x2009             MOVS     R0,#+9
   \   0000002E   0x.... 0x....      BL       _ZN4TMmc8send_cmdEhm
   \   00000032   0x2600             MOVS     R6,#+0
   \   00000034   0x4637             MOV      R7,R6
   \   00000036   0xE003             B.N      ??_FF_write_3
   \                     ??_FF_write_4: (+1)
   \   00000038   0x20FF             MOVS     R0,#+255
   \   0000003A   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000003E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??_FF_write_3: (+1)
   \   00000040   0xB2BF             UXTH     R7,R7
   \   00000042   0xF5B7 0x7F7A      CMP      R7,#+1000
   \   00000046   0xDA03             BGE.N    ??_FF_write_5
   \   00000048   0xB2C0             UXTB     R0,R0
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1F4             BNE.N    ??_FF_write_4
   \   0000004E   0x2601             MOVS     R6,#+1
   \                     ??_FF_write_5: (+1)
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD0E6             BEQ.N    ??_FF_write_2
   \   00000054   0x....             LDR.N    R6,??DataTable7_3
   \   00000056   0x20FF             MOVS     R0,#+255
   \   00000058   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000005C   0x20FE             MOVS     R0,#+254
   \   0000005E   0x.... 0x....      BL       _ZN4TMmc6ChangeEh
   \   00000062   0x2700             MOVS     R7,#+0
   \   00000064   0xE004             B.N      ??_FF_write_6
   \                     ??_FF_write_7: (+1)
   \   00000066   0xF816 0x0B01      LDRB     R0,[R6], #+1
   \   0000006A   0x.... 0x....      BL       _ZN4TMmc6ChangeEh
   \   0000006E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??_FF_write_6: (+1)
   \   00000070   0xF5B7 0x7F00      CMP      R7,#+512
   \   00000074   0xDBF7             BLT.N    ??_FF_write_7
   \   00000076   0x.... 0x....      BL       _ZN4TMmc8SD_CS_ONEv
   \   0000007A   0x20FF             MOVS     R0,#+255
   \   0000007C   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000080   0x20FF             MOVS     R0,#+255
   \   00000082   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000086   0x20FF             MOVS     R0,#+255
   \   00000088   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000008C   0xF040 0x00E0      ORR      R0,R0,#0xE0
   \   00000090   0x28E5             CMP      R0,#+229
   \   00000092   0xD1C6             BNE.N    ??_FF_write_2
   \                     ??_FF_write_8: (+1)
   \   00000094   0x20FF             MOVS     R0,#+255
   \   00000096   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD0FA             BEQ.N    ??_FF_write_8
   \   0000009E   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x73E8             STRB     R0,[R5, #+15]
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    402          	}
    403          }
    404          //------------------------------------------------------------------------------------
    405          //const char sIn1[] = {"Part Address:"};
    406          //const char sIn2[] = {"BPB_BytsPerSec:"};
    407          //const char sIn3[] = {"BPB_SecPerClus:"};
    408          //const char sIn4[] = {"BPB_RsvdSecCnt:"};
    409          //const char sIn5[] = {"BPB_NumFATs:"};
    410          //const char sIn6[] = {"BPB_FATType:"};
    411          //const char sIn7[] = {"ClusterCnt:"};
    412          //const char sInOD[] = {"\n\r"};
    413          //------------------------------------------------------------------------------------
    414          

   \                                 In section .text, align 2, keep-with-next
    415          BYTE TMmc::initialize_media()
    416          {
   \                     _ZN4TMmc16initialize_mediaEv: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    417          	BYTE data_temp = 1;
   \   00000004   0x2501             MOVS     R5,#+1
    418          	DWORD n;
    419          	
    420          	// SPI BUS SETUP
    421          	// SPI initialization
    422          	// SPI Type: Master
    423          	// SPI Clock Rate: 921.600 kHz
    424          	// SPI Clock Phase: Cycle Half
    425          	// SPI Clock Polarity: Low
    426          	// SPI Data Order: MSB First
    427          		
    428          	BPB_BytsPerSec = 512;	// Initialize sector size to 512 (all SD cards have a 512 sector size)
   \   00000006   0x....             LDR.N    R4,??DataTable7_2
   \   00000008   0xF44F 0x7000      MOV      R0,#+512
   \   0000000C   0x8260             STRH     R0,[R4, #+18]
    429                  _FF_n_temp = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x64E0             STR      R0,[R4, #+76]
    430          	if (reset_sd()==0)
   \   00000012   0x.... 0x....      BL       _ZN4TMmc8reset_sdEv
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD019             BEQ.N    ??initialize_media_0
    431          		return 0;
    432          	// delay_ms(50);
    433          	for (n=0; ((n<100)||(data_temp==0)) ; n++)
   \   0000001A   0x2600             MOVS     R6,#+0
   \   0000001C   0xE008             B.N      ??initialize_media_1
    434          	{
    435          		SD_CS_ON();
   \                     ??initialize_media_2: (+1)
   \   0000001E   0x.... 0x....      BL       _ZN4TMmc8SD_CS_ONEv
    436          		data_temp = _FF_spi(0xFF);
   \   00000022   0x20FF             MOVS     R0,#+255
   \   00000024   0x.... 0x....      BL       _ZN4TMmc7_FF_spiEh
   \   00000028   0x4605             MOV      R5,R0
    437          		SD_CS_OFF();
   \   0000002A   0x.... 0x....      BL       _ZN4TMmc9SD_CS_OFFEv
    438          	}
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \                     ??initialize_media_1: (+1)
   \   00000030   0x2E64             CMP      R6,#+100
   \   00000032   0xD3F4             BCC.N    ??initialize_media_2
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD0F2             BEQ.N    ??initialize_media_2
    439          	// delay_ms(50);
    440          	for (n=0; n<100; n++)
   \   00000038   0x2600             MOVS     R6,#+0
   \   0000003A   0xE000             B.N      ??initialize_media_3
   \                     ??initialize_media_4: (+1)
   \   0000003C   0x1C76             ADDS     R6,R6,#+1
   \                     ??initialize_media_3: (+1)
   \   0000003E   0x2E64             CMP      R6,#+100
   \   00000040   0xD207             BCS.N    ??initialize_media_5
    441          	{
    442          		if (init_sd())		// Initialization Succeeded
   \   00000042   0x.... 0x....      BL       _ZN4TMmc7init_sdEv
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD103             BNE.N    ??initialize_media_5
    443          			break;
    444          		if (n==99)
   \   0000004A   0x2E63             CMP      R6,#+99
   \   0000004C   0xD1F6             BNE.N    ??initialize_media_4
    445          			return 0;
   \                     ??initialize_media_0: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE0B3             B.N      ??initialize_media_6
    446          	}
    447          
    448          	if (_FF_read(0x0)==0)
   \                     ??initialize_media_5: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       _ZN4TMmc8_FF_readEm
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD023             BEQ.N    ??initialize_media_7
    449          	{
    450          		_FF_error = INIT_ERR;
    451          		return 0;
    452          	}
    453          	
    454          	PT_SecStart = ((WORD) _FF_buff[0x1c7] << 8) | (WORD) _FF_buff[0x1c6];
   \   0000005C   0x....             LDR.N    R5,??DataTable7_3
   \   0000005E   0xF505 0x70E3      ADD      R0,R5,#+454
   \   00000062   0x7841             LDRB     R1,[R0, #+1]
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   0000006A   0x8220             STRH     R0,[R4, #+16]
   \   0000006C   0x7828             LDRB     R0,[R5, #+0]
   \   0000006E   0x28EB             CMP      R0,#+235
   \   00000070   0xD102             BNE.N    ??initialize_media_8
   \   00000072   0x78A9             LDRB     R1,[R5, #+2]
   \   00000074   0x2990             CMP      R1,#+144
   \   00000076   0xD001             BEQ.N    ??initialize_media_9
   \                     ??initialize_media_8: (+1)
   \   00000078   0x28E9             CMP      R0,#+233
   \   0000007A   0xD109             BNE.N    ??initialize_media_10
   \                     ??initialize_media_9: (+1)
   \   0000007C   0xF505 0x70FF      ADD      R0,R5,#+510
   \   00000080   0x7801             LDRB     R1,[R0, #+0]
   \   00000082   0x2955             CMP      R1,#+85
   \   00000084   0xD104             BNE.N    ??initialize_media_10
   \   00000086   0x7840             LDRB     R0,[R0, #+1]
   \   00000088   0x28AA             CMP      R0,#+170
   \   0000008A   0xD101             BNE.N    ??initialize_media_10
    455          	
    456          	if ((((_FF_buff[0]==0xEB)&&(_FF_buff[2]==0x90))||(_FF_buff[0]==0xE9))&&((_FF_buff[510]==0x55)&&(_FF_buff[511]==0xAA)))
    457              	PT_SecStart = 0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x8220             STRH     R0,[R4, #+16]
    458           
    459          	_FF_PART_ADDR = (DWORD) PT_SecStart * (DWORD) BPB_BytsPerSec;
   \                     ??initialize_media_10: (+1)
   \   00000090   0x8A21             LDRH     R1,[R4, #+16]
   \   00000092   0x8A60             LDRH     R0,[R4, #+18]
   \   00000094   0x4348             MULS     R0,R0,R1
   \   00000096   0x62E0             STR      R0,[R4, #+44]
    460          
    461          	if (PT_SecStart)
   \   00000098   0x2900             CMP      R1,#+0
   \   0000009A   0xD007             BEQ.N    ??initialize_media_11
    462          	{
    463          		if (_FF_read(_FF_PART_ADDR)==0)
   \   0000009C   0x.... 0x....      BL       _ZN4TMmc8_FF_readEm
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD103             BNE.N    ??initialize_media_11
    464          		{
    465          			_FF_error = INIT_ERR;
   \                     ??initialize_media_7: (+1)
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x73E0             STRB     R0,[R4, #+15]
    466          			return (0);
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xE086             B.N      ??initialize_media_6
    467          		}
    468          	}
    469          
    470            BS_jmpBoot = (((DWORD) _FF_buff[0] << 16) | ((WORD) _FF_buff[1] << 8) | (WORD) _FF_buff[2]);    		
   \                     ??initialize_media_11: (+1)
   \   000000AC   0x7828             LDRB     R0,[R5, #+0]
   \   000000AE   0x7869             LDRB     R1,[R5, #+1]
   \   000000B0   0x0209             LSLS     R1,R1,#+8
   \   000000B2   0xEA41 0x4000      ORR      R0,R1,R0, LSL #+16
   \   000000B6   0x78A9             LDRB     R1,[R5, #+2]
   \   000000B8   0x4308             ORRS     R0,R1,R0
   \   000000BA   0x6220             STR      R0,[R4, #+32]
    471          	BPB_BytsPerSec = ((WORD) _FF_buff[0xC] << 8) | (WORD) _FF_buff[0xB];
   \   000000BC   0x7B28             LDRB     R0,[R5, #+12]
   \   000000BE   0x7AE9             LDRB     R1,[R5, #+11]
   \   000000C0   0xEA41 0x2100      ORR      R1,R1,R0, LSL #+8
   \   000000C4   0x8261             STRH     R1,[R4, #+18]
    472            BPB_SecPerClus = _FF_buff[0xD];
   \   000000C6   0x7B68             LDRB     R0,[R5, #+13]
   \   000000C8   0x7320             STRB     R0,[R4, #+12]
    473          	BPB_RsvdSecCnt = ((WORD) _FF_buff[0xF] << 8) | (WORD) _FF_buff[0xE];	
   \   000000CA   0x7BEA             LDRB     R2,[R5, #+15]
   \   000000CC   0x7BAB             LDRB     R3,[R5, #+14]
   \   000000CE   0xEA43 0x2202      ORR      R2,R3,R2, LSL #+8
   \   000000D2   0x82A2             STRH     R2,[R4, #+20]
    474          	BPB_NumFATs = _FF_buff[0x10];
   \   000000D4   0x7C2B             LDRB     R3,[R5, #+16]
   \   000000D6   0x7363             STRB     R3,[R4, #+13]
    475          	BPB_RootEntCnt = ((WORD) _FF_buff[0x12] << 8) | (WORD) _FF_buff[0x11];	
   \   000000D8   0x7CAE             LDRB     R6,[R5, #+18]
   \   000000DA   0x7C6F             LDRB     R7,[R5, #+17]
   \   000000DC   0xEA47 0x2706      ORR      R7,R7,R6, LSL #+8
   \   000000E0   0x82E7             STRH     R7,[R4, #+22]
    476          	BPB_FATSz16 = ((WORD) _FF_buff[0x17] << 8) | (WORD) _FF_buff[0x16];
   \   000000E2   0x7DEE             LDRB     R6,[R5, #+23]
   \   000000E4   0xF895 0xC016      LDRB     R12,[R5, #+22]
   \   000000E8   0xEA4C 0x2C06      ORR      R12,R12,R6, LSL #+8
   \   000000EC   0xF8A4 0xC018      STRH     R12,[R4, #+24]
    477          	BPB_TotSec = ((WORD) _FF_buff[0x14] << 8) | (WORD) _FF_buff[0x13];
   \   000000F0   0x7D2E             LDRB     R6,[R5, #+20]
   \   000000F2   0xF895 0xE013      LDRB     LR,[R5, #+19]
   \   000000F6   0xEA4E 0x2606      ORR      R6,LR,R6, LSL #+8
   \   000000FA   0x6266             STR      R6,[R4, #+36]
    478          
    479          	if (BPB_TotSec==0)
   \   000000FC   0xF105 0x0621      ADD      R6,R5,#+33
   \   00000100   0xF8D4 0xE024      LDR      LR,[R4, #+36]
   \   00000104   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000108   0xD111             BNE.N    ??initialize_media_12
    480          		BPB_TotSec = ((DWORD) _FF_buff[0x23] << 24) | ((DWORD) _FF_buff[0x22] << 16)
    481          					| ((DWORD) _FF_buff[0x21] << 8) | ((DWORD) _FF_buff[0x20]);
   \   0000010A   0xF896 0xE002      LDRB     LR,[R6, #+2]
   \   0000010E   0xF896 0x8001      LDRB     R8,[R6, #+1]
   \   00000112   0xEA4F 0x4808      LSL      R8,R8,#+16
   \   00000116   0xEA48 0x6E0E      ORR      LR,R8,LR, LSL #+24
   \   0000011A   0xF896 0x8000      LDRB     R8,[R6, #+0]
   \   0000011E   0xEA4E 0x2E08      ORR      LR,LR,R8, LSL #+8
   \   00000122   0xF895 0x8020      LDRB     R8,[R5, #+32]
   \   00000126   0xEA48 0x0E0E      ORR      LR,R8,LR
   \   0000012A   0xF8C4 0xE024      STR      LR,[R4, #+36]
    482          	BS_VolSerial = ((DWORD) _FF_buff[0x2A] << 24) | ((DWORD) _FF_buff[0x29] << 16)
    483          				| ((DWORD) _FF_buff[0x28] << 8) | ((DWORD) _FF_buff[0x27]);
   \                     ??initialize_media_12: (+1)
   \   0000012E   0xF896 0xE009      LDRB     LR,[R6, #+9]
   \   00000132   0xF896 0x8008      LDRB     R8,[R6, #+8]
   \   00000136   0xEA4F 0x4808      LSL      R8,R8,#+16
   \   0000013A   0xEA48 0x6E0E      ORR      LR,R8,LR, LSL #+24
   \   0000013E   0xF896 0x8007      LDRB     R8,[R6, #+7]
   \   00000142   0xEA4E 0x2E08      ORR      LR,LR,R8, LSL #+8
   \   00000146   0x79B6             LDRB     R6,[R6, #+6]
   \   00000148   0xEA46 0x060E      ORR      R6,R6,LR
   \   0000014C   0x62A6             STR      R6,[R4, #+40]
    484          
    485          	for (n=0; n<11; n++)
   \   0000014E   0x2600             MOVS     R6,#+0
   \   00000150   0xE006             B.N      ??initialize_media_13
    486          		BS_VolLab[n] = _FF_buff[0x2B+n];
   \                     ??initialize_media_14: (+1)
   \   00000152   0xEB06 0x0E05      ADD      LR,R6,R5
   \   00000156   0xF89E 0xE02B      LDRB     LR,[LR, #+43]
   \   0000015A   0xF806 0xE004      STRB     LR,[R6, R4]
   \   0000015E   0x1C76             ADDS     R6,R6,#+1
   \                     ??initialize_media_13: (+1)
   \   00000160   0x2E0B             CMP      R6,#+11
   \   00000162   0xD3F6             BCC.N    ??initialize_media_14
    487          
    488          	BS_VolLab[11] = 0;		// Terminate the string
   \   00000164   0x2500             MOVS     R5,#+0
   \   00000166   0x72E5             STRB     R5,[R4, #+11]
    489          	_FF_FAT1_ADDR = _FF_PART_ADDR + ((DWORD) BPB_RsvdSecCnt * (DWORD) BPB_BytsPerSec); 
   \   00000168   0x6AE5             LDR      R5,[R4, #+44]
   \   0000016A   0xFB01 0x5602      MLA      R6,R1,R2,R5
   \   0000016E   0x63A6             STR      R6,[R4, #+56]
    490          	_FF_FAT2_ADDR = _FF_FAT1_ADDR + ((DWORD) BPB_FATSz16 * (DWORD) BPB_BytsPerSec);
   \   00000170   0xFB01 0x660C      MLA      R6,R1,R12,R6
   \   00000174   0x63E6             STR      R6,[R4, #+60]
    491          	_FF_ROOT_ADDR = ((DWORD) BPB_NumFATs * (DWORD) BPB_FATSz16) + (DWORD) BPB_RsvdSecCnt;
    492          	_FF_ROOT_ADDR *= BPB_BytsPerSec;
    493          	_FF_ROOT_ADDR += _FF_PART_ADDR;
   \   00000176   0xFB0C 0x2603      MLA      R6,R12,R3,R2
   \   0000017A   0xFB01 0x5506      MLA      R5,R1,R6,R5
   \   0000017E   0x6325             STR      R5,[R4, #+48]
    494          	
    495          	_FF_RootDirSectors = ((BPB_RootEntCnt * 32) + BPB_BytsPerSec - 1) / BPB_BytsPerSec;
   \   00000180   0xEB01 0x1647      ADD      R6,R1,R7, LSL #+5
   \   00000184   0x1E76             SUBS     R6,R6,#+1
   \   00000186   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \   0000018A   0x6421             STR      R1,[R4, #+64]
   \   0000018C   0xFB0C 0x2103      MLA      R1,R12,R3,R2
   \   00000190   0x6C22             LDR      R2,[R4, #+64]
   \   00000192   0x1851             ADDS     R1,R2,R1
   \   00000194   0x8361             STRH     R1,[R4, #+26]
    496          	FirstDataSector = (BPB_NumFATs * BPB_FATSz16) + BPB_RsvdSecCnt + _FF_RootDirSectors; 
    497          	
    498          	DataClusTot = BPB_TotSec - FirstDataSector;
    499          	DataClusTot /= BPB_SecPerClus;
   \   00000196   0x6A62             LDR      R2,[R4, #+36]
   \   00000198   0xB289             UXTH     R1,R1
   \   0000019A   0x1A51             SUBS     R1,R2,R1
   \   0000019C   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000001A0   0x6520             STR      R0,[R4, #+80]
    500          	clus_0_addr = 0;		// Reset Empty Cluster table location
   \   000001A2   0x2100             MOVS     R1,#+0
   \   000001A4   0x64A1             STR      R1,[R4, #+72]
    501          	c_counter = 1;
   \   000001A6   0x2101             MOVS     R1,#+1
   \   000001A8   0x83A1             STRH     R1,[R4, #+28]
    502          	
    503          	if (DataClusTot < 4085)				// FAT12
   \   000001AA   0xF640 0x71F5      MOVW     R1,#+4085
   \   000001AE   0x4288             CMP      R0,R1
   \   000001B0   0xD205             BCS.N    ??initialize_media_15
    504          		BPB_FATType = 0x32;
   \   000001B2   0x2032             MOVS     R0,#+50
   \   000001B4   0x73A0             STRB     R0,[R4, #+14]
    505          	else 
    506          	if (DataClusTot < 65525)		// FAT16
    507          		BPB_FATType = 0x36;
    508          	else
    509          	{
    510          		BPB_FATType = 0;
    511          		_FF_error = FAT_ERR;
    512          		return (0);
    513          	}
    514              
    515          	_FF_DIR_ADDR = _FF_ROOT_ADDR;		// Set current directory to root address
   \                     ??initialize_media_16: (+1)
   \   000001B6   0x6365             STR      R5,[R4, #+52]
    516          
    517          //	_FF_FULL_PATH[0] = 0x5C;	// a '\'
    518          //	_FF_FULL_PATH[1] = 0;
    519          
    520          
    521          	
    522          	#ifdef MMC_SEND_CARDINFO
    523          	
    524          		TAppProcessor::SendString(sIn1);
    525          		CharLong Tmp;
    526          		Tmp.Long = _FF_PART_ADDR;
    527          		TAppProcessor::SendHex(Tmp.Char[3]);
    528          		TAppProcessor::SendHex(Tmp.Char[2]);
    529          		TAppProcessor::SendHex(Tmp.Char[1]);
    530          		TAppProcessor::SendHex(Tmp.Char[0]);
    531          		TAppProcessor::SendString(sInOD);
    532          		
    533          		TAppProcessor::SendString(sIn2);
    534          		Tmp.Long = BPB_BytsPerSec;
    535          		TAppProcessor::SendHex(Tmp.Char[1]);
    536          		TAppProcessor::SendHex(Tmp.Char[0]);
    537          		TAppProcessor::SendString(sInOD);
    538          	
    539          		TAppProcessor::SendString(sIn3);
    540          		TAppProcessor::SendHex(BPB_SecPerClus);
    541          		TAppProcessor::SendString(sInOD);
    542          		TAppProcessor::SendString(sIn4);
    543          		Tmp.Long = BPB_RsvdSecCnt;
    544          		TAppProcessor::SendHex(Tmp.Char[1]);
    545          		TAppProcessor::SendHex(Tmp.Char[0]);
    546          		TAppProcessor::SendString(sInOD);
    547          	
    548          		TAppProcessor::SendString(sIn5);
    549          		TAppProcessor::SendHex(BPB_NumFATs);
    550          		TAppProcessor::SendString(sInOD);
    551          		TAppProcessor::SendString(sIn6);
    552          		TAppProcessor::SendHex(BPB_FATType);
    553          		TAppProcessor::SendString(sInOD);
    554          	
    555          		TAppProcessor::SendString(sIn7);
    556          		Tmp.Long = DataClusTot;
    557          		TAppProcessor::SendHex(Tmp.Char[3]);
    558          		TAppProcessor::SendHex(Tmp.Char[2]);
    559          		TAppProcessor::SendHex(Tmp.Char[1]);
    560          		TAppProcessor::SendHex(Tmp.Char[0]);
    561          		TAppProcessor::SendString(sInOD);
    562          		TAppProcessor::SendString(BS_VolLab);
    563          		TAppProcessor::SendString(sInOD);
    564          	
    565          	#endif
    566          
    567          /*	
    568          	#ifdef _MYDEBUG_ON_
    569          		printf("\n\rPart Address:  %lX", _FF_PART_ADDR);
    570          		printf("\n\rBS_jmpBoot:  %lX", BS_jmpBoot);
    571          		printf("\n\rBPB_BytsPerSec:  %X", BPB_BytsPerSec);
    572          		printf("\n\rBPB_SecPerClus:  %X", BPB_SecPerClus);
    573          		printf("\n\rBPB_RsvdSecCnt:  %X", BPB_RsvdSecCnt);
    574          		printf("\n\rBPB_NumFATs:  %X", BPB_NumFATs);
    575          		printf("\n\rBPB_RootEntCnt:  %X", BPB_RootEntCnt);
    576          		printf("\n\rBPB_FATSz16:  %X", BPB_FATSz16);
    577          		printf("\n\rBPB_TotSec16:  %lX", BPB_TotSec);
    578          		if (BPB_FATType == 0x32)
    579          			printf("\n\rBPB_FATType:  FAT12");
    580          		else if (BPB_FATType == 0x36)
    581          			printf("\n\rBPB_FATType:  FAT16");
    582          		else
    583          			printf("\n\rBPB_FATType:  FAT ERROR!!");
    584          		printf("\n\rClusterCnt:  %lX", DataClusTot);
    585          		printf("\n\rROOT_ADDR:  %lX", _FF_ROOT_ADDR);
    586          		printf("\n\rFAT2_ADDR:  %lX", _FF_FAT2_ADDR);
    587          		printf("\n\rRootDirSectors:  %X", _FF_RootDirSectors);
    588          		printf("\n\rFirstDataSector:  %X", FirstDataSector);
    589          	#endif*/
    590          	
    591          	return 1;	
   \   000001B8   0x2001             MOVS     R0,#+1
   \                     ??initialize_media_6: (+1)
   \   000001BA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??initialize_media_15: (+1)
   \   000001BE   0xF64F 0x71F5      MOVW     R1,#+65525
   \   000001C2   0x4288             CMP      R0,R1
   \   000001C4   0xD202             BCS.N    ??initialize_media_17
   \   000001C6   0x2036             MOVS     R0,#+54
   \   000001C8   0x73A0             STRB     R0,[R4, #+14]
   \   000001CA   0xE7F4             B.N      ??initialize_media_16
   \                     ??initialize_media_17: (+1)
   \   000001CC   0x2000             MOVS     R0,#+0
   \   000001CE   0x73A0             STRB     R0,[R4, #+14]
   \   000001D0   0x200C             MOVS     R0,#+12
   \   000001D2   0x73E0             STRB     R0,[R4, #+15]
   \   000001D4   0x2000             MOVS     R0,#+0
   \   000001D6   0xE7F0             B.N      ??initialize_media_6
    592          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x25 0x58          DC8      "%X "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     _ZN4TMmc7OCR_REGE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     _ZN4TMmc9BS_VolLabE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     _ZN4TMmc8_FF_buffE

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x58          DC8 "%X "
   \              0x20 0x00    
    593          //------------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   TMmc::Change(BYTE)
         0   -> xmit_spi
       8   TMmc::MMCInit()
         8   -> TMmc::Change(BYTE)
         8   -> TMmc::SD_Unselect()
         8   -> vTaskDelay
       8   TMmc::MMCPresence()
         8   -> TMmc::reset_sd()
       0   TMmc::SD_CS_OFF()
         0   -> CS_HIGH
       0   TMmc::SD_CS_ON()
         0   -> CS_LOW
       0   TMmc::SD_Select()
         0   -> CS_LOW
       0   TMmc::SD_Unselect()
         0   -> CS_HIGH
      16   TMmc::_FF_read(DWORD)
        16   -> TMmc::SD_CS_OFF()
        16   -> TMmc::_FF_spi(BYTE)
        16   -> TMmc::clear_sd_buff()
        16   -> TMmc::send_cmd(BYTE, DWORD)
      16   TMmc::_FF_read_disp(DWORD)
        16   -> TMmc::SD_CS_OFF()
        16   -> TMmc::_FF_spi(BYTE)
        16   -> TMmc::clear_sd_buff()
        16   -> TMmc::send_cmd(BYTE, DWORD)
        16   -> printf
        16   -> putchar
       0   TMmc::_FF_spi(BYTE)
         0   -> TMmc::Change(BYTE)
      24   TMmc::_FF_write(DWORD)
        24   -> TMmc::Change(BYTE)
        24   -> TMmc::SD_CS_OFF()
        24   -> TMmc::SD_CS_ON()
        24   -> TMmc::_FF_spi(BYTE)
        24   -> TMmc::clear_sd_buff()
        24   -> TMmc::send_cmd(BYTE, DWORD)
       8   TMmc::clear_sd_buff()
         8   -> TMmc::SD_CS_OFF()
         0   -> TMmc::_FF_spi(BYTE)
         8   -> TMmc::_FF_spi(BYTE)
      16   TMmc::init_sd()
        16   -> TMmc::_FF_spi(BYTE)
        16   -> TMmc::clear_sd_buff()
        16   -> TMmc::send_cmd(BYTE, DWORD)
      24   TMmc::initialize_media()
        24   -> TMmc::SD_CS_OFF()
        24   -> TMmc::SD_CS_ON()
        24   -> TMmc::_FF_read(DWORD)
        24   -> TMmc::_FF_spi(BYTE)
        24   -> TMmc::init_sd()
        24   -> TMmc::reset_sd()
      16   TMmc::reset_sd()
        16   -> TMmc::SD_CS_OFF()
        16   -> TMmc::_FF_spi(BYTE)
        16   -> TMmc::send_cmd(BYTE, DWORD)
      16   TMmc::send_cmd(BYTE, DWORD)
        16   -> TMmc::SD_CS_ON()
        16   -> TMmc::_FF_spi(BYTE)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ?_0
       4  ?_1
      84  TMmc::BS_VolLab
          TMmc::BPB_SecPerClus
          TMmc::BPB_NumFATs
          TMmc::BPB_FATType
          TMmc::_FF_error
          TMmc::PT_SecStart
          TMmc::BPB_BytsPerSec
          TMmc::BPB_RsvdSecCnt
          TMmc::BPB_RootEntCnt
          TMmc::BPB_FATSz16
          TMmc::FirstDataSector
          TMmc::c_counter
          TMmc::BS_jmpBoot
          TMmc::BPB_TotSec
          TMmc::BS_VolSerial
          TMmc::_FF_PART_ADDR
          TMmc::_FF_ROOT_ADDR
          TMmc::_FF_DIR_ADDR
          TMmc::_FF_FAT1_ADDR
          TMmc::_FF_FAT2_ADDR
          TMmc::_FF_RootDirSectors
          TMmc::_FF_buff_addr
          TMmc::clus_0_addr
          TMmc::_FF_n_temp
          TMmc::DataClusTot
       4  TMmc::Change(BYTE)
       4  TMmc::FirstSectorofCluster
      30  TMmc::MMCInit()
      16  TMmc::MMCPresence()
       1  TMmc::MMCResponse
       4  TMmc::OCR_REG
       4  TMmc::SD_CS_OFF()
       4  TMmc::SD_CS_ON()
       4  TMmc::SD_Select()
       4  TMmc::SD_Unselect()
     512  TMmc::_FF_buff
     126  TMmc::_FF_read(DWORD)
     124  TMmc::_FF_read_disp(DWORD)
       2  TMmc::_FF_spi(BYTE)
     170  TMmc::_FF_write(DWORD)
      20  TMmc::clear_sd_buff()
      68  TMmc::init_sd()
     472  TMmc::initialize_media()
      78  TMmc::reset_sd()
     244  TMmc::send_cmd(BYTE, DWORD)
     208  sd_cmd

 
   604 bytes in section .bss
     1 byte  in section .data
     8 bytes in section .rodata
 1 598 bytes in section .text
 
 1 598 bytes of CODE  memory
     8 bytes of CONST memory
   605 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        09/Oct/2018  16:32:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rng.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rng.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\stm32f4xx_rng.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\stm32f4xx_rng.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rng.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_rng.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief This file provides firmware functions to manage the following 
      8            *          functionalities of the Random Number Generator (RNG) peripheral:           
      9            *           + Initialization and Configuration 
     10            *           + Get 32 bit Random number      
     11            *           + Interrupts and flags management       
     12            *         
     13          @verbatim
     14                                           
     15           ===================================================================      
     16                           ##### How to use this driver #####
     17           ===================================================================          
     18           [..]
     19             (#) Enable The RNG controller clock using 
     20                 RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
     21                          
     22             (#) Activate the RNG peripheral using RNG_Cmd() function.
     23                      
     24             (#) Wait until the 32 bit Random number Generator contains a valid  random data
     25                (using polling/interrupt mode). For more details, refer to "Interrupts and 
     26                flags management functions" module description.
     27                       
     28             (#) Get the 32 bit Random number using RNG_GetRandomNumber() function
     29                      
     30             (#) To get another 32 bit Random number, go to step 3.       
     31                   
     32                          
     33          @endverbatim
     34            *         
     35            ******************************************************************************
     36            * @attention
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     39            *
     40            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     41            * You may not use this file except in compliance with the License.
     42            * You may obtain a copy of the License at:
     43            *
     44            *        http://www.st.com/software_license_agreement_liberty_v2
     45            *
     46            * Unless required by applicable law or agreed to in writing, software 
     47            * distributed under the License is distributed on an "AS IS" BASIS, 
     48            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     49            * See the License for the specific language governing permissions and
     50            * limitations under the License.
     51            *
     52            ******************************************************************************  
     53            */
     54          
     55          /* Includes ------------------------------------------------------------------*/
     56          #include "stm32f4xx_rng.h"
     57          #include "stm32f4xx_rcc.h"
     58          
     59          /** @addtogroup STM32F4xx_StdPeriph_Driver
     60            * @{
     61            */
     62          
     63          /** @defgroup RNG 
     64            * @brief RNG driver modules
     65            * @{
     66            */ 
     67          
     68          /* Private typedef -----------------------------------------------------------*/
     69          /* Private define ------------------------------------------------------------*/
     70          /* Private macro -------------------------------------------------------------*/
     71          /* Private variables ---------------------------------------------------------*/
     72          /* Private function prototypes -----------------------------------------------*/
     73          /* Private functions ---------------------------------------------------------*/
     74          
     75          /** @defgroup RNG_Private_Functions
     76            * @{
     77            */ 
     78          
     79          /** @defgroup RNG_Group1 Initialization and Configuration functions
     80           *  @brief    Initialization and Configuration functions 
     81           *
     82          @verbatim    
     83           ===============================================================================
     84                       ##### Initialization and Configuration functions #####
     85           ===============================================================================  
     86           [..] This section provides functions allowing to 
     87             (+) Initialize the RNG peripheral
     88             (+) Enable or disable the RNG peripheral
     89             
     90          @endverbatim
     91            * @{
     92            */
     93          
     94          /**
     95            * @brief  De-initializes the RNG peripheral registers to their default reset values.
     96            * @param  None
     97            * @retval None
     98            */

   \                                 In section .text, align 2, keep-with-next
     99          void RNG_DeInit(void)
    100          {
   \                     RNG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    101            /* Enable RNG reset state */
    102            RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2040             MOVS     R0,#+64
   \   00000006   0x.... 0x....      BL       RCC_AHB2PeriphResetCmd
    103          
    104            /* Release RNG from reset state */
    105            RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2040             MOVS     R0,#+64
   \   0000000E   0xE8BD 0x4004      POP      {R2,LR}
   \   00000012   0x.... 0x....      B.W      RCC_AHB2PeriphResetCmd
    106          }
    107          
    108          /**
    109            * @brief  Enables or disables the RNG peripheral.
    110            * @param  NewState: new state of the RNG peripheral.
    111            *          This parameter can be: ENABLE or DISABLE.
    112            * @retval None
    113            */

   \                                 In section .text, align 2, keep-with-next
    114          void RNG_Cmd(FunctionalState NewState)
    115          {
   \                     RNG_Cmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    116            /* Check the parameters */
    117            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xD006             BEQ.N    ??RNG_Cmd_0
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD004             BEQ.N    ??RNG_Cmd_0
   \   0000000A   0x2175             MOVS     R1,#+117
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       assert_failed
    118          
    119            if (NewState != DISABLE)
   \                     ??RNG_Cmd_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable7  ;; 0x50060800
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0xD003             BEQ.N    ??RNG_Cmd_1
    120            {
    121              /* Enable the RNG */
    122              RNG->CR |= RNG_CR_RNGEN;
   \   0000001C   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000020   0x6001             STR      R1,[R0, #+0]
   \   00000022   0xBD10             POP      {R4,PC}
    123            }
    124            else
    125            {
    126              /* Disable the RNG */
    127              RNG->CR &= ~RNG_CR_RNGEN;
   \                     ??RNG_Cmd_1: (+1)
   \   00000024   0xF021 0x0104      BIC      R1,R1,#0x4
   \   00000028   0x6001             STR      R1,[R0, #+0]
    128            }
    129          }
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    130          /**
    131            * @}
    132            */
    133          
    134          /** @defgroup RNG_Group2 Get 32 bit Random number function
    135           *  @brief    Get 32 bit Random number function 
    136           *
    137          
    138          @verbatim    
    139           ===============================================================================
    140                           ##### Get 32 bit Random number function #####
    141           ===============================================================================  
    142           [..] This section provides a function allowing to get the 32 bit Random number  
    143            
    144             (@)  Before to call this function you have to wait till DRDY flag is set,
    145                  using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
    146             
    147          @endverbatim
    148            * @{
    149            */
    150          
    151          
    152          /**
    153            * @brief  Returns a 32-bit random number.
    154            *   
    155            * @note   Before to call this function you have to wait till DRDY (data ready)
    156            *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
    157            * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
    158            *         function), the RNG_FLAG_DRDY flag is automatically cleared.
    159            * @note   In the case of a seed error, the generation of random numbers is 
    160            *         interrupted for as long as the SECS bit is '1'. If a number is 
    161            *         available in the RNG_DR register, it must not be used because it may 
    162            *         not have enough entropy. In this case, it is recommended to clear the 
    163            *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
    164            *         and enable the RNG peripheral (using RNG_Cmd() function) to 
    165            *         reinitialize and restart the RNG.
    166            * @note   In the case of a clock error, the RNG is no more able to generate 
    167            *         random numbers because the PLL48CLK clock is not correct. User have 
    168            *         to check that the clock controller is correctly configured to provide
    169            *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
    170            *         function) . The clock error has no impact on the previously generated 
    171            *         random numbers, and the RNG_DR register contents can be used.
    172            *         
    173            * @param  None
    174            * @retval 32-bit random number.
    175            */

   \                                 In section .text, align 2, keep-with-next
    176          uint32_t RNG_GetRandomNumber(void)
    177          {
    178            /* Return the 32 bit random number from the DR register */
    179            return RNG->DR;
   \                     RNG_GetRandomNumber: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_1  ;; 0x50060808
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    180          }
    181          
    182          
    183          /**
    184            * @}
    185            */
    186          
    187          /** @defgroup RNG_Group3 Interrupts and flags management functions
    188           *  @brief   Interrupts and flags management functions
    189           *
    190          @verbatim   
    191           ===============================================================================
    192                       ##### Interrupts and flags management functions #####
    193           ===============================================================================  
    194          
    195           [..] This section provides functions allowing to configure the RNG Interrupts and 
    196                to get the status and clear flags and Interrupts pending bits.
    197            
    198           [..] The RNG provides 3 Interrupts sources and 3 Flags:
    199            
    200           *** Flags : ***
    201           ===============
    202           [..] 
    203              (#) RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
    204                  random data. it is cleared by reading the valid data(using 
    205                  RNG_GetRandomNumber() function).
    206          
    207              (#) RNG_FLAG_CECS : In the case of a seed error detection. 
    208                
    209              (#) RNG_FLAG_SECS : In the case of a clock error detection.
    210                        
    211           *** Interrupts ***
    212           ==================
    213           [..] If enabled, an RNG interrupt is pending :
    214              
    215             (#) In the case of the RNG_DR register contains valid random data. 
    216                 This interrupt source is cleared once the RNG_DR register has been read 
    217                 (using RNG_GetRandomNumber() function) until a new valid value is 
    218                 computed; or 
    219             (#) In the case of a seed error : One of the following faulty sequences has 
    220                 been detected:
    221                 (++) More than 64 consecutive bits at the same value (0 or 1)
    222                 (++) More than 32 consecutive alternance of 0 and 1 (0101010101...01)
    223                 This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
    224                 function; or
    225             (#) In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
    226                 was not correctly detected (fPLL48CLK< fHCLK/16). This interrupt source is
    227                 cleared using RNG_ClearITPendingBit(RNG_IT_CEI) function.
    228                 -@- note In this case, User have to check that the clock controller is 
    229                     correctly configured to provide the RNG clock. 
    230          
    231           *** Managing the RNG controller events : ***
    232           ============================================
    233           [..] The user should identify which mode will be used in his application to manage 
    234                the RNG controller events: Polling mode or Interrupt mode.
    235            
    236             (#) In the Polling Mode it is advised to use the following functions:
    237                 (++) RNG_GetFlagStatus() : to check if flags events occur. 
    238                 (++) RNG_ClearFlag()     : to clear the flags events.
    239            
    240                 -@@- RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
    241                      by reading the Random number data.      
    242            
    243             (#)  In the Interrupt Mode it is advised to use the following functions:
    244                  (++) RNG_ITConfig()       : to enable or disable the interrupt source.
    245                  (++) RNG_GetITStatus()    : to check if Interrupt occurs.
    246                  (++) RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
    247                       (corresponding Flag). 
    248            
    249          @endverbatim
    250            * @{
    251            */ 
    252          
    253          /**
    254            * @brief  Enables or disables the RNG interrupt.
    255            * @note   The RNG provides 3 interrupt sources,
    256            *           - Computed data is ready event (DRDY), and           
    257            *           - Seed error Interrupt (SEI) and 
    258            *           - Clock error Interrupt (CEI), 
    259            *         all these interrupts sources are enabled by setting the IE bit in 
    260            *         CR register. However, each interrupt have its specific status bit
    261            *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
    262            *         (see RNG_ClearITPendingBit() function).
    263            * @param  NewState: new state of the RNG interrupt.
    264            *          This parameter can be: ENABLE or DISABLE.
    265            * @retval None
    266            */

   \                                 In section .text, align 2, keep-with-next
    267          void RNG_ITConfig(FunctionalState NewState)
    268          {
   \                     RNG_ITConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    269            /* Check the parameters */
    270            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xD007             BEQ.N    ??RNG_ITConfig_0
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD005             BEQ.N    ??RNG_ITConfig_0
   \   0000000A   0xF44F 0x7187      MOV      R1,#+270
   \   0000000E   0x.... 0x....      ADR.W    R0,?_0
   \   00000012   0x.... 0x....      BL       assert_failed
    271          
    272            if (NewState != DISABLE)
   \                     ??RNG_ITConfig_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable7  ;; 0x50060800
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0xD003             BEQ.N    ??RNG_ITConfig_1
    273            {
    274              /* Enable the RNG interrupt */
    275              RNG->CR |= RNG_CR_IE;
   \   0000001E   0xF041 0x0108      ORR      R1,R1,#0x8
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \   00000024   0xBD10             POP      {R4,PC}
    276            }
    277            else
    278            {
    279              /* Disable the RNG interrupt */
    280              RNG->CR &= ~RNG_CR_IE;
   \                     ??RNG_ITConfig_1: (+1)
   \   00000026   0xF021 0x0108      BIC      R1,R1,#0x8
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    281            }
    282          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    283          
    284          /**
    285            * @brief  Checks whether the specified RNG flag is set or not.
    286            * @param  RNG_FLAG: specifies the RNG flag to check.
    287            *          This parameter can be one of the following values:
    288            *            @arg RNG_FLAG_DRDY: Data Ready flag.
    289            *            @arg RNG_FLAG_CECS: Clock Error Current flag.
    290            *            @arg RNG_FLAG_SECS: Seed Error Current flag.
    291            * @retval The new state of RNG_FLAG (SET or RESET).
    292            */

   \                                 In section .text, align 2, keep-with-next
    293          FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
    294          {
   \                     RNG_GetFlagStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    295            FlagStatus bitstatus = RESET;
   \   00000004   0x2500             MOVS     R5,#+0
    296            /* Check the parameters */
    297            assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD009             BEQ.N    ??RNG_GetFlagStatus_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD007             BEQ.N    ??RNG_GetFlagStatus_0
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD005             BEQ.N    ??RNG_GetFlagStatus_0
   \   00000012   0xF240 0x1129      MOVW     R1,#+297
   \   00000016   0x.... 0x....      ADR.W    R0,?_0
   \   0000001A   0x.... 0x....      BL       assert_failed
    298          
    299            /* Check the status of the specified RNG flag */
    300            if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
   \                     ??RNG_GetFlagStatus_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x50060804
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x4220             TST      R0,R4
   \   00000024   0xD000             BEQ.N    ??RNG_GetFlagStatus_1
    301            {
    302              /* RNG_FLAG is set */
    303              bitstatus = SET;
   \   00000026   0x2501             MOVS     R5,#+1
    304            }
    305            else
    306            {
    307              /* RNG_FLAG is reset */
    308              bitstatus = RESET;
    309            }
    310            /* Return the RNG_FLAG status */
    311            return  bitstatus;
   \                     ??RNG_GetFlagStatus_1: (+1)
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    312          }
    313          
    314          
    315          /**
    316            * @brief  Clears the RNG flags.
    317            * @param  RNG_FLAG: specifies the flag to clear. 
    318            *          This parameter can be any combination of the following values:
    319            *            @arg RNG_FLAG_CECS: Clock Error Current flag.
    320            *            @arg RNG_FLAG_SECS: Seed Error Current flag.
    321            * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
    322            *         This flag is cleared only by reading the Random number data (using 
    323            *         RNG_GetRandomNumber() function).                           
    324            * @retval None
    325            */

   \                                 In section .text, align 2, keep-with-next
    326          void RNG_ClearFlag(uint8_t RNG_FLAG)
    327          {
   \                     RNG_ClearFlag: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    328            /* Check the parameters */
    329            assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
   \   00000004   0x2802             CMP      R0,#+2
   \   00000006   0xD007             BEQ.N    ??RNG_ClearFlag_0
   \   00000008   0x2804             CMP      R0,#+4
   \   0000000A   0xD005             BEQ.N    ??RNG_ClearFlag_0
   \   0000000C   0xF240 0x1149      MOVW     R1,#+329
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    330            /* Clear the selected RNG flags */
    331            RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
   \                     ??RNG_ClearFlag_0: (+1)
   \   00000018   0xEA6F 0x1004      MVN      R0,R4, LSL #+4
   \   0000001C   0x....             LDR.N    R1,??DataTable7_2  ;; 0x50060804
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    332          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    333          
    334          /**
    335            * @brief  Checks whether the specified RNG interrupt has occurred or not.
    336            * @param  RNG_IT: specifies the RNG interrupt source to check.
    337            *          This parameter can be one of the following values:
    338            *            @arg RNG_IT_CEI: Clock Error Interrupt.
    339            *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
    340            * @retval The new state of RNG_IT (SET or RESET).
    341            */

   \                                 In section .text, align 2, keep-with-next
    342          ITStatus RNG_GetITStatus(uint8_t RNG_IT)
    343          {
   \                     RNG_GetITStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    344            ITStatus bitstatus = RESET;
   \   00000004   0x2500             MOVS     R5,#+0
    345            /* Check the parameters */
    346            assert_param(IS_RNG_GET_IT(RNG_IT));
   \   00000006   0x2820             CMP      R0,#+32
   \   00000008   0xD007             BEQ.N    ??RNG_GetITStatus_0
   \   0000000A   0x2840             CMP      R0,#+64
   \   0000000C   0xD005             BEQ.N    ??RNG_GetITStatus_0
   \   0000000E   0xF44F 0x71AD      MOV      R1,#+346
   \   00000012   0x.... 0x....      ADR.W    R0,?_0
   \   00000016   0x.... 0x....      BL       assert_failed
    347          
    348            /* Check the status of the specified RNG interrupt */
    349            if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
   \                     ??RNG_GetITStatus_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable7_2  ;; 0x50060804
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x4220             TST      R0,R4
   \   00000020   0xD000             BEQ.N    ??RNG_GetITStatus_1
    350            {
    351              /* RNG_IT is set */
    352              bitstatus = SET;
   \   00000022   0x2501             MOVS     R5,#+1
    353            }
    354            else
    355            {
    356              /* RNG_IT is reset */
    357              bitstatus = RESET;
    358            }
    359            /* Return the RNG_IT status */
    360            return bitstatus;
   \                     ??RNG_GetITStatus_1: (+1)
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    361          }
    362          
    363          
    364          /**
    365            * @brief  Clears the RNG interrupt pending bit(s).
    366            * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
    367            *          This parameter can be any combination of the following values:
    368            *            @arg RNG_IT_CEI: Clock Error Interrupt.
    369            *            @arg RNG_IT_SEI: Seed Error Interrupt.
    370            * @retval None
    371            */

   \                                 In section .text, align 2, keep-with-next
    372          void RNG_ClearITPendingBit(uint8_t RNG_IT)
    373          {
   \                     RNG_ClearITPendingBit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    374            /* Check the parameters */
    375            assert_param(IS_RNG_IT(RNG_IT));
   \   00000004   0x209F             MOVS     R0,#+159
   \   00000006   0x4204             TST      R4,R0
   \   00000008   0xD101             BNE.N    ??RNG_ClearITPendingBit_0
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD105             BNE.N    ??RNG_ClearITPendingBit_1
   \                     ??RNG_ClearITPendingBit_0: (+1)
   \   0000000E   0xF240 0x1177      MOVW     R1,#+375
   \   00000012   0x.... 0x....      ADR.W    R0,?_0
   \   00000016   0x.... 0x....      BL       assert_failed
    376          
    377            /* Clear the selected RNG interrupt pending bit */
    378            RNG->SR = (uint8_t)~RNG_IT;
   \                     ??RNG_ClearITPendingBit_1: (+1)
   \   0000001A   0x43E0             MVNS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x50060804
   \   00000020   0x6008             STR      R0,[R1, #+0]
    379          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x50060800         DC32     0x50060800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x50060808         DC32     0x50060808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x50060804         DC32     0x50060804

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 57H, 4FH, 52H, 4BH, 5CH
   \              0x5C 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5C    
   \   00000008   0x46 0x69          DC8 46H, 69H, 72H, 6DH, 77H, 61H, 72H, 65H
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \   00000010   0x5F 0x4C          DC8 5FH, 4CH, 61H, 73H, 74H, 52H, 65H, 6CH
   \              0x61 0x73    
   \              0x74 0x52    
   \              0x65 0x6C    
   \   00000018   0x65 0x61          DC8 65H, 61H, 73H, 65H, 5CH, 5FH, 37H, 2EH
   \              0x73 0x65    
   \              0x5C 0x5F    
   \              0x37 0x2E    
   \   00000020   0x30 0x2E          DC8 30H, 2EH, 39H, 35H, 5CH, 4DH, 61H, 69H
   \              0x39 0x35    
   \              0x5C 0x4D    
   \              0x61 0x69    
   \   00000028   0x6E 0x4D          DC8 6EH, 4DH, 43H, 55H, 5CH, 4CH, 69H, 62H
   \              0x43 0x55    
   \              0x5C 0x4C    
   \              0x69 0x62    
   \   00000030   0x72 0x61          DC8 72H, 61H, 72H, 69H, 65H, 73H, 5CH, 53H
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x5C 0x53    
   \   00000038   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 46H, 34H, 78H, 78H
   \              0x33 0x32    
   \              0x46 0x34    
   \              0x78 0x78    
   \   00000040   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000048   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000050   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 73H, 74H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x73 0x74    
   \   00000058   0x6D 0x33          DC8 6DH, 33H, 32H, 66H, 34H, 78H, 78H, 5FH
   \              0x32 0x66    
   \              0x34 0x78    
   \              0x78 0x5F    
   \   00000060   0x72 0x6E          DC8 72H, 6EH, 67H, 2EH, 63H, 0
   \              0x67 0x2E    
   \              0x63 0x00    
   \   00000066   0x00 0x00          DC8 0, 0
    380          /**
    381            * @}
    382            */ 
    383            
    384          /**
    385            * @}
    386            */ 
    387          
    388          /**
    389            * @}
    390            */ 
    391          
    392          /**
    393            * @}
    394            */ 
    395          
    396          
    397          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   RNG_ClearFlag
         8   -> assert_failed
       8   RNG_ClearITPendingBit
         8   -> assert_failed
       8   RNG_Cmd
         8   -> assert_failed
       8   RNG_DeInit
         0   -> RCC_AHB2PeriphResetCmd
         8   -> RCC_AHB2PeriphResetCmd
      16   RNG_GetFlagStatus
        16   -> assert_failed
      16   RNG_GetITStatus
        16   -> assert_failed
       0   RNG_GetRandomNumber
       8   RNG_ITConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
     104  ?_0
      34  RNG_ClearFlag
      36  RNG_ClearITPendingBit
      44  RNG_Cmd
      22  RNG_DeInit
      44  RNG_GetFlagStatus
      40  RNG_GetITStatus
       6  RNG_GetRandomNumber
      46  RNG_ITConfig

 
 388 bytes in section .text
 
 388 bytes of CODE memory

Errors: none
Warnings: none

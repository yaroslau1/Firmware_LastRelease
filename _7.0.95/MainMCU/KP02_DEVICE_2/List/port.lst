###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        08/Oct/2018  17:04:43
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\port.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\port.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\port.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\port.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\port.c
      1          /*
      2              FreeRTOS V7.1.1 - Copyright (C) 2012 Real Time Engineers Ltd.
      3          	
      4          
      5              ***************************************************************************
      6               *                                                                       *
      7               *    FreeRTOS tutorial books are available in pdf and paperback.        *
      8               *    Complete, revised, and edited pdf reference manuals are also       *
      9               *    available.                                                         *
     10               *                                                                       *
     11               *    Purchasing FreeRTOS documentation will not only help you, by       *
     12               *    ensuring you get running as quickly as possible and with an        *
     13               *    in-depth knowledge of how to use FreeRTOS, it will also help       *
     14               *    the FreeRTOS project to continue with its mission of providing     *
     15               *    professional grade, cross platform, de facto standard solutions    *
     16               *    for microcontrollers - completely free of charge!                  *
     17               *                                                                       *
     18               *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
     19               *                                                                       *
     20               *    Thank you for using FreeRTOS, and thank you for your support!      *
     21               *                                                                       *
     22              ***************************************************************************
     23          
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              >>>NOTE<<< The modification to the GPL is included to allow you to
     31              distribute a combined work that includes FreeRTOS without being obliged to
     32              provide the source code for proprietary components outside of the FreeRTOS
     33              kernel.  FreeRTOS is distributed in the hope that it will be useful, but
     34              WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     35              or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43              
     44              ***************************************************************************
     45               *                                                                       *
     46               *    Having a problem?  Start by reading the FAQ "My application does   *
     47               *    not run, what could be wrong?                                      *
     48               *                                                                       *
     49               *    http://www.FreeRTOS.org/FAQHelp.html                               *
     50               *                                                                       *
     51              ***************************************************************************
     52          
     53              
     54              http://www.FreeRTOS.org - Documentation, training, latest information, 
     55              license and contact details.
     56              
     57              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     58              including FreeRTOS+Trace - an indispensable productivity tool.
     59          
     60              Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
     61              the code with commercial support, indemnification, and middleware, under 
     62              the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
     63              provide a safety engineered and independently SIL3 certified version under 
     64              the SafeRTOS brand: http://www.SafeRTOS.com.
     65          */
     66          
     67          /*-----------------------------------------------------------
     68           * Implementation of functions defined in portable.h for the ARM CM4F port.
     69           *----------------------------------------------------------*/
     70          
     71          /* Scheduler includes. */
     72          #include "FreeRTOS.h"
     73          #include "task.h"
     74          #include "port.h"
     75          
     76          #ifndef __ARMVFP__
     77          	#error This port can only be used when the project options are configured to enable hardware floating point support.
     78          #endif
     79          
     80          /* Constants required to manipulate the NVIC. */
     81          #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long * ) 0xe000e010 )
     82          #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long * ) 0xe000e014 )
     83          #define portNVIC_INT_CTRL			( ( volatile unsigned long * ) 0xe000ed04 )
     84          #define portNVIC_SYSPRI2			( ( volatile unsigned long * ) 0xe000ed20 )
     85          #define portNVIC_SYSTICK_CLK		0x00000004
     86          #define portNVIC_SYSTICK_INT		0x00000002
     87          #define portNVIC_SYSTICK_ENABLE		0x00000001
     88          #define portNVIC_PENDSVSET			0x10000000
     89          #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
     90          #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
     91          
     92          /* Constants required to manipulate the VFP. */
     93          #define portFPCCR					( ( volatile unsigned long * ) 0xe000ef34 ) /* Floating point context control register. */
     94          #define portASPEN_AND_LSPEN_BITS	( 0x3UL << 30UL )
     95          
     96          /* Constants required to set up the initial stack. */
     97          #define portINITIAL_XPSR			( 0x01000000 )
     98          #define portINITIAL_EXEC_RETURN		( 0xfffffffd )
     99          
    100          //------------------------------------------------------------------------------------
    101          extern unsigned long CpuClock;
    102          extern unsigned long TickRate;
    103          //------------------------------------------------------------------------------------
    104          /* Each task maintains its own interrupt status in the critical nesting
    105          variable. */

   \                                 In section .data, align 4
    106          static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
   \                     uxCriticalNesting:
   \   00000000   0xAAAAAAAA         DC32 2863311530
    107          
    108          /*
    109           * Setup the timer to generate the tick interrupts.
    110           */
    111          static void prvSetupTimerInterrupt( void );
    112          
    113          /*
    114           * Exception handlers.
    115           */
    116          void xPortSysTickHandler( void );
    117          
    118          /*
    119           * Start first task is a separate function so it can be tested in isolation.
    120           */
    121          extern void vPortStartFirstTask( void );
    122          
    123          /*
    124           * Functions defined in portasm.s to enable the VFP.
    125           */
    126          extern void vPortEnableVFP( void );
    127          
    128          /*-----------------------------------------------------------*/
    129          
    130          /*
    131           * See header file for description.
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
    134          {
   \                     pxPortInitialiseStack: (+1)
   \   00000000   0xB410             PUSH     {R4}
    135          	/* Simulate the stack frame as it would be created by a context switch
    136          	interrupt. */
    137          	
    138          	/* Offset added to account for the way the MCU uses the stack on entry/exit
    139          	of interrupts, and to ensure alignment. */
    140          	pxTopOfStack--;
    141          		
    142          	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   \   00000002   0xF1A0 0x0320      SUB      R3,R0,#+32
   \   00000006   0xF04F 0x7480      MOV      R4,#+16777216
   \   0000000A   0x61DC             STR      R4,[R3, #+28]
    143          	pxTopOfStack--;
    144          	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   \   0000000C   0x6199             STR      R1,[R3, #+24]
    145          	pxTopOfStack--;
    146          	*pxTopOfStack = 0;	/* LR */
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6159             STR      R1,[R3, #+20]
    147          	
    148          	/* Save code space by skipping register initialisation. */
    149          	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    150          	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   \   00000012   0x601A             STR      R2,[R3, #+0]
    151          
    152          	/* A save method is being used that requires each task to maintain its
    153          	own exec return value. */
    154          	pxTopOfStack--;
    155          	*pxTopOfStack = portINITIAL_EXEC_RETURN;
   \   00000014   0xF06F 0x0102      MVN      R1,#+2
   \   00000018   0xF840 0x1D24      STR      R1,[R0, #-36]!
    156          
    157          	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    158          	
    159          	return pxTopOfStack;
   \   0000001C   0x3820             SUBS     R0,R0,#+32
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0x4770             BX       LR               ;; return
    160          }
    161          /*-----------------------------------------------------------*/
    162          
    163          /*
    164           * See header file for description.
    165           */

   \                                 In section .text, align 2, keep-with-next
    166          portBASE_TYPE xPortStartScheduler( void )
    167          {
   \                     xPortStartScheduler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    168          	/* Make PendSV and SysTick the lowest priority interrupts. */
    169          	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   \   00000002   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed20
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF441 0x017F      ORR      R1,R1,#0xFF0000
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    170          	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF041 0x417F      ORR      R1,R1,#0xFF000000
   \   00000012   0x6001             STR      R1,[R0, #+0]
    171          
    172          	/* Start the timer that generates the tick ISR.  Interrupts are disabled
    173          	here already. */
    174          	prvSetupTimerInterrupt();
   \   00000014   0x.... 0x....      BL       _Z22prvSetupTimerInterruptv
    175          	
    176          	/* Initialise the critical nesting count ready for the first task. */
    177          	uxCriticalNesting = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable5_1
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    178          
    179          	/* Ensure the VFP is enabled - it should be anyway. */
    180          	vPortEnableVFP();
   \   0000001E   0x.... 0x....      BL       vPortEnableVFP
    181          	
    182          	/* Lazy save always. */
    183          	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   \   00000022   0x....             LDR.N    R0,??DataTable5_2  ;; 0xe000ef34
   \   00000024   0x6801             LDR      R1,[R0, #+0]
   \   00000026   0xF041 0x4140      ORR      R1,R1,#0xC0000000
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    184          	
    185          	/* Start the first task. */
    186          	vPortStartFirstTask();
   \   0000002C   0x.... 0x....      BL       vPortStartFirstTask
    187          
    188          	/* Should not get here! */
    189          	return 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD02             POP      {R1,PC}          ;; return
    190          }
    191          /*-----------------------------------------------------------*/
    192          

   \                                 In section .text, align 2, keep-with-next
    193          void vPortEndScheduler( void )
    194          {
    195          	/* It is unlikely that the CM4F port will require this function as there
    196          	is nothing to return to.  */
    197          }
   \                     vPortEndScheduler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    198          /*-----------------------------------------------------------*/
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void vPortYieldFromISR( void )
    201          {
    202          	/* Set a PendSV to request a context switch. */
    203          	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   \                     vPortYieldFromISR: (+1)
   \   00000000   0xF04F 0x5080      MOV      R0,#+268435456
   \   00000004   0x....             LDR.N    R1,??DataTable5_3  ;; 0xe000ed04
   \   00000006   0x6008             STR      R0,[R1, #+0]
    204          }
   \   00000008   0x4770             BX       LR               ;; return
    205          /*-----------------------------------------------------------*/
    206          

   \                                 In section .text, align 2, keep-with-next
    207          void vPortEnterCritical( void )
    208          {
   \                     vPortEnterCritical: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    209          	portDISABLE_INTERRUPTS();
   \   00000002   0x.... 0x....      BL       vPortSetInterruptMask
    210          	uxCriticalNesting++;
   \   00000006   0x....             LDR.N    R0,??DataTable5_1
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    211          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    212          /*-----------------------------------------------------------*/
    213          

   \                                 In section .text, align 2, keep-with-next
    214          void vPortExitCritical( void )
    215          {
    216          	uxCriticalNesting--;
   \                     vPortExitCritical: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_1
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x1E49             SUBS     R1,R1,#+1
   \   00000006   0x6001             STR      R1,[R0, #+0]
    217          	if( uxCriticalNesting == 0 )
   \   00000008   0xD101             BNE.N    ??vPortExitCritical_0
    218          	{
    219          		portENABLE_INTERRUPTS();
   \   0000000A   0x.... 0x....      B.W      vPortClearInterruptMask
    220          	}
    221          }
   \                     ??vPortExitCritical_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    222          /*-----------------------------------------------------------*/
    223          
    224          #pragma diag_suppress=Pe550

   \                                 In section .text, align 2, keep-with-next
    225          void xPortSysTickHandler( void )
    226          {
   \                     xPortSysTickHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    227          unsigned long ulDummy;
    228          
    229          	/* If using preemption, also force a context switch. */
    230          	#if configUSE_PREEMPTION == 1
    231          		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;	
   \   00000002   0xF04F 0x5080      MOV      R0,#+268435456
   \   00000006   0x....             LDR.N    R1,??DataTable5_3  ;; 0xe000ed04
   \   00000008   0x6008             STR      R0,[R1, #+0]
    232          	#endif
    233          
    234          	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
   \   0000000A   0x.... 0x....      BL       vPortSetInterruptMask
    235          	{
    236          		vTaskIncrementTick();
   \   0000000E   0x.... 0x....      BL       vTaskIncrementTick
    237          	}
    238          	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
   \   00000012   0xE8BD 0x4001      POP      {R0,LR}
   \   00000016   0x.... 0x....      B.W      vPortClearInterruptMask
    239          }
    240          /*-----------------------------------------------------------*/
    241          
    242          /*
    243           * Setup the systick timer to generate the tick interrupts at the required
    244           * frequency.
    245           */

   \                                 In section .text, align 2, keep-with-next
    246          void prvSetupTimerInterrupt( void )
    247          {
    248          	/* Configure SysTick to interrupt at the requested rate. */
    249          	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   \                     _Z22prvSetupTimerInterruptv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4  ;; 0xe000e010
   \   00000002   0xF649 0x31FF      MOVW     R1,#+39935
   \   00000006   0x6041             STR      R1,[R0, #+4]
    250          	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   \   00000008   0x2107             MOVS     R1,#+7
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    251          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000ED20         DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     uxCriticalNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000EF34         DC32     0xe000ef34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E010         DC32     0xe000e010
    252          /*-----------------------------------------------------------*/
    253          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   prvSetupTimerInterrupt()
       4   pxPortInitialiseStack
       0   vPortEndScheduler
       8   vPortEnterCritical
         8   -> vPortSetInterruptMask
       0   vPortExitCritical
       0   vPortYieldFromISR
       8   xPortStartScheduler
         8   -> prvSetupTimerInterrupt()
         8   -> vPortEnableVFP
         8   -> vPortStartFirstTask
       8   xPortSysTickHandler
         0   -> vPortClearInterruptMask
         8   -> vPortSetInterruptMask
         8   -> vTaskIncrementTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
      14  prvSetupTimerInterrupt()
      34  pxPortInitialiseStack
       4  uxCriticalNesting
       2  vPortEndScheduler
      16  vPortEnterCritical
      16  vPortExitCritical
      10  vPortYieldFromISR
      52  xPortStartScheduler
      26  xPortSysTickHandler

 
   4 bytes in section .data
 190 bytes in section .text
 
 190 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

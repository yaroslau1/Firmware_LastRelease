###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        08/Oct/2018  09:58:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\stm32f4xx_wwdg.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\stm32f4xx_wwdg.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Window watchdog (WWDG) peripheral:           
      9            *           + Prescaler, Refresh window and Counter configuration
     10            *           + WWDG activation
     11            *           + Interrupts and flags management
     12            *             
     13           @verbatim    
     14           ===============================================================================
     15                                     ##### WWDG features #####
     16           ===============================================================================
     17              [..]                                      
     18                  Once enabled the WWDG generates a system reset on expiry of a programmed
     19                  time period, unless the program refreshes the counter (downcounter) 
     20                  before to reach 0x3F value (i.e. a reset is generated when the counter
     21                  value rolls over from 0x40 to 0x3F). 
     22                  An MCU reset is also generated if the counter value is refreshed
     23                  before the counter has reached the refresh window value. This 
     24                  implies that the counter must be refreshed in a limited window.
     25                        
     26                  Once enabled the WWDG cannot be disabled except by a system reset.                          
     27                    
     28                  WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
     29                  reset occurs.
     30                       
     31                  The WWDG counter input clock is derived from the APB clock divided 
     32                  by a programmable prescaler.
     33                          
     34                  WWDG counter clock = PCLK1 / Prescaler
     35                  WWDG timeout = (WWDG counter clock) * (counter value)
     36                                 
     37                  Min-max timeout value @42 MHz(PCLK1): ~97.5 us / ~49.9 ms
     38                                       
     39                                ##### How to use this driver #####
     40           ===============================================================================
     41              [..]
     42                (#) Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
     43                        
     44                (#) Configure the WWDG prescaler using WWDG_SetPrescaler() function
     45                                       
     46                (#) Configure the WWDG refresh window using WWDG_SetWindowValue() function
     47                        
     48                (#) Set the WWDG counter value and start it using WWDG_Enable() function.
     49                    When the WWDG is enabled the counter value should be configured to 
     50                    a value greater than 0x40 to prevent generating an immediate reset.     
     51                        
     52                (#) Optionally you can enable the Early wakeup interrupt which is 
     53                    generated when the counter reach 0x40.
     54                    Once enabled this interrupt cannot be disabled except by a system reset.
     55                            
     56                (#) Then the application program must refresh the WWDG counter at regular
     57                    intervals during normal operation to prevent an MCU reset, using
     58                    WWDG_SetCounter() function. This operation must occur only when
     59                    the counter value is lower than the refresh window value, 
     60                    programmed using WWDG_SetWindowValue().         
     61            
     62              @endverbatim                               
     63            ******************************************************************************
     64            * @attention
     65            *
     66            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     67            *
     68            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     69            * You may not use this file except in compliance with the License.
     70            * You may obtain a copy of the License at:
     71            *
     72            *        http://www.st.com/software_license_agreement_liberty_v2
     73            *
     74            * Unless required by applicable law or agreed to in writing, software 
     75            * distributed under the License is distributed on an "AS IS" BASIS, 
     76            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     77            * See the License for the specific language governing permissions and
     78            * limitations under the License.
     79            *
     80            ******************************************************************************
     81            */
     82          
     83          /* Includes ------------------------------------------------------------------*/
     84          #include "stm32f4xx_wwdg.h"
     85          #include "stm32f4xx_rcc.h"
     86          
     87          /** @addtogroup STM32F4xx_StdPeriph_Driver
     88            * @{
     89            */
     90          
     91          /** @defgroup WWDG 
     92            * @brief WWDG driver modules
     93            * @{
     94            */
     95          
     96          /* Private typedef -----------------------------------------------------------*/
     97          /* Private define ------------------------------------------------------------*/
     98          
     99          /* ----------- WWDG registers bit address in the alias region ----------- */
    100          #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
    101          /* Alias word address of EWI bit */
    102          #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
    103          #define EWI_BitNumber     0x09
    104          #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
    105          
    106          /* --------------------- WWDG registers bit mask ------------------------ */
    107          /* CFR register bit mask */
    108          #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
    109          #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
    110          #define BIT_MASK          ((uint8_t)0x7F)
    111          
    112          /* Private macro -------------------------------------------------------------*/
    113          /* Private variables ---------------------------------------------------------*/
    114          /* Private function prototypes -----------------------------------------------*/
    115          /* Private functions ---------------------------------------------------------*/
    116          
    117          /** @defgroup WWDG_Private_Functions
    118            * @{
    119            */
    120          
    121          /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
    122           *  @brief   Prescaler, Refresh window and Counter configuration functions 
    123           *
    124          @verbatim   
    125           ===============================================================================
    126              ##### Prescaler, Refresh window and Counter configuration functions #####
    127           ===============================================================================  
    128          
    129          @endverbatim
    130            * @{
    131            */
    132          
    133          /**
    134            * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
    135            * @param  None
    136            * @retval None
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          void WWDG_DeInit(void)
    139          {
   \                     WWDG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    140            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    141            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000012   0xE8BD 0x4004      POP      {R2,LR}
   \   00000016   0x.... 0x....      B.W      RCC_APB1PeriphResetCmd
    142          }
    143          
    144          /**
    145            * @brief  Sets the WWDG Prescaler.
    146            * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
    147            *   This parameter can be one of the following values:
    148            *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
    149            *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
    150            *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
    151            *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
    152            * @retval None
    153            */

   \                                 In section .text, align 2, keep-with-next
    154          void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
    155          {
   \                     WWDG_SetPrescaler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    156            uint32_t tmpreg = 0;
    157            /* Check the parameters */
    158            assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
   \   00000004   0xD00C             BEQ.N    ??WWDG_SetPrescaler_0
   \   00000006   0x2C80             CMP      R4,#+128
   \   00000008   0xD00A             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000000A   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000000E   0xD007             BEQ.N    ??WWDG_SetPrescaler_0
   \   00000010   0xF5B4 0x7FC0      CMP      R4,#+384
   \   00000014   0xD004             BEQ.N    ??WWDG_SetPrescaler_0
   \   00000016   0x219E             MOVS     R1,#+158
   \   00000018   0x.... 0x....      ADR.W    R0,?_0
   \   0000001C   0x.... 0x....      BL       assert_failed
    159            /* Clear WDGTB[1:0] bits */
    160            tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
   \                     ??WWDG_SetPrescaler_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable7  ;; 0x40002c04
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0xF421 0x71C0      BIC      R1,R1,#0x180
    161            /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
    162            tmpreg |= WWDG_Prescaler;
    163            /* Store the new value */
    164            WWDG->CFR = tmpreg;
   \   00000028   0x4321             ORRS     R1,R4,R1
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    165          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    166          
    167          /**
    168            * @brief  Sets the WWDG window value.
    169            * @param  WindowValue: specifies the window value to be compared to the downcounter.
    170            *   This parameter value must be lower than 0x80.
    171            * @retval None
    172            */

   \                                 In section .text, align 2, keep-with-next
    173          void WWDG_SetWindowValue(uint8_t WindowValue)
    174          {
   \                     WWDG_SetWindowValue: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
    175            __IO uint32_t tmpreg = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    176          
    177            /* Check the parameters */
    178            assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
   \   0000000A   0x2C80             CMP      R4,#+128
   \   0000000C   0xDB04             BLT.N    ??WWDG_SetWindowValue_0
   \   0000000E   0x21B2             MOVS     R1,#+178
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    179            /* Clear W[6:0] bits */
    180          
    181            tmpreg = WWDG->CFR & CFR_W_MASK;
   \                     ??WWDG_SetWindowValue_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable7  ;; 0x40002c04
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0x09C9             LSRS     R1,R1,#+7
   \   0000001E   0x01C9             LSLS     R1,R1,#+7
   \   00000020   0x9100             STR      R1,[SP, #+0]
    182          
    183            /* Set W[6:0] bits according to WindowValue value */
    184            tmpreg |= WindowValue & (uint32_t) BIT_MASK;
   \   00000022   0x9900             LDR      R1,[SP, #+0]
   \   00000024   0xF004 0x027F      AND      R2,R4,#0x7F
   \   00000028   0x4311             ORRS     R1,R2,R1
   \   0000002A   0x9100             STR      R1,[SP, #+0]
    185          
    186            /* Store the new value */
    187            WWDG->CFR = tmpreg;
   \   0000002C   0x9900             LDR      R1,[SP, #+0]
   \   0000002E   0x6001             STR      R1,[R0, #+0]
    188          }
   \   00000030   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    189          
    190          /**
    191            * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
    192            * @note   Once enabled this interrupt cannot be disabled except by a system reset.
    193            * @param  None
    194            * @retval None
    195            */

   \                                 In section .text, align 2, keep-with-next
    196          void WWDG_EnableIT(void)
    197          {
    198            *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
   \                     WWDG_EnableIT: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable7_1  ;; 0x420580a4
   \   00000004   0x6008             STR      R0,[R1, #+0]
    199          }
   \   00000006   0x4770             BX       LR               ;; return
    200          
    201          /**
    202            * @brief  Sets the WWDG counter value.
    203            * @param  Counter: specifies the watchdog counter value.
    204            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    205            *   an immediate reset) 
    206            * @retval None
    207            */

   \                                 In section .text, align 2, keep-with-next
    208          void WWDG_SetCounter(uint8_t Counter)
    209          {
   \                     WWDG_SetCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    210            /* Check the parameters */
    211            assert_param(IS_WWDG_COUNTER(Counter));
   \   00000004   0xF1A4 0x0040      SUB      R0,R4,#+64
   \   00000008   0x2840             CMP      R0,#+64
   \   0000000A   0xD304             BCC.N    ??WWDG_SetCounter_0
   \   0000000C   0x21D3             MOVS     R1,#+211
   \   0000000E   0x.... 0x....      ADR.W    R0,?_0
   \   00000012   0x.... 0x....      BL       assert_failed
    212            /* Write to T[6:0] bits to configure the counter value, no need to do
    213               a read-modify-write; writing a 0 to WDGA bit does nothing */
    214            WWDG->CR = Counter & BIT_MASK;
   \                     ??WWDG_SetCounter_0: (+1)
   \   00000016   0xF004 0x007F      AND      R0,R4,#0x7F
   \   0000001A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40002c00
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    215          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    216          /**
    217            * @}
    218            */
    219          
    220          /** @defgroup WWDG_Group2 WWDG activation functions
    221           *  @brief   WWDG activation functions 
    222           *
    223          @verbatim   
    224           ===============================================================================
    225                              ##### WWDG activation function #####
    226           ===============================================================================  
    227          
    228          @endverbatim
    229            * @{
    230            */
    231          
    232          /**
    233            * @brief  Enables WWDG and load the counter value.                  
    234            * @param  Counter: specifies the watchdog counter value.
    235            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    236            *   an immediate reset)
    237            * @retval None
    238            */

   \                                 In section .text, align 2, keep-with-next
    239          void WWDG_Enable(uint8_t Counter)
    240          {
   \                     WWDG_Enable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    241            /* Check the parameters */
    242            assert_param(IS_WWDG_COUNTER(Counter));
   \   00000004   0xF1A4 0x0040      SUB      R0,R4,#+64
   \   00000008   0x2840             CMP      R0,#+64
   \   0000000A   0xD304             BCC.N    ??WWDG_Enable_0
   \   0000000C   0x21F2             MOVS     R1,#+242
   \   0000000E   0x.... 0x....      ADR.W    R0,?_0
   \   00000012   0x.... 0x....      BL       assert_failed
    243            WWDG->CR = WWDG_CR_WDGA | Counter;
   \                     ??WWDG_Enable_0: (+1)
   \   00000016   0xF044 0x0080      ORR      R0,R4,#0x80
   \   0000001A   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40002c00
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    244          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    245          /**
    246            * @}
    247            */
    248          
    249          /** @defgroup WWDG_Group3 Interrupts and flags management functions
    250           *  @brief   Interrupts and flags management functions 
    251           *
    252          @verbatim   
    253           ===============================================================================
    254                      ##### Interrupts and flags management functions #####
    255           ===============================================================================  
    256          
    257          @endverbatim
    258            * @{
    259            */
    260          
    261          /**
    262            * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
    263            * @param  None
    264            * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
    265            */

   \                                 In section .text, align 2, keep-with-next
    266          FlagStatus WWDG_GetFlagStatus(void)
    267          {
    268            FlagStatus bitstatus = RESET;
   \                     WWDG_GetFlagStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    269              
    270            if ((WWDG->SR) != (uint32_t)RESET)
   \   00000002   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40002c08
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD000             BEQ.N    ??WWDG_GetFlagStatus_0
    271            {
    272              bitstatus = SET;
   \   0000000A   0x2001             MOVS     R0,#+1
    273            }
    274            else
    275            {
    276              bitstatus = RESET;
    277            }
    278            return bitstatus;
   \                     ??WWDG_GetFlagStatus_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    279          }
    280          
    281          /**
    282            * @brief  Clears Early Wakeup interrupt flag.
    283            * @param  None
    284            * @retval None
    285            */

   \                                 In section .text, align 2, keep-with-next
    286          void WWDG_ClearFlag(void)
    287          {
    288            WWDG->SR = (uint32_t)RESET;
   \                     WWDG_ClearFlag: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40002c08
   \   00000004   0x6008             STR      R0,[R1, #+0]
    289          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40002C04         DC32     0x40002c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x420580A4         DC32     0x420580a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40002C00         DC32     0x40002c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40002C08         DC32     0x40002c08

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 57H, 4FH, 52H, 4BH, 5CH
   \              0x5C 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5C    
   \   00000008   0x46 0x69          DC8 46H, 69H, 72H, 6DH, 77H, 61H, 72H, 65H
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \   00000010   0x5F 0x4C          DC8 5FH, 4CH, 61H, 73H, 74H, 52H, 65H, 6CH
   \              0x61 0x73    
   \              0x74 0x52    
   \              0x65 0x6C    
   \   00000018   0x65 0x61          DC8 65H, 61H, 73H, 65H, 5CH, 5FH, 37H, 2EH
   \              0x73 0x65    
   \              0x5C 0x5F    
   \              0x37 0x2E    
   \   00000020   0x30 0x2E          DC8 30H, 2EH, 39H, 35H, 5CH, 4DH, 61H, 69H
   \              0x39 0x35    
   \              0x5C 0x4D    
   \              0x61 0x69    
   \   00000028   0x6E 0x4D          DC8 6EH, 4DH, 43H, 55H, 5CH, 4CH, 69H, 62H
   \              0x43 0x55    
   \              0x5C 0x4C    
   \              0x69 0x62    
   \   00000030   0x72 0x61          DC8 72H, 61H, 72H, 69H, 65H, 73H, 5CH, 53H
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x5C 0x53    
   \   00000038   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 46H, 34H, 78H, 78H
   \              0x33 0x32    
   \              0x46 0x34    
   \              0x78 0x78    
   \   00000040   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000048   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000050   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 73H, 74H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x73 0x74    
   \   00000058   0x6D 0x33          DC8 6DH, 33H, 32H, 66H, 34H, 78H, 78H, 5FH
   \              0x32 0x66    
   \              0x34 0x78    
   \              0x78 0x5F    
   \   00000060   0x77 0x77          DC8 77H, 77H, 64H, 67H, 2EH, 63H, 0
   \              0x64 0x67    
   \              0x2E 0x63    
   \              0x00         
   \   00000067   0x00               DC8 0
    290          
    291          /**
    292            * @}
    293            */
    294          
    295          /**
    296            * @}
    297            */
    298          
    299          /**
    300            * @}
    301            */
    302          
    303          /**
    304            * @}
    305            */
    306          
    307          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WWDG_ClearFlag
       8   WWDG_DeInit
         0   -> RCC_APB1PeriphResetCmd
         8   -> RCC_APB1PeriphResetCmd
       8   WWDG_Enable
         8   -> assert_failed
       0   WWDG_EnableIT
       0   WWDG_GetFlagStatus
       8   WWDG_SetCounter
         8   -> assert_failed
       8   WWDG_SetPrescaler
         8   -> assert_failed
      16   WWDG_SetWindowValue
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
     104  ?_0
       8  WWDG_ClearFlag
      26  WWDG_DeInit
      32  WWDG_Enable
       8  WWDG_EnableIT
      14  WWDG_GetFlagStatus
      32  WWDG_SetCounter
      46  WWDG_SetPrescaler
      50  WWDG_SetWindowValue

 
 336 bytes in section .text
 
 336 bytes of CODE memory

Errors: none
Warnings: none

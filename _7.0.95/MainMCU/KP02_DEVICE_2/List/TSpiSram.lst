###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        09/Oct/2018  16:32:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TSpiSram.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TSpiSram.cpp -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\TSpiSram.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\TSpiSram.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TSpiSram.cpp
      1          /******************************************************************************/
      2          /* @title       SPI SRAM control                                              */
      3          /* @author      Alexey Konev                                                  */
      4          /* @version     0.5                                                           */
      5          /* @date        06.11.2015                                                    */
      6          /******************************************************************************/
      7          /* @brief                                                                     */
      8          /******************************************************************************/
      9          
     10          #include "TSpiSram.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void __delay_cycles(int)
   \                     _Z14__delay_cyclesi: (+1)
   \   00000000   0xB401             PUSH     {R0}
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xE001             B.N      ??__delay_cycles_0
   \                     ??__delay_cycles_1: (+1)
   \   00000006   0xBF00             Nop      
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \                     ??__delay_cycles_0: (+1)
   \   0000000A   0x9900             LDR      R1,[SP, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xDBFA             BLT.N    ??__delay_cycles_1
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0x4770             BX       LR               ;; return
     11          #include "main.h"
     12          
     13          
     14          
     15          
     16          extern uint16_t RegularConvData_Tab[7];
     17          

   \                                 In section .bss, align 1
     18          static uint8_t temp;
   \                     temp:
   \   00000000                      DS8 1
     19          /*----------------------------------------------------------------------------*/
     20          /* @brief       Peripheral initialization                                     */
     21          /* @param       None                                                          */
     22          /* @return      None                                                          */
     23          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     24          void TSPISRAM::PHYInit( void )
     25          {
   \                     _ZN8TSPISRAM7PHYInitEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
     26            // RCC config
     27            SPISRAM_GPIO_RCC_ENABLE;
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     28            SPISRAM_SPI_RCC_ENABLE;
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     29          
     30            GPIO_InitTypeDef GPIO_InitStructure;
     31          
     32            // SPI pins config
     33            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xF88D 0x0005      STRB     R0,[SP, #+5]
     34            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000001C   0xF88D 0x0004      STRB     R0,[SP, #+4]
     35          
     36            // GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     37            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xF88D 0x0006      STRB     R0,[SP, #+6]
     38            GPIO_InitStructure.GPIO_PuPd = SPISRAM_PIN_PULL;
   \   00000026   0xF88D 0x0007      STRB     R0,[SP, #+7]
     39          
     40            GPIO_InitStructure.GPIO_Pin = SPISRAM_SCK_PIN;
   \   0000002A   0xF44F 0x5000      MOV      R0,#+8192
   \   0000002E   0x9000             STR      R0,[SP, #+0]
     41            GPIO_PinAFConfig(SPISRAM_SCK_PORT, SPISRAM_SCK_PINSOURCE, SPISRAM_SPI_AF);
   \   00000030   0x.... 0x....      LDR.W    R4,??DataTable14  ;; 0x40020400
   \   00000034   0x2205             MOVS     R2,#+5
   \   00000036   0x210D             MOVS     R1,#+13
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       GPIO_PinAFConfig
     42            GPIO_Init( SPISRAM_SCK_PORT, &GPIO_InitStructure );
   \   0000003E   0xA900             ADD      R1,SP,#+0
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       GPIO_Init
     43          
     44            GPIO_InitStructure.GPIO_Pin = SPISRAM_MISO_PIN;
   \   00000046   0xF44F 0x4080      MOV      R0,#+16384
   \   0000004A   0x9000             STR      R0,[SP, #+0]
     45            GPIO_PinAFConfig(SPISRAM_MISO_PORT, SPISRAM_MISO_PINSOURCE, SPISRAM_SPI_AF);
   \   0000004C   0x2205             MOVS     R2,#+5
   \   0000004E   0x210E             MOVS     R1,#+14
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       GPIO_PinAFConfig
     46            GPIO_Init( SPISRAM_MISO_PORT, &GPIO_InitStructure );
   \   00000056   0xA900             ADD      R1,SP,#+0
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       GPIO_Init
     47          
     48            GPIO_InitStructure.GPIO_Pin = SPISRAM_MOSI_PIN;
   \   0000005E   0xF44F 0x4000      MOV      R0,#+32768
   \   00000062   0x9000             STR      R0,[SP, #+0]
     49            GPIO_PinAFConfig(SPISRAM_MOSI_PORT, SPISRAM_MOSI_PINSOURCE, SPISRAM_SPI_AF);
   \   00000064   0x2205             MOVS     R2,#+5
   \   00000066   0x210F             MOVS     R1,#+15
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       GPIO_PinAFConfig
     50            GPIO_Init( SPISRAM_MOSI_PORT, &GPIO_InitStructure );
   \   0000006E   0xA900             ADD      R1,SP,#+0
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       GPIO_Init
     51          
     52            // CS pin config
     53            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000076   0xF44F 0x5180      MOV      R1,#+4096
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0x.... 0x....      BL       GPIO_SetBits
     54            GPIO_InitStructure.GPIO_Pin = SPISRAM_CS_PIN;
   \   00000080   0xF44F 0x5080      MOV      R0,#+4096
   \   00000084   0x9000             STR      R0,[SP, #+0]
     55            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000086   0x2002             MOVS     R0,#+2
   \   00000088   0xF88D 0x0005      STRB     R0,[SP, #+5]
     56            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xF88D 0x0004      STRB     R0,[SP, #+4]
     57            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   00000092   0xF88D 0x0006      STRB     R0,[SP, #+6]
     58            GPIO_InitStructure.GPIO_PuPd = SPISRAM_PIN_PULL;
   \   00000096   0xF88D 0x0007      STRB     R0,[SP, #+7]
     59            GPIO_Init( SPISRAM_CS_PORT, &GPIO_InitStructure );
   \   0000009A   0xA900             ADD      R1,SP,#+0
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       GPIO_Init
     60          
     61            // IRQ pin config
     62            GPIO_SetBits( SPISRAM_IRQ_PORT, SPISRAM_IRQ_PIN );
   \   000000A2   0x2104             MOVS     R1,#+4
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       GPIO_SetBits
     63            GPIO_InitStructure.GPIO_Pin = SPISRAM_IRQ_PIN;
   \   000000AA   0x2004             MOVS     R0,#+4
   \   000000AC   0x9000             STR      R0,[SP, #+0]
     64            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000AE   0x2002             MOVS     R0,#+2
   \   000000B0   0xF88D 0x0005      STRB     R0,[SP, #+5]
     65            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0xF88D 0x0004      STRB     R0,[SP, #+4]
     66            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   000000BA   0xF88D 0x0006      STRB     R0,[SP, #+6]
     67            GPIO_InitStructure.GPIO_PuPd = SPISRAM_PIN_PULL;
   \   000000BE   0xF88D 0x0007      STRB     R0,[SP, #+7]
     68            GPIO_Init( SPISRAM_CS_PORT, &GPIO_InitStructure );
   \   000000C2   0xA900             ADD      R1,SP,#+0
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       GPIO_Init
     69          
     70            // SPI config
     71            SPI_InitTypeDef SPI_InitStructure;
     72          
     73            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     74            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   \   000000D0   0xF44F 0x7082      MOV      R0,#+260
   \   000000D4   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     75            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x9003             STR      R0,[SP, #+12]
     76            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
     77            SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
   \   000000DC   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     78            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   \   000000E0   0xF44F 0x7000      MOV      R0,#+512
   \   000000E4   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     79            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x9005             STR      R0,[SP, #+20]
     80            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
     81            SPI_InitStructure.SPI_CRCPolynomial = 7;
   \   000000EC   0x2007             MOVS     R0,#+7
   \   000000EE   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     82            SPI_Init( SPISRAM_SPI, &SPI_InitStructure );
   \   000000F2   0x.... 0x....      LDR.W    R4,??DataTable14_1  ;; 0x40003800
   \   000000F6   0xA902             ADD      R1,SP,#+8
   \   000000F8   0x4620             MOV      R0,R4
   \   000000FA   0x.... 0x....      BL       SPI_Init
     83          
     84          //  SPI_RxFIFOThresholdConfig(SPISRAM_SPI, SPI_RxFIFOThreshold_QF);
     85          
     86            // SPI enable
     87            SPI_Cmd( SPISRAM_SPI, ENABLE );
   \   000000FE   0x2101             MOVS     R1,#+1
   \   00000100   0x4620             MOV      R0,R4
   \   00000102   0x.... 0x....      BL       SPI_Cmd
     88          
     89          
     90          
     91          
     92          
     93          
     94          /*
     95            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
     96          
     97          	DMA_InitTypeDef DMA_InitStructure;
     98          	DMA_DeInit(DMA1_Channel2);
     99          	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
    100          	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_SPI_DMA_RX_Buffer;
    101          	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    102          	DMA_InitStructure.DMA_BufferSize = ADC_SPI_DMA_Buffer_size;
    103          	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    104          	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    105          	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    106          	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    107          	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    108          	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    109          	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    110          	DMA_Init(DMA1_Channel2, &DMA_InitStructure);
    111          
    112          	DMA_DeInit(DMA1_Channel3);
    113          	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&SPI1->DR;
    114          	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_SPI_DMA_TX_Buffer;
    115          	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
    116          	DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
    117          	DMA_Init(DMA1_Channel3, &DMA_InitStructure);
    118          
    119          	// Enable SPI_MASTER DMA Tx request
    120          	SPI_I2S_DMACmd(SPI1, SPI_I2S_DMAReq_Tx, ENABLE);
    121          	// Enable SPI_MASTER DMA Rx request
    122          	SPI_I2S_DMACmd(SPI1, SPI_I2S_DMAReq_Rx, ENABLE);
    123          
    124          
    125          	DMA_Cmd(DMA1_Channel2, ENABLE);
    126          	DMA_Cmd(DMA1_Channel3, ENABLE);
    127          
    128          	while(!DMA_GetFlagStatus(DMA1_FLAG_TC2));
    129          	while(!DMA_GetFlagStatus(DMA1_FLAG_TC3));
    130          
    131          	DMA_Cmd(DMA1_Channel2, DISABLE);
    132          	DMA_Cmd(DMA1_Channel3, DISABLE);
    133          
    134          
    135          */
    136          
    137          
    138          
    139          
    140          
    141          
    142          }
   \   00000106   0xB008             ADD      SP,SP,#+32
   \   00000108   0xBD10             POP      {R4,PC}          ;; return
    143          
    144          
    145          /*----------------------------------------------------------------------------*/
    146          /* @brief       Peripheral deinitialization                                   */
    147          /* @param       None                                                          */
    148          /* @return      None                                                          */
    149          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    150          void TSPISRAM::PHYDeinit( void )
    151          {
   \                     _ZN8TSPISRAM9PHYDeinitEv: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    152            GPIO_InitTypeDef GPIO_InitStructure;
    153          
    154            // SPI pins config
    155            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
   \   00000002   0x2000             MOVS     R0,#+0
    156            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   00000004   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    157            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000008   0xF88D 0x0006      STRB     R0,[SP, #+6]
    158            GPIO_InitStructure.GPIO_PuPd =  SPISRAM_PIN_PULL;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xF88D 0x0007      STRB     R0,[SP, #+7]
    159          
    160            GPIO_InitStructure.GPIO_Pin = SPISRAM_SCK_PIN;
   \   00000012   0xF44F 0x5000      MOV      R0,#+8192
   \   00000016   0x9000             STR      R0,[SP, #+0]
    161            GPIO_Init( SPISRAM_SCK_PORT, &GPIO_InitStructure );
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable14  ;; 0x40020400
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       GPIO_Init
    162          
    163            GPIO_InitStructure.GPIO_Pin = SPISRAM_MISO_PIN;
   \   00000024   0xF44F 0x4080      MOV      R0,#+16384
   \   00000028   0x9000             STR      R0,[SP, #+0]
    164            GPIO_Init( SPISRAM_MISO_PORT, &GPIO_InitStructure );
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       GPIO_Init
    165          
    166            GPIO_InitStructure.GPIO_Pin = SPISRAM_MOSI_PIN;
   \   00000032   0xF44F 0x4000      MOV      R0,#+32768
   \   00000036   0x9000             STR      R0,[SP, #+0]
    167            GPIO_Init( SPISRAM_MOSI_PORT, &GPIO_InitStructure );
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       GPIO_Init
    168          }
   \   00000040   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    169          
    170          
    171          /*----------------------------------------------------------------------------*/
    172          /* @brief       Peripheral reinitialization                                   */
    173          /* @param       None                                                          */
    174          /* @return      None                                                          */
    175          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    176          void TSPISRAM::PHYReinit( void )
    177          {
   \                     _ZN8TSPISRAM9PHYReinitEv: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    178            GPIO_InitTypeDef GPIO_InitStructure;
    179          
    180            // SPI pins config
    181            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0xF88D 0x0005      STRB     R0,[SP, #+5]
    182            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000008   0xF88D 0x0004      STRB     R0,[SP, #+4]
    183            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    184            GPIO_InitStructure.GPIO_PuPd = SPISRAM_PIN_PULL;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xF88D 0x0007      STRB     R0,[SP, #+7]
    185          
    186            GPIO_InitStructure.GPIO_Pin = SPISRAM_SCK_PIN;
   \   00000018   0xF44F 0x5000      MOV      R0,#+8192
   \   0000001C   0x9000             STR      R0,[SP, #+0]
    187            GPIO_PinAFConfig(SPISRAM_SCK_PORT, SPISRAM_SCK_PINSOURCE, SPISRAM_SPI_AF);
   \   0000001E   0x.... 0x....      LDR.W    R4,??DataTable14  ;; 0x40020400
   \   00000022   0x2205             MOVS     R2,#+5
   \   00000024   0x210D             MOVS     R1,#+13
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       GPIO_PinAFConfig
    188            GPIO_Init( SPISRAM_SCK_PORT, &GPIO_InitStructure );
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       GPIO_Init
    189          
    190            GPIO_InitStructure.GPIO_Pin = SPISRAM_MISO_PIN;
   \   00000034   0xF44F 0x4080      MOV      R0,#+16384
   \   00000038   0x9000             STR      R0,[SP, #+0]
    191            GPIO_PinAFConfig(SPISRAM_MISO_PORT, SPISRAM_MISO_PINSOURCE, SPISRAM_SPI_AF);
   \   0000003A   0x2205             MOVS     R2,#+5
   \   0000003C   0x210E             MOVS     R1,#+14
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       GPIO_PinAFConfig
    192            GPIO_Init( SPISRAM_MISO_PORT, &GPIO_InitStructure );
   \   00000044   0xA900             ADD      R1,SP,#+0
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       GPIO_Init
    193          
    194            GPIO_InitStructure.GPIO_Pin = SPISRAM_MOSI_PIN;
   \   0000004C   0xF44F 0x4000      MOV      R0,#+32768
   \   00000050   0x9000             STR      R0,[SP, #+0]
    195            GPIO_PinAFConfig(SPISRAM_MOSI_PORT, SPISRAM_MOSI_PINSOURCE, SPISRAM_SPI_AF);
   \   00000052   0x2205             MOVS     R2,#+5
   \   00000054   0x210F             MOVS     R1,#+15
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       GPIO_PinAFConfig
    196            GPIO_Init( SPISRAM_MOSI_PORT, &GPIO_InitStructure );
   \   0000005C   0xA900             ADD      R1,SP,#+0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       GPIO_Init
    197          }
   \   00000064   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    198          
    199          /*----------------------------------------------------------------------------*/
    200          /* @brief       Byte mode write in SPI SRAM                                   */
    201          /* @param       None                                                          */
    202          /* @return      None                                                          */
    203          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    204          void TSPISRAM::WriteByte( uint32_t addr, uint8_t data )
    205          {
   \                     _ZN8TSPISRAM9WriteByteEjh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    206            PHYReinit();
   \   00000006   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    207          
    208            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable14  ;; 0x40020400
   \   0000000E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000012   0x4630             MOV      R0,R6
   \   00000014   0x.... 0x....      BL       GPIO_ResetBits
    209          
    210            SendByte(SPISRAM_WRMR);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    211            SendByte(SPISRAM_BYTEMode);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    212          
    213            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000024   0xF44F 0x5180      MOV      R1,#+4096
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0x.... 0x....      BL       GPIO_SetBits
    214            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       GPIO_ResetBits
    215          
    216            SendByte(SPISRAM_WRITE);
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    217          
    218            SendAddr(addr);
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    219          
    220            SendByte(data);
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    221          
    222            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000004A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0x.... 0x....      BL       GPIO_SetBits
    223          
    224            PHYDeinit();
   \   00000054   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000058   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    225          }
    226          
    227          
    228          /*----------------------------------------------------------------------------*/
    229          /* @brief       Byte mode write in SPI SRAM                                   */
    230          /* @param       None                                                          */
    231          /* @return      None                                                          */
    232          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    233          void TSPISRAM::WriteByte( uint32_t addr, uint8_t *data )
    234          {
   \                     _ZN8TSPISRAM9WriteByteEjPh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    235            PHYReinit();
   \   00000006   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    236          
    237            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000A   0x....             LDR.N    R6,??DataTable14  ;; 0x40020400
   \   0000000C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000010   0x4630             MOV      R0,R6
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
    238          
    239            SendByte(SPISRAM_WRMR);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    240            SendByte(SPISRAM_BYTEMode);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    241          
    242            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000022   0xF44F 0x5180      MOV      R1,#+4096
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    243            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    244          
    245            SendByte(SPISRAM_WRITE);
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    246          
    247            SendAddr(addr);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    248          
    249            SendByte(data[0]);
   \   00000042   0x7828             LDRB     R0,[R5, #+0]
   \   00000044   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    250          
    251            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000048   0xF44F 0x5180      MOV      R1,#+4096
   \   0000004C   0x4630             MOV      R0,R6
   \   0000004E   0x.... 0x....      BL       GPIO_SetBits
    252          
    253            PHYDeinit();
   \   00000052   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000056   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    254          }
    255          
    256          
    257          /*----------------------------------------------------------------------------*/
    258          /* @brief       Page mode write in SPI SRAM                                   */
    259          /* @param       None                                                          */
    260          /* @return      None                                                          */
    261          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    262          void TSPISRAM::WritePage( uint32_t addr, uint8_t *data )
    263          {
   \                     _ZN8TSPISRAM9WritePageEjPh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    264            PHYReinit();
   \   00000006   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    265          
    266            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000A   0x....             LDR.N    R6,??DataTable14  ;; 0x40020400
   \   0000000C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000010   0x4630             MOV      R0,R6
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
    267          
    268            SendByte(SPISRAM_WRMR);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    269            SendByte(SPISRAM_PAGEMode);
   \   0000001C   0x2080             MOVS     R0,#+128
   \   0000001E   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    270          
    271            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000022   0xF44F 0x5180      MOV      R1,#+4096
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    272            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    273          
    274            SendByte(SPISRAM_WRITE);
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    275          
    276            SendAddr(addr);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    277          
    278            for(int i = 0; i < SPISRAM_PAGE_SIZE; i++) {
   \   00000042   0x2400             MOVS     R4,#+0
   \   00000044   0xE003             B.N      ??WritePage_0
    279              SendByte(data[i]);
   \                     ??WritePage_1: (+1)
   \   00000046   0x5D60             LDRB     R0,[R4, R5]
   \   00000048   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    280            }
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
   \                     ??WritePage_0: (+1)
   \   0000004E   0x2C20             CMP      R4,#+32
   \   00000050   0xDBF9             BLT.N    ??WritePage_1
    281          
    282            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000052   0xF44F 0x5180      MOV      R1,#+4096
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       GPIO_SetBits
    283          
    284            PHYDeinit();
   \   0000005C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000060   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    285          }
    286          
    287          
    288          /*----------------------------------------------------------------------------*/
    289          /* @brief       Sequential mode write in SPI SRAM                             */
    290          /* @param       None                                                          */
    291          /* @return      None                                                          */
    292          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    293          void TSPISRAM::WriteSeq( uint32_t addr, uint32_t size, uint8_t *data )
    294          {
   \                     _ZN8TSPISRAM8WriteSeqEjjPh: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    295            PHYReinit();
   \   00000008   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    296          
    297            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000C   0x....             LDR.N    R7,??DataTable14  ;; 0x40020400
   \   0000000E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000012   0x4638             MOV      R0,R7
   \   00000014   0x.... 0x....      BL       GPIO_ResetBits
    298          
    299            SendByte(SPISRAM_WRMR);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    300            SendByte(SPISRAM_SEQMode);
   \   0000001E   0x2040             MOVS     R0,#+64
   \   00000020   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    301          
    302            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000024   0xF44F 0x5180      MOV      R1,#+4096
   \   00000028   0x4638             MOV      R0,R7
   \   0000002A   0x.... 0x....      BL       GPIO_SetBits
    303            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000032   0x4638             MOV      R0,R7
   \   00000034   0x.... 0x....      BL       GPIO_ResetBits
    304          
    305            SendByte(SPISRAM_WRITE);
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    306          
    307            SendAddr(addr);
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    308          
    309            for(int i = 0; i < size; i++) {
   \   00000044   0x2400             MOVS     R4,#+0
   \   00000046   0xE003             B.N      ??WriteSeq_0
    310              SendByte(data[i]);
   \                     ??WriteSeq_1: (+1)
   \   00000048   0x5DA0             LDRB     R0,[R4, R6]
   \   0000004A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    311            }
   \   0000004E   0x1C64             ADDS     R4,R4,#+1
   \                     ??WriteSeq_0: (+1)
   \   00000050   0x42AC             CMP      R4,R5
   \   00000052   0xD3F9             BCC.N    ??WriteSeq_1
    312          
    313            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000054   0xF44F 0x5180      MOV      R1,#+4096
   \   00000058   0x4638             MOV      R0,R7
   \   0000005A   0x.... 0x....      BL       GPIO_SetBits
    314          
    315            PHYDeinit();
   \   0000005E   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   00000062   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    316          
    317          }
    318          
    319          
    320          /*----------------------------------------------------------------------------*/
    321          /* @brief       Byte mode read from SPI SRAM                                  */
    322          /* @param       None                                                          */
    323          /* @return      None                                                          */
    324          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    325          uint8_t TSPISRAM::ReadByte( uint32_t addr )
    326          {
   \                     _ZN8TSPISRAM8ReadByteEj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    327            PHYReinit();
   \   00000004   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    328          
    329            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000008   0x....             LDR.N    R5,??DataTable14  ;; 0x40020400
   \   0000000A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       GPIO_ResetBits
    330          
    331            SendByte(SPISRAM_WRMR);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    332            SendByte(SPISRAM_BYTEMode);
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    333          
    334            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000020   0xF44F 0x5180      MOV      R1,#+4096
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       GPIO_SetBits
    335            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x.... 0x....      BL       GPIO_ResetBits
    336          
    337            SendByte(SPISRAM_READ);
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    338          
    339            SendAddr(addr);
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    340          
    341            uint8_t i = ReceiveByte(0);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       _ZN8TSPISRAM11ReceiveByteEh
   \   00000046   0x4604             MOV      R4,R0
    342          
    343            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000048   0xF44F 0x5180      MOV      R1,#+4096
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       GPIO_SetBits
    344          
    345            PHYDeinit();
   \   00000052   0x.... 0x....      BL       _ZN8TSPISRAM9PHYDeinitEv
    346            
    347            return i;
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    348          }
    349          
    350          
    351          /*----------------------------------------------------------------------------*/
    352          /* @brief       Byte mode read from SPI SRAM                                  */
    353          /* @param       None                                                          */
    354          /* @return      None                                                          */
    355          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    356          void TSPISRAM::ReadByte( uint32_t addr, uint8_t *data )
    357          {
   \                     _ZN8TSPISRAM8ReadByteEjPh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    358            PHYReinit();
   \   00000006   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    359          
    360            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000A   0x....             LDR.N    R6,??DataTable14  ;; 0x40020400
   \   0000000C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000010   0x4630             MOV      R0,R6
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
    361          
    362            SendByte(SPISRAM_WRMR);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    363            SendByte(SPISRAM_BYTEMode);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    364          
    365            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000022   0xF44F 0x5180      MOV      R1,#+4096
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    366            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    367          
    368            SendByte(SPISRAM_READ);
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    369          
    370            SendAddr(addr);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    371          
    372            data[0] = ReceiveByte(0);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       _ZN8TSPISRAM11ReceiveByteEh
   \   00000048   0x7028             STRB     R0,[R5, #+0]
    373          
    374            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000004A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0x.... 0x....      BL       GPIO_SetBits
    375          
    376            PHYDeinit();
   \   00000054   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000058   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    377          }
    378          
    379          
    380          /*----------------------------------------------------------------------------*/
    381          /* @brief       Page mode read from SPI SRAM                                  */
    382          /* @param       None                                                          */
    383          /* @return      None                                                          */
    384          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    385          void TSPISRAM::ReadPage( uint32_t addr, uint8_t *data )
    386          {
   \                     _ZN8TSPISRAM8ReadPageEjPh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    387            PHYReinit();
   \   00000006   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    388          
    389            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000A   0x....             LDR.N    R6,??DataTable14  ;; 0x40020400
   \   0000000C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000010   0x4630             MOV      R0,R6
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
    390          
    391            SendByte(SPISRAM_WRMR);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    392            SendByte(SPISRAM_PAGEMode);
   \   0000001C   0x2080             MOVS     R0,#+128
   \   0000001E   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    393          
    394            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000022   0xF44F 0x5180      MOV      R1,#+4096
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    395            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       GPIO_ResetBits
    396          
    397            SendByte(SPISRAM_READ);
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    398          
    399            SendAddr(addr);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    400          
    401            for(int i = 0; i < SPISRAM_PAGE_SIZE; i++) {
   \   00000042   0x2400             MOVS     R4,#+0
   \   00000044   0xE004             B.N      ??ReadPage_0
    402              data[i] = ReceiveByte(0);
   \                     ??ReadPage_1: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       _ZN8TSPISRAM11ReceiveByteEh
   \   0000004C   0x5560             STRB     R0,[R4, R5]
    403            }
   \   0000004E   0x1C64             ADDS     R4,R4,#+1
   \                     ??ReadPage_0: (+1)
   \   00000050   0x2C20             CMP      R4,#+32
   \   00000052   0xDBF8             BLT.N    ??ReadPage_1
    404          
    405            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000054   0xF44F 0x5180      MOV      R1,#+4096
   \   00000058   0x4630             MOV      R0,R6
   \   0000005A   0x.... 0x....      BL       GPIO_SetBits
    406          
    407            PHYDeinit();
   \   0000005E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000062   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    408          }
    409          
    410          
    411          /*----------------------------------------------------------------------------*/
    412          /* @brief       Sequential mode read from SPI SRAM                            */
    413          /* @param       None                                                          */
    414          /* @return      None                                                          */
    415          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    416          void TSPISRAM::ReadSeq( uint32_t addr, uint32_t size, uint8_t *data )
    417          {
   \                     _ZN8TSPISRAM7ReadSeqEjjPh: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    418            PHYReinit();
   \   00000008   0x.... 0x....      BL       _ZN8TSPISRAM9PHYReinitEv
    419          
    420            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000000C   0x....             LDR.N    R7,??DataTable14  ;; 0x40020400
   \   0000000E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000012   0x4638             MOV      R0,R7
   \   00000014   0x.... 0x....      BL       GPIO_ResetBits
    421          
    422            SendByte(SPISRAM_WRMR);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    423            SendByte(SPISRAM_SEQMode);
   \   0000001E   0x2040             MOVS     R0,#+64
   \   00000020   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    424          
    425            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   00000024   0xF44F 0x5180      MOV      R1,#+4096
   \   00000028   0x4638             MOV      R0,R7
   \   0000002A   0x.... 0x....      BL       GPIO_SetBits
    426            GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000002E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000032   0x4638             MOV      R0,R7
   \   00000034   0x.... 0x....      BL       GPIO_ResetBits
    427          
    428            SendByte(SPISRAM_READ);
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    429          
    430            SendAddr(addr);
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       _ZN8TSPISRAM8SendAddrEj
    431          
    432            for(int i = 0; i < size; i++) {
   \   00000044   0x2400             MOVS     R4,#+0
   \   00000046   0xE006             B.N      ??ReadSeq_0
    433              temp = ReceiveByte((uint8_t)0);
   \                     ??ReadSeq_1: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       _ZN8TSPISRAM11ReceiveByteEh
   \   0000004E   0x....             LDR.N    R1,??DataTable14_2
   \   00000050   0x7008             STRB     R0,[R1, #+0]
    434              data[i] = temp;
   \   00000052   0x55A0             STRB     R0,[R4, R6]
    435            }
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \                     ??ReadSeq_0: (+1)
   \   00000056   0x42AC             CMP      R4,R5
   \   00000058   0xD3F6             BCC.N    ??ReadSeq_1
    436          
    437            GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \   0000005A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000005E   0x4638             MOV      R0,R7
   \   00000060   0x.... 0x....      BL       GPIO_SetBits
    438          
    439            PHYDeinit();
   \   00000064   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   00000068   0x....             B.N      _ZN8TSPISRAM9PHYDeinitEv
    440          }
    441          
    442          
    443          /*----------------------------------------------------------------------------*/
    444          /* @brief       Control CS line                                               */
    445          /* @param       None                                                          */
    446          /* @return      None                                                          */
    447          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    448          void TSPISRAM::SSControl( bool state )
    449          {
    450          	if( state == true ) GPIO_SetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \                     _ZN8TSPISRAM9SSControlEb: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14  ;; 0x40020400
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xF44F 0x5180      MOV      R1,#+4096
   \   00000008   0x4610             MOV      R0,R2
   \   0000000A   0xD001             BEQ.N    ??SSControl_0
   \   0000000C   0x.... 0x....      B.W      GPIO_SetBits
    451          	else GPIO_ResetBits( SPISRAM_CS_PORT, SPISRAM_CS_PIN );
   \                     ??SSControl_0: (+1)
   \   00000010   0x.... 0x....      B.W      GPIO_ResetBits
    452          }
    453          
    454          
    455          /*----------------------------------------------------------------------------*/
    456          /* @brief       Control IRQ line                                               */
    457          /* @param       None                                                          */
    458          /* @return      None                                                          */
    459          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    460          void TSPISRAM::IRQControl( bool state )
    461          {
   \                     _ZN8TSPISRAM10IRQControlEb: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    462            GPIO_InitTypeDef GPIO_InitStructure;
    463          	if( state == true ) 
   \   00000002   0x....             LDR.N    R4,??DataTable14  ;; 0x40020400
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD015             BEQ.N    ??IRQControl_0
    464            {
    465              GPIO_SetBits( SPISRAM_IRQ_PORT, SPISRAM_IRQ_PIN );
   \   00000008   0x2104             MOVS     R1,#+4
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       GPIO_SetBits
    466              GPIO_InitStructure.GPIO_Pin = SPISRAM_IRQ_PIN;
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x9000             STR      R0,[SP, #+0]
    467              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0xF88D 0x0005      STRB     R0,[SP, #+5]
    468              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    469              GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xF88D 0x0006      STRB     R0,[SP, #+6]
    470              GPIO_InitStructure.GPIO_PuPd = SPISRAM_PIN_PULL;
   \   00000026   0xF88D 0x0007      STRB     R0,[SP, #+7]
    471              GPIO_Init( SPISRAM_IRQ_PORT, &GPIO_InitStructure );
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       GPIO_Init
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}
    472            }
    473          	else 
    474            {
    475              GPIO_ResetBits( SPISRAM_IRQ_PORT, SPISRAM_IRQ_PIN );
   \                     ??IRQControl_0: (+1)
   \   00000034   0x2104             MOVS     R1,#+4
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       GPIO_ResetBits
    476              GPIO_InitStructure.GPIO_Pin = SPISRAM_IRQ_PIN;
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x9000             STR      R0,[SP, #+0]
    477              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xF88D 0x0005      STRB     R0,[SP, #+5]
    478              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0004      STRB     R0,[SP, #+4]
    479              GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   0000004C   0xF88D 0x0006      STRB     R0,[SP, #+6]
    480              GPIO_InitStructure.GPIO_PuPd = SPISRAM_PIN_PULL;
   \   00000050   0xF88D 0x0007      STRB     R0,[SP, #+7]
    481              GPIO_Init( SPISRAM_IRQ_PORT, &GPIO_InitStructure );
   \   00000054   0xA900             ADD      R1,SP,#+0
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       GPIO_Init
    482            }
    483          }
   \   0000005C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    484          
    485          
    486          /*----------------------------------------------------------------------------*/
    487          /* @brief       Sending byte by SPI                                           */
    488          /* @param       None                                                          */
    489          /* @return      None                                                          */
    490          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    491          void TSPISRAM::SendByte( uint8_t byte )
    492          {
   \                     _ZN8TSPISRAM8SendByteEh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    493          //	SPI_SendData8( SPISRAM_SPI, byte );
    494          	SPI_SendData( SPISRAM_SPI, byte );
   \   00000002   0x....             LDR.N    R4,??DataTable14_1  ;; 0x40003800
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       SPI_I2S_SendData
    495          	while( SPI_I2S_GetFlagStatus( SPISRAM_SPI, SPI_I2S_FLAG_BSY ) == SET );
   \                     ??SendByte_0: (+1)
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD0F9             BEQ.N    ??SendByte_0
    496          	__delay_cycles(	1 );
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001E   0x.... 0x....      B.W      _Z14__delay_cyclesi
    497          }
    498          
    499          
    500          /*----------------------------------------------------------------------------*/
    501          /* @brief       Sending address by SPI                                           */
    502          /* @param       None                                                          */
    503          /* @return      None                                                          */
    504          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    505          void TSPISRAM::SendAddr( uint32_t addr )
    506          {
   \                     _ZN8TSPISRAM8SendAddrEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    507            uint8_t address[4]; 
    508          
    509            for(int i = 0; i < SPISRAM_ADDR_SIZE; i++) 
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xAA00             ADD      R2,SP,#+0
   \   00000008   0xE002             B.N      ??SendAddr_0
    510            {
    511              address[i] = (uint8_t) (addr & 0xFF);
   \                     ??SendAddr_1: (+1)
   \   0000000A   0x5488             STRB     R0,[R1, R2]
    512              addr = addr >> 8;
   \   0000000C   0x0A00             LSRS     R0,R0,#+8
    513            }
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \                     ??SendAddr_0: (+1)
   \   00000010   0x2903             CMP      R1,#+3
   \   00000012   0xDBFA             BLT.N    ??SendAddr_1
    514            for(int i = SPISRAM_ADDR_SIZE; i > 0; i--) 
   \   00000014   0x2403             MOVS     R4,#+3
   \   00000016   0xE006             B.N      ??SendAddr_2
    515            {
    516              SendByte(address[i - 1]);
   \                     ??SendAddr_3: (+1)
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x1820             ADDS     R0,R4,R0
   \   0000001C   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000020   0x.... 0x....      BL       _ZN8TSPISRAM8SendByteEh
    517            }
   \   00000024   0x1E64             SUBS     R4,R4,#+1
   \                     ??SendAddr_2: (+1)
   \   00000026   0x2C01             CMP      R4,#+1
   \   00000028   0xDAF6             BGE.N    ??SendAddr_3
    518          }
   \   0000002A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    519          
    520          
    521          /*----------------------------------------------------------------------------*/
    522          /* @brief       Receiving byte by SPI                                         */
    523          /* @param       None                                                          */
    524          /* @return      None                                                          */
    525          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    526          uint8_t TSPISRAM::ReceiveByte( uint8_t data )
    527          {
   \                     _ZN8TSPISRAM11ReceiveByteEh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x....             LDR.N    R5,??DataTable14_1  ;; 0x40003800
   \   00000006   0xE004             B.N      ??ReceiveByte_0
    528            volatile uint8_t Data;
    529          /*
    530            while( SPI_GetReceptionFIFOStatus( SPISRAM_SPI ) != SPI_ReceptionFIFOStatus_Empty)
    531            {
    532              Data = SPI_ReceiveData8( SPISRAM_SPI );
    533            }
    534          
    535            while( SPI_GetTransmissionFIFOStatus( SPISRAM_SPI ) != SPI_TransmissionFIFOStatus_Empty);
    536          
    537            SPI_SendData8( SPISRAM_SPI, data );
    538          
    539            while( SPI_GetReceptionFIFOStatus( SPISRAM_SPI ) != SPI_ReceptionFIFOStatus_Empty);
    540          
    541            Data = SPI_ReceiveData8( SPISRAM_SPI );
    542          */
    543            while( SPI_I2S_GetFlagStatus( SPISRAM_SPI, SPI_I2S_FLAG_RXNE ) )
    544            {
    545              Data = SPI_ReceiveData( SPISRAM_SPI );
   \                     ??ReceiveByte_1: (+1)
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    546            }
   \                     ??ReceiveByte_0: (+1)
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1F4             BNE.N    ??ReceiveByte_1
    547            SPI_SendData( SPISRAM_SPI, data );
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       SPI_I2S_SendData
    548            while( !SPI_I2S_GetFlagStatus( SPISRAM_SPI, SPI_I2S_FLAG_RXNE ));
   \                     ??ReceiveByte_2: (+1)
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD0F9             BEQ.N    ??ReceiveByte_2
    549            Data = SPI_ReceiveData( SPISRAM_SPI );
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    550            
    551            
    552            return Data;
   \   0000003C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000040   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    553          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     temp
    554          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   TSPISRAM::IRQControl(bool)
        16   -> GPIO_Init
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
      16   TSPISRAM::PHYDeinit()
        16   -> GPIO_Init
      40   TSPISRAM::PHYInit()
        40   -> GPIO_Init
        40   -> GPIO_PinAFConfig
        40   -> GPIO_SetBits
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB1PeriphClockCmd
        40   -> SPI_Cmd
        40   -> SPI_Init
      16   TSPISRAM::PHYReinit()
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
      16   TSPISRAM::ReadByte(uint32_t)
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> TSPISRAM::PHYDeinit()
        16   -> TSPISRAM::PHYReinit()
        16   -> TSPISRAM::ReceiveByte(uint8_t)
        16   -> TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
      16   TSPISRAM::ReadByte(uint32_t, uint8_t *)
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        16   -> TSPISRAM::PHYReinit()
        16   -> TSPISRAM::ReceiveByte(uint8_t)
        16   -> TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
      16   TSPISRAM::ReadPage(uint32_t, uint8_t *)
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        16   -> TSPISRAM::PHYReinit()
        16   -> TSPISRAM::ReceiveByte(uint8_t)
        16   -> TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
      24   TSPISRAM::ReadSeq(uint32_t, uint32_t, uint8_t *)
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        24   -> TSPISRAM::PHYReinit()
        24   -> TSPISRAM::ReceiveByte(uint8_t)
        24   -> TSPISRAM::SendAddr(uint32_t)
        24   -> TSPISRAM::SendByte(uint8_t)
      16   TSPISRAM::ReceiveByte(uint8_t)
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
       0   TSPISRAM::SSControl(bool)
         0   -> GPIO_ResetBits
      16   TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
       8   TSPISRAM::SendByte(uint8_t)
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_SendData
         0   -> __delay_cycles(int)
      16   TSPISRAM::WriteByte(uint32_t, uint8_t *)
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        16   -> TSPISRAM::PHYReinit()
        16   -> TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
      16   TSPISRAM::WriteByte(uint32_t, uint8_t)
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        16   -> TSPISRAM::PHYReinit()
        16   -> TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
      16   TSPISRAM::WritePage(uint32_t, uint8_t *)
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        16   -> TSPISRAM::PHYReinit()
        16   -> TSPISRAM::SendAddr(uint32_t)
        16   -> TSPISRAM::SendByte(uint8_t)
      24   TSPISRAM::WriteSeq(uint32_t, uint32_t, uint8_t *)
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
         0   -> TSPISRAM::PHYDeinit()
        24   -> TSPISRAM::PHYReinit()
        24   -> TSPISRAM::SendAddr(uint32_t)
        24   -> TSPISRAM::SendByte(uint8_t)
       4   __delay_cycles(int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
      94  TSPISRAM::IRQControl(bool)
      66  TSPISRAM::PHYDeinit()
     266  TSPISRAM::PHYInit()
     102  TSPISRAM::PHYReinit()
      90  TSPISRAM::ReadByte(uint32_t)
      90  TSPISRAM::ReadByte(uint32_t, uint8_t *)
     100  TSPISRAM::ReadPage(uint32_t, uint8_t *)
     106  TSPISRAM::ReadSeq(uint32_t, uint32_t, uint8_t *)
      66  TSPISRAM::ReceiveByte(uint8_t)
      20  TSPISRAM::SSControl(bool)
      44  TSPISRAM::SendAddr(uint32_t)
      34  TSPISRAM::SendByte(uint8_t)
      88  TSPISRAM::WriteByte(uint32_t, uint8_t *)
      90  TSPISRAM::WriteByte(uint32_t, uint8_t)
      98  TSPISRAM::WritePage(uint32_t, uint8_t *)
     100  TSPISRAM::WriteSeq(uint32_t, uint32_t, uint8_t *)
      20  __delay_cycles(int)
       1  temp

 
     1 byte  in section .bss
 1 486 bytes in section .text
 
 1 466 bytes of CODE memory (+ 20 bytes shared)
     1 byte  of DATA memory

Errors: none
Warnings: none

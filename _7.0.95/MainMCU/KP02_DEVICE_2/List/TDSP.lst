###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TDSP.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TDSP.cpp -D IAR_ARM_CM4
#        -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H -D
#        SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D STENDBUY_NOT_USE
#        -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO -D
#        BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\TDSP.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\TDSP.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TDSP.cpp
      1          /************************************************************************************/
      2          /* Title:		Digital processing													*/
      3          /* Author:		Cyber Genius														*/
      4          /* Version:		1.0																	*/
      5          /* Date:		18.07.2012															*/
      6          /************************************************************************************/
      7          /*																					*/
      8          /************************************************************************************/
      9          #include "TDSP.h"
     10          #include "main.h"
     11          
     12          int TDSP::MA_HP_Arr0[ N_MA_HP ];
     13          int TDSP::MA_HP_Arr1[ N_MA_HP ];
     14          int TDSP::MA_HP_Arr2[ N_MA_HP ];
     15          
     16          //int TDSP::MA_HP_Arr3[ N_MA_HP_2H ];
     17          
     18          /*----------------------------------------------------------------------------------*/
     19          /* Фильтр НЧ 12 порядка, срез на 15 Гц								*/
     20          /*----------------------------------------------------------------------------------*/
     21          float xval[12];

   \                                 In section .text, align 4, keep-with-next
     22          int TDSP::FF_LP_12( int data )
     23          {
   \                     _ZN4TDSP8FF_LP_12Ei: (+1)
   \   00000000   0xEE00 0x0A10      VMOV     S0,R0
     24          	const float k0 = 0.0067;
     25          	const float k1 = 0.0244;
     26          	const float k2 = 0.0569;
     27          	const float k3 = 0.1001;
     28          	const float k4 = 0.1424;
     29          	const float k5 = 0.1688;
     30          	const int gain = 4;
     31          	float y0;
     32          
     33          	for (int i = 0; i < 11; i++) xval[i] = xval[i+1];
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable14
   \   0000000A   0xE005             B.N      ??FF_LP_12_0
   \                     ??FF_LP_12_1: (+1)
   \   0000000C   0xEB01 0x0280      ADD      R2,R1,R0, LSL #+2
   \   00000010   0x6852             LDR      R2,[R2, #+4]
   \   00000012   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \                     ??FF_LP_12_0: (+1)
   \   00000018   0x280B             CMP      R0,#+11
   \   0000001A   0xDBF7             BLT.N    ??FF_LP_12_1
     34          	xval[11] = (float)data;
   \   0000001C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000020   0xED81 0x0A0B      VSTR     S0,[R1, #+44]
     35          	y0 =  gain * (int)(((xval[0] + xval[11]) * k0) + ((xval[1] + xval[10]) * k1) + ((xval[2] + xval[9]) * k2) + ((xval[3] + xval[8]) * k3) + ((xval[4] + xval[7]) * k4) + ((xval[5] + xval[6]) * k5));
   \   00000024   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   00000028   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   0000002C   0xEDDF 0x....      VLDR.W   S1,??DataTable4  ;; 0x3bdb8bac
   \   00000030   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000034   0xEDD1 0x0A01      VLDR     S1,[R1, #+4]
   \   00000038   0xED91 0x1A0A      VLDR     S2,[R1, #+40]
   \   0000003C   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   00000040   0xED9F 0x....      VLDR.W   S2,??DataTable4_1  ;; 0x3cc7e282
   \   00000044   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000048   0xEDD1 0x0A02      VLDR     S1,[R1, #+8]
   \   0000004C   0xED91 0x1A09      VLDR     S2,[R1, #+36]
   \   00000050   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   00000054   0xED9F 0x....      VLDR.W   S2,??DataTable4_2  ;; 0x3d690ff9
   \   00000058   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000005C   0xEDD1 0x0A03      VLDR     S1,[R1, #+12]
   \   00000060   0xED91 0x1A08      VLDR     S2,[R1, #+32]
   \   00000064   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   00000068   0xED9F 0x....      VLDR.W   S2,??DataTable4_3  ;; 0x3dcd013b
   \   0000006C   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000070   0xEDD1 0x0A04      VLDR     S1,[R1, #+16]
   \   00000074   0xED91 0x1A07      VLDR     S2,[R1, #+28]
   \   00000078   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   0000007C   0xED9F 0x....      VLDR.W   S2,??DataTable4_4  ;; 0x3e11d14e
   \   00000080   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000084   0xEDD1 0x0A05      VLDR     S1,[R1, #+20]
   \   00000088   0xED91 0x1A06      VLDR     S2,[R1, #+24]
   \   0000008C   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \   00000090   0xED9F 0x....      VLDR.W   S2,??DataTable4_5  ;; 0x3e2cd9e8
   \   00000094   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000098   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000009C   0xEE10 0x0A10      VMOV     R0,S0
   \   000000A0   0x0080             LSLS     R0,R0,#+2
   \   000000A2   0xEE00 0x0A10      VMOV     S0,R0
   \   000000A6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
     36          	if (y0 > 32000/gain) y0 = 32000/gain;
   \   000000AA   0xEDDF 0x....      VLDR.W   S1,??DataTable4_6  ;; 0x45fa0001
   \   000000AE   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   000000B2   0xEEF1 0xFA10      FMSTAT   
   \   000000B6   0xDB01             BLT.N    ??FF_LP_12_2
   \   000000B8   0xED9F 0x....      VLDR.W   S0,??DataTable4_7  ;; 0x45fa0000
     37          	if (y0 < -32000/gain) y0 = -32000/gain;
   \                     ??FF_LP_12_2: (+1)
   \   000000BC   0xEDDF 0x....      VLDR.W   S1,??DataTable5  ;; 0xc5fa0000
   \   000000C0   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   000000C4   0xEEF1 0xFA10      FMSTAT   
   \   000000C8   0xD501             BPL.N    ??FF_LP_12_3
   \   000000CA   0xEEB0 0x0A60      VMOV.F32 S0,S1
     38          	return (int) y0;
   \                     ??FF_LP_12_3: (+1)
   \   000000CE   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000D2   0xEE10 0x0A10      VMOV     R0,S0
   \   000000D6   0x4770             BX       LR               ;; return
     39          }
     40          
     41          /*----------------------------------------------------------------------------------*/
     42          /* Рекурсивный фильтр НЧ 4 порядка, срез на ~1.25 Гц								*/
     43          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     44          int TDSP::RFF_LP_12( int x0 )
     45          {
   \                     _ZN4TDSP9RFF_LP_12Ei: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0xB094             SUB      SP,SP,#+80
   \   00000008   0x4604             MOV      R4,R0
     46          	static double x[5] = { 0.0, 0.0, 0.0, 0.0, 0.0};
     47          	static double y[5] = { 0.0, 0.0, 0.0, 0.0, 0.0};
     48          	const double a[5] = {1, -3.91790786539199, 5.75707637911807, 
     49          		-3.76034950769453, 0.921181929191236};
   \   0000000A   0xA80A             ADD      R0,SP,#+40
   \   0000000C   0x.... 0x....      ADR.W    R1,?_0
   \   00000010   0x2228             MOVS     R2,#+40
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy4
     50          	const double b[5] = {5.84514243118228e-08, 2.33805697247291e-07,
     51          		3.50708545870937e-07, 2.33805697247291e-07, 5.84514243118228e-08};
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      ADR.W    R1,?_1
   \   0000001C   0x2228             MOVS     R2,#+40
   \   0000001E   0x.... 0x....      BL       __aeabi_memcpy4
     52          /*	const double a[5] = {1.0, 0.0, 0.0, 0.0, 0.0};
     53          	const double b[5] = {9.60921115487302E-3, 9.61395506134236E-3, 9.61553667567569E-1, 9.61395506134236E-3, 9.60921115487302E-3};
     54          */	const int gain = 4;
     55          	const int n = 4;
     56          
     57          	double y0;
     58          	y0 = b[0] * (double) (x0);
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       __aeabi_i2d
   \   00000028   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   0000002C   0x.... 0x....      BL       __aeabi_dmul
   \   00000030   0xEC41 0x0B18      VMOV     D8,R0,R1
     59          	for (int i = n; i > 0; i--) {
   \   00000034   0x2504             MOVS     R5,#+4
   \   00000036   0xE02F             B.N      ??RFF_LP_12_0
     60          		x[i] = x[i - 1]; 
   \                     ??RFF_LP_12_1: (+1)
   \   00000038   0xEB06 0x00C5      ADD      R0,R6,R5, LSL #+3
   \   0000003C   0xF1A0 0x0108      SUB      R1,R0,#+8
   \   00000040   0xED91 0x0B00      VLDR     D0,[R1, #0]
   \   00000044   0xEB06 0x01C5      ADD      R1,R6,R5, LSL #+3
   \   00000048   0xED81 0x0B00      VSTR     D0,[R1, #0]
     61          		y[i] = y[i - 1]; 
   \   0000004C   0x3020             ADDS     R0,R0,#+32
   \   0000004E   0xED90 0x9B00      VLDR     D9,[R0, #0]
   \   00000052   0xED80 0x9B02      VSTR     D9,[R0, #+8]
     62          		y0 += b[i] * x[i] - a[i] * y[i]; 
   \   00000056   0xA800             ADD      R0,SP,#+0
   \   00000058   0xEB00 0x00C5      ADD      R0,R0,R5, LSL #+3
   \   0000005C   0x6841             LDR      R1,[R0, #+4]
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xEC53 0x2B10      VMOV     R2,R3,D0
   \   00000064   0x.... 0x....      BL       __aeabi_dmul
   \   00000068   0x4606             MOV      R6,R0
   \   0000006A   0x460F             MOV      R7,R1
   \   0000006C   0xA80A             ADD      R0,SP,#+40
   \   0000006E   0xEB00 0x00C5      ADD      R0,R0,R5, LSL #+3
   \   00000072   0x6841             LDR      R1,[R0, #+4]
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x4602             MOV      R2,R0
   \   00000080   0x460B             MOV      R3,R1
   \   00000082   0x4630             MOV      R0,R6
   \   00000084   0x4639             MOV      R1,R7
   \   00000086   0x.... 0x....      BL       __aeabi_dsub
   \   0000008A   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000008E   0x.... 0x....      BL       __aeabi_dadd
   \   00000092   0xEC41 0x0B18      VMOV     D8,R0,R1
     63          	}
   \   00000096   0x1E6D             SUBS     R5,R5,#+1
   \                     ??RFF_LP_12_0: (+1)
   \   00000098   0x.... 0x....      LDR.W    R6,??DataTable14_1
   \   0000009C   0x2D01             CMP      R5,#+1
   \   0000009E   0xDACB             BGE.N    ??RFF_LP_12_1
     64          	y0 = y0 / a[0];
     65          	x[0] = (double) (x0);
   \   000000A0   0x4620             MOV      R0,R4
   \   000000A2   0x.... 0x....      BL       __aeabi_i2d
   \   000000A6   0xE9C6 0x0100      STRD     R0,R1,[R6, #+0]
     66          	y[0] = y0;
   \   000000AA   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   000000AE   0xE9DD 0x230A      LDRD     R2,R3,[SP, #+40]
   \   000000B2   0x.... 0x....      BL       __aeabi_ddiv
   \   000000B6   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   000000BA   0xED86 0x0B0A      VSTR     D0,[R6, #+40]
     67                  y0 = gain * y0;
   \   000000BE   0xEC53 0x2B10      VMOV     R2,R3,D0
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable14_2  ;; 0x40100000
   \   000000C8   0x.... 0x....      BL       __aeabi_dmul
   \   000000CC   0xEC41 0x0B18      VMOV     D8,R0,R1
     68          	if (y0 > 32000) y0 = 32000;
   \   000000D0   0x2201             MOVS     R2,#+1
   \   000000D2   0x.... 0x....      LDR.W    R3,??DataTable14_3  ;; 0x40df4000
   \   000000D6   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000000DA   0xD801             BHI.N    ??RFF_LP_12_2
   \   000000DC   0xED9F 0x....      VLDR.W   D8,??DataTable6
     69          	if (y0 < -32000) y0 = -32000;
   \                     ??RFF_LP_12_2: (+1)
   \   000000E0   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   000000E4   0x2200             MOVS     R2,#+0
   \   000000E6   0x.... 0x....      LDR.W    R3,??DataTable14_4  ;; 0xc0df4000
   \   000000EA   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000EE   0xD201             BCS.N    ??RFF_LP_12_3
   \   000000F0   0xED9F 0x....      VLDR.W   D8,??DataTable7_1
     70          	return ((int)(y0));
   \                     ??RFF_LP_12_3: (+1)
   \   000000F4   0xEC51 0x0B18      VMOV     R0,R1,D8
   \   000000F8   0x.... 0x....      BL       __aeabi_d2iz
   \   000000FC   0xB014             ADD      SP,SP,#+80
   \   000000FE   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000102   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     71          }

   \                                 In section .text, align 8, keep-with-next
   \                     ?_0:
   \   00000000   0x00000000         DC32 0H, 3FF00000H, 1434CC53H, 0C00F57E0H, 7C38B7AH, 4017073FH
   \              0x3FF00000   
   \              0x1434CC53   
   \              0xC00F57E0   
   \              0x07C38B7A   
   \              0x4017073F   
   \   00000018   0x1F689F25         DC32 1F689F25H, 0C00E1532H, 86715C8AH, 3FED7A52H
   \              0xC00E1532   
   \              0x86715C8A   
   \              0x3FED7A52   

   \                                 In section .text, align 8, keep-with-next
   \                     ?_1:
   \   00000000   0xA97FFFFD         DC32 0A97FFFFDH, 3E6F6180H, 0A97FFFF6H, 3E8F6180H, 7F200002H, 3E978920H
   \              0x3E6F6180   
   \              0xA97FFFF6   
   \              0x3E8F6180   
   \              0x7F200002   
   \              0x3E978920   
   \   00000018   0xA97FFFF6         DC32 0A97FFFF6H, 3E8F6180H, 0A97FFFFDH, 3E6F6180H
   \              0x3E8F6180   
   \              0xA97FFFFD   
   \              0x3E6F6180   
     72          
     73          
     74          
     75          
     76          /*----------------------------------------------------------------------------*/
     77          /* Фильтр ВЧ Баттерворта первого порядка, срез на 50 Гц                       */
     78          /* http://www-users.cs.york.ac.uk/~fisher/mkfilter/                           */
     79          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     80          int32_t TDSP::FF_Butterworth_HF(int32_t data, uint8_t ch)
     81          {
   \                     _ZN4TDSP17FF_Butterworth_HFEih: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xEE00 0x0A10      VMOV     S0,R0
     82            const float div = 4.077683537e+00;
     83            const float koef = -0.5095254495;
     84            const float gain = 2.1;
     85            
     86            static float xv[2][16], yv[2][16];
     87            
     88            const uint8_t ch_num = 16;
     89            
     90            if(ch >= ch_num)
   \   00000006   0x2910             CMP      R1,#+16
   \   00000008   0xDB01             BLT.N    ??FF_Butterworth_HF_0
     91            {
     92              return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE028             B.N      ??FF_Butterworth_HF_1
     93            }
     94          
     95            xv[0][ch] = xv[1][ch];
   \                     ??FF_Butterworth_HF_0: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   00000012   0xEB00 0x0281      ADD      R2,R0,R1, LSL #+2
   \   00000016   0xF102 0x0340      ADD      R3,R2,#+64
   \   0000001A   0x681C             LDR      R4,[R3, #+0]
   \   0000001C   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
     96            xv[1][ch] = (float)(data) / div;
   \   00000020   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000024   0xEDDF 0x....      VLDR.W   S1,??DataTable6_1  ;; 0x40827c62
   \   00000028   0xEEC0 0x0A20      VDIV.F32 S1,S0,S1
   \   0000002C   0xEDC3 0x0A00      VSTR     S1,[R3, #0]
     97            
     98            yv[0][ch] = yv[1][ch];
   \   00000030   0xED92 0x1A30      VLDR     S2,[R2, #+192]
   \   00000034   0xED83 0x1A10      VSTR     S2,[R3, #+64]
     99            yv[1][ch] = (xv[1][ch] - xv[0][ch]) + (koef * yv[0][ch]);
   \   00000038   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   0000003C   0xEDD0 0x1A00      VLDR     S3,[R0, #0]
   \   00000040   0xEE70 0x0AE1      VSUB.F32 S1,S1,S3
   \   00000044   0xEDDF 0x....      VLDR.W   S3,??DataTable6_2  ;; 0xbf027043
   \   00000048   0xEE41 0x0A21      VMLA.F32 S1,S2,S3
   \   0000004C   0xEDC2 0x0A30      VSTR     S1,[R2, #+192]
    100            
    101            return (int32_t)((yv[1][ch] * gain) + (float)(data));
   \   00000050   0xED9F 0x....      VLDR.W   S2,??DataTable8  ;; 0x40066666
   \   00000054   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000058   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000005C   0xEE10 0x0A10      VMOV     R0,S0
   \                     ??FF_Butterworth_HF_1: (+1)
   \   00000060   0xBC10             POP      {R4}
   \   00000062   0x4770             BX       LR               ;; return
    102          }
    103          
    104          /*----------------------------------------------------------------------------*/
    105          /* Фильтр Баттерворта полосовой первого порядка, 50 - 120 Гц                  */
    106          /* + ВЧ второго порядка 0.2 Гц ЧД = 250 Гц */
    107          /* http://www-users.cs.york.ac.uk/~fisher/mkfilter/                           */
    108          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    109          int32_t TDSP::Butterworth_Ecg(int32_t data, uint8_t ch)
    110          {
   \                     _ZN4TDSP15Butterworth_EcgEih: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEE00 0x0A10      VMOV     S0,R0
    111            const int nzeros = 2;
    112            const int npoles = 2;
    113            
    114            const float gain_BP = 1.750868303e+00;
    115            const float gain_HF = 1.003560630e+00;
    116            
    117            static float xv_HF[nzeros+1][16], yv_HF[nzeros+1][16];
    118            
    119            static float xv_BP[nzeros+1][16], yv_BP[nzeros+1][16];
    120            
    121            const uint8_t ch_num = 16;
    122            
    123            if(ch >= ch_num)
   \   0000000A   0x2910             CMP      R1,#+16
   \   0000000C   0xDB01             BLT.N    ??Butterworth_Ecg_0
    124            {
    125              return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE09B             B.N      ??Butterworth_Ecg_1
    126            }
    127          
    128            xv_HF[0][ch] = xv_HF[1][ch];
   \                     ??Butterworth_Ecg_0: (+1)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000016   0xEB00 0x0681      ADD      R6,R0,R1, LSL #+2
   \   0000001A   0xF106 0x0240      ADD      R2,R6,#+64
   \   0000001E   0x6813             LDR      R3,[R2, #+0]
   \   00000020   0xF840 0x3021      STR      R3,[R0, R1, LSL #+2]
    129            xv_HF[1][ch] = xv_HF[2][ch];
   \   00000024   0x6C13             LDR      R3,[R2, #+64]
   \   00000026   0x6013             STR      R3,[R2, #+0]
    130            
    131            xv_HF[2][ch] = data / gain_HF;
   \   00000028   0xEEB8 0x8AC0      VCVT.F32.S32 S16,S0
   \   0000002C   0xED9F 0x....      VLDR.W   S0,??DataTable7  ;; 0x3f8074ad
   \   00000030   0xEE88 0x0A00      VDIV.F32 S0,S16,S0
   \   00000034   0xED82 0x0A10      VSTR     S0,[R2, #+64]
    132            
    133            yv_HF[0][ch] = yv_HF[1][ch];
   \   00000038   0xF8D6 0x3100      LDR      R3,[R6, #+256]
   \   0000003C   0xF8C6 0x30C0      STR      R3,[R6, #+192]
    134            yv_HF[1][ch] = yv_HF[2][ch];
   \   00000040   0xF8D6 0x3140      LDR      R3,[R6, #+320]
   \   00000044   0xF8C6 0x3100      STR      R3,[R6, #+256]
    135            
    136            yv_HF[2][ch] =   (xv_HF[0][ch] + xv_HF[2][ch]) - 2 * xv_HF[1][ch]
    137                               + ( -0.9929165937 * yv_HF[0][ch]) + (  1.9928914171 * yv_HF[1][ch]);
   \   00000048   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   0000004C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000050   0xEDD2 0x0A10      VLDR     S1,[R2, #+64]
   \   00000054   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000058   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   0000005C   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   00000060   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000064   0xEE10 0x0A10      VMOV     R0,S0
   \   00000068   0x.... 0x....      BL       __aeabi_f2d
   \   0000006C   0x4604             MOV      R4,R0
   \   0000006E   0x460D             MOV      R5,R1
   \   00000070   0xF8D6 0x00C0      LDR      R0,[R6, #+192]
   \   00000074   0x.... 0x....      BL       __aeabi_f2d
   \   00000078   0x.... 0x....      LDR.W    R2,??DataTable14_7  ;; 0x5331c6c
   \   0000007C   0x.... 0x....      LDR.W    R3,??DataTable14_8  ;; 0xbfefc5f9
   \   00000080   0x.... 0x....      BL       __aeabi_dmul
   \   00000084   0x4622             MOV      R2,R4
   \   00000086   0x462B             MOV      R3,R5
   \   00000088   0x.... 0x....      BL       __aeabi_dadd
   \   0000008C   0x4604             MOV      R4,R0
   \   0000008E   0x460D             MOV      R5,R1
   \   00000090   0xF8D6 0x0100      LDR      R0,[R6, #+256]
   \   00000094   0x.... 0x....      BL       __aeabi_f2d
   \   00000098   0x.... 0x....      LDR.W    R2,??DataTable14_9  ;; 0x1c4ec70c
   \   0000009C   0x.... 0x....      LDR.W    R3,??DataTable14_10  ;; 0x3fffe2e2
   \   000000A0   0x.... 0x....      BL       __aeabi_dmul
   \   000000A4   0x4622             MOV      R2,R4
   \   000000A6   0x462B             MOV      R3,R5
   \   000000A8   0x.... 0x....      BL       __aeabi_dadd
   \   000000AC   0x.... 0x....      BL       __aeabi_d2f
   \   000000B0   0xEE08 0x0A90      VMOV     S17,R0
   \   000000B4   0xEDC6 0x8A50      VSTR     S17,[R6, #+320]
    138            
    139              
    140            
    141            xv_BP[0][ch] = xv_BP[1][ch];
   \   000000B8   0xF506 0x70E0      ADD      R0,R6,#+448
   \   000000BC   0x6801             LDR      R1,[R0, #+0]
   \   000000BE   0xF8C6 0x1180      STR      R1,[R6, #+384]
    142            xv_BP[1][ch] = (float)(data) / gain_BP;
   \   000000C2   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0x3fe01c74
   \   000000C6   0xEE88 0x0A00      VDIV.F32 S0,S16,S0
   \   000000CA   0xED80 0x0A00      VSTR     S0,[R0, #0]
    143            
    144            yv_BP[0][ch] = yv_BP[1][ch];
   \   000000CE   0xF8D6 0x1280      LDR      R1,[R6, #+640]
   \   000000D2   0xF8C6 0x1240      STR      R1,[R6, #+576]
    145            yv_BP[1][ch] = yv_BP[2][ch];
   \   000000D6   0xF8D6 0x12C0      LDR      R1,[R6, #+704]
   \   000000DA   0xF8C6 0x1280      STR      R1,[R6, #+640]
    146            
    147            yv_BP[2][ch] = (xv_BP[2][ch] - xv_BP[0][ch])
    148                               + (  0.0945278312 * yv_BP[0][ch]) + ( -0.7611515380 * yv_BP[1][ch]);
   \   000000DE   0xED90 0x0A10      VLDR     S0,[R0, #+64]
   \   000000E2   0xEDD6 0x0A60      VLDR     S1,[R6, #+384]
   \   000000E6   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   000000EA   0xEE10 0x0A10      VMOV     R0,S0
   \   000000EE   0x.... 0x....      BL       __aeabi_f2d
   \   000000F2   0x4604             MOV      R4,R0
   \   000000F4   0x460D             MOV      R5,R1
   \   000000F6   0xF8D6 0x0240      LDR      R0,[R6, #+576]
   \   000000FA   0x.... 0x....      BL       __aeabi_f2d
   \   000000FE   0x.... 0x....      LDR.W    R2,??DataTable14_11  ;; 0xd790d8d2
   \   00000102   0x.... 0x....      LDR.W    R3,??DataTable14_12  ;; 0x3fb832f9
   \   00000106   0x.... 0x....      BL       __aeabi_dmul
   \   0000010A   0x4622             MOV      R2,R4
   \   0000010C   0x462B             MOV      R3,R5
   \   0000010E   0x.... 0x....      BL       __aeabi_dadd
   \   00000112   0x4604             MOV      R4,R0
   \   00000114   0x460D             MOV      R5,R1
   \   00000116   0xF8D6 0x0280      LDR      R0,[R6, #+640]
   \   0000011A   0x.... 0x....      BL       __aeabi_f2d
   \   0000011E   0x.... 0x....      LDR.W    R2,??DataTable14_13  ;; 0x786052c0
   \   00000122   0x.... 0x....      LDR.W    R3,??DataTable14_14  ;; 0xbfe85b5a
   \   00000126   0x.... 0x....      BL       __aeabi_dmul
   \   0000012A   0x4622             MOV      R2,R4
   \   0000012C   0x462B             MOV      R3,R5
   \   0000012E   0x.... 0x....      BL       __aeabi_dadd
   \   00000132   0x.... 0x....      BL       __aeabi_d2f
   \   00000136   0xEE00 0x0A10      VMOV     S0,R0
   \   0000013A   0xED86 0x0AB0      VSTR     S0,[R6, #+704]
    149            
    150            
    151            
    152            
    153            return yv_BP[2][ch] + yv_HF[2][ch];
   \   0000013E   0xEE30 0x0A28      VADD.F32 S0,S0,S17
   \   00000142   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000146   0xEE10 0x0A10      VMOV     R0,S0
   \                     ??Butterworth_Ecg_1: (+1)
   \   0000014A   0xECBD 0x8B02      VPOP     {D8}
   \   0000014E   0xBD70             POP      {R4-R6,PC}       ;; return
    154          }
    155          
    156          //ECG Bessel HighPass 2-order; 0.2 Hz; 250 SR

   \                                 In section .text, align 4, keep-with-next
    157          int TDSP::Butterworth_Ecg_HF(int data, uint8_t ch)
    158          {
   \                     _ZN4TDSP18Butterworth_Ecg_HFEih: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xEE00 0x0A10      VMOV     S0,R0
    159            const int nzeros = 2;
    160            const int npoles = 2;
    161            const float gain = 1.003560630e+00;
    162            
    163            const uint8_t ch_num = 16;
    164            
    165            static float xv[nzeros+1][16], yv[npoles+1][16];
    166            
    167            if(ch >= ch_num)
   \   00000006   0x2910             CMP      R1,#+16
   \   00000008   0xDB01             BLT.N    ??Butterworth_Ecg_HF_0
    168            {
    169              return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD70             POP      {R4-R6,PC}
    170            }
    171           
    172            xv[0][ch] = xv[1][ch];
   \                     ??Butterworth_Ecg_HF_0: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_15
   \   00000012   0xEB00 0x0681      ADD      R6,R0,R1, LSL #+2
   \   00000016   0xF106 0x0240      ADD      R2,R6,#+64
   \   0000001A   0x6813             LDR      R3,[R2, #+0]
   \   0000001C   0xF840 0x3021      STR      R3,[R0, R1, LSL #+2]
    173            xv[1][ch] = xv[2][ch];
   \   00000020   0x6C13             LDR      R3,[R2, #+64]
   \   00000022   0x6013             STR      R3,[R2, #+0]
    174            
    175            xv[2][ch] = data / gain;
   \   00000024   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000028   0xEDDF 0x....      VLDR.W   S1,??DataTable7  ;; 0x3f8074ad
   \   0000002C   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000030   0xED82 0x0A10      VSTR     S0,[R2, #+64]
    176            
    177            yv[0][ch] = yv[1][ch];
   \   00000034   0xF8D6 0x3100      LDR      R3,[R6, #+256]
   \   00000038   0xF8C6 0x30C0      STR      R3,[R6, #+192]
    178            yv[1][ch] = yv[2][ch];
   \   0000003C   0xF8D6 0x3140      LDR      R3,[R6, #+320]
   \   00000040   0xF8C6 0x3100      STR      R3,[R6, #+256]
    179            
    180            yv[2][ch] =   (xv[0][ch] + xv[2][ch]) - 2 * xv[1][ch]
    181                               + ( -0.9929165937 * yv[0][ch]) + (  1.9928914171 * yv[1][ch]);
   \   00000044   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   00000048   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000004C   0xEDD2 0x0A10      VLDR     S1,[R2, #+64]
   \   00000050   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000054   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000058   0xEEB0 0x1A00      VMOV.F32 S2,#2.0
   \   0000005C   0xEE00 0x0AC1      VMLS.F32 S0,S1,S2
   \   00000060   0xEE10 0x0A10      VMOV     R0,S0
   \   00000064   0x.... 0x....      BL       __aeabi_f2d
   \   00000068   0x4604             MOV      R4,R0
   \   0000006A   0x460D             MOV      R5,R1
   \   0000006C   0xF8D6 0x00C0      LDR      R0,[R6, #+192]
   \   00000070   0x.... 0x....      BL       __aeabi_f2d
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable14_7  ;; 0x5331c6c
   \   00000078   0x.... 0x....      LDR.W    R3,??DataTable14_8  ;; 0xbfefc5f9
   \   0000007C   0x.... 0x....      BL       __aeabi_dmul
   \   00000080   0x4622             MOV      R2,R4
   \   00000082   0x462B             MOV      R3,R5
   \   00000084   0x.... 0x....      BL       __aeabi_dadd
   \   00000088   0x4604             MOV      R4,R0
   \   0000008A   0x460D             MOV      R5,R1
   \   0000008C   0xF8D6 0x0100      LDR      R0,[R6, #+256]
   \   00000090   0x.... 0x....      BL       __aeabi_f2d
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable14_9  ;; 0x1c4ec70c
   \   00000098   0x.... 0x....      LDR.W    R3,??DataTable14_10  ;; 0x3fffe2e2
   \   0000009C   0x.... 0x....      BL       __aeabi_dmul
   \   000000A0   0x4622             MOV      R2,R4
   \   000000A2   0x462B             MOV      R3,R5
   \   000000A4   0x.... 0x....      BL       __aeabi_dadd
   \   000000A8   0x.... 0x....      BL       __aeabi_d2f
   \   000000AC   0xEE00 0x0A10      VMOV     S0,R0
   \   000000B0   0xED86 0x0A50      VSTR     S0,[R6, #+320]
    182            
    183            return yv[2][ch];
   \   000000B4   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000B8   0xEE10 0x0A10      VMOV     R0,S0
   \   000000BC   0xBD70             POP      {R4-R6,PC}       ;; return
    184          }
    185          
    186          /*----------------------------------------------------------------------------*/
    187          /* Фильтр ВЧ, нужен чтобы привести кардиограмму к нулю                        */
    188          /*----------------------------------------------------------------------------*/
    189          /* X_i - вх. сигнал, ch - канал, reset - сброс                                */
    190          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    191          int32_t TDSP::FHigh_0_32_Fixed(int32_t X_i, uint8_t ch, bool Reset, uint8_t ZeroAdduction)
    192          {
   \                     _ZN4TDSP16FHigh_0_32_FixedEihbh: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
    193            const uint8_t ch_num = 16;
    194            static int32_t X_i_1[ch_num], Y_i_1[ch_num];
    195            
    196            if(ch >= ch_num)
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x2D10             CMP      R5,#+16
   \   0000000A   0xDB01             BLT.N    ??FHigh_0_32_Fixed_0
    197            {
    198              return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE04A             B.N      ??FHigh_0_32_Fixed_1
    199            }
    200          
    201            int64_t Y_i;
    202          	int32_t _X_i;
    203          	int32_t d_Y = 0;
   \                     ??FHigh_0_32_Fixed_0: (+1)
   \   00000010   0x2600             MOVS     R6,#+0
    204            int32_t koef = 9991;
   \   00000012   0xF242 0x7007      MOVW     R0,#+9991
    205          
    206            if(Reset)
   \   00000016   0x2A00             CMP      R2,#+0
   \   00000018   0xD008             BEQ.N    ??FHigh_0_32_Fixed_2
    207            {
    208              X_i_1[ch] = 0;
   \   0000001A   0x.... 0x....      LDR.W    R7,??DataTable14_16
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0xF847 0x0025      STR      R0,[R7, R5, LSL #+2]
    209              Y_i_1[ch] = 0;
   \   00000024   0xEB07 0x0185      ADD      R1,R7,R5, LSL #+2
   \   00000028   0x6408             STR      R0,[R1, #+64]
    210              return 0;
   \   0000002A   0xE03C             B.N      ??FHigh_0_32_Fixed_1
    211            }
    212          
    213            // Алгоритм быстрого приведения сигнала к нулю
    214            if( ZeroAdduction == 1 )
   \                     ??FHigh_0_32_Fixed_2: (+1)
   \   0000002C   0x2B01             CMP      R3,#+1
   \   0000002E   0xD10E             BNE.N    ??FHigh_0_32_Fixed_3
    215            {
    216              if(( Y_i_1[ch] > 25000 ) || ( Y_i_1[ch] < -25000 ))
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable14_16
   \   00000034   0xEB01 0x0185      ADD      R1,R1,R5, LSL #+2
   \   00000038   0x6C09             LDR      R1,[R1, #+64]
   \   0000003A   0xF501 0x41C2      ADD      R1,R1,#+24832
   \   0000003E   0x31A8             ADDS     R1,R1,#+168
   \   00000040   0xF24C 0x3251      MOVW     R2,#+50001
   \   00000044   0x4291             CMP      R1,R2
   \   00000046   0xD319             BCC.N    ??FHigh_0_32_Fixed_4
    217              {
    218                koef = 9000L;
   \   00000048   0xF242 0x3028      MOVW     R0,#+9000
   \   0000004C   0xE016             B.N      ??FHigh_0_32_Fixed_4
    219              }
    220            }
    221            else if(ZeroAdduction == 2)
   \                     ??FHigh_0_32_Fixed_3: (+1)
   \   0000004E   0x2B02             CMP      R3,#+2
   \   00000050   0xD102             BNE.N    ??FHigh_0_32_Fixed_5
    222            {
    223              koef = 9000L;
   \   00000052   0xF242 0x3028      MOVW     R0,#+9000
   \   00000056   0xE011             B.N      ??FHigh_0_32_Fixed_4
    224            }
    225            else if( ZeroAdduction == 3 )
   \                     ??FHigh_0_32_Fixed_5: (+1)
   \   00000058   0x2B03             CMP      R3,#+3
   \   0000005A   0xD10F             BNE.N    ??FHigh_0_32_Fixed_4
    226            {
    227              if(Y_i_1[ch] > 25000)
   \   0000005C   0x....             LDR.N    R7,??DataTable14_16
   \   0000005E   0xEB07 0x0885      ADD      R8,R7,R5, LSL #+2
   \   00000062   0xF8D8 0x1040      LDR      R1,[R8, #+64]
   \   00000066   0xF246 0x12A9      MOVW     R2,#+25001
   \   0000006A   0x4291             CMP      R1,R2
   \   0000006C   0xDB01             BLT.N    ??FHigh_0_32_Fixed_6
    228              {
    229                d_Y = -15000;
   \   0000006E   0x....             LDR.N    R6,??DataTable14_17  ;; 0xffffc568
   \   00000070   0xE004             B.N      ??FHigh_0_32_Fixed_4
    230              }
    231              else if(Y_i_1[ch] < -25000)
   \                     ??FHigh_0_32_Fixed_6: (+1)
   \   00000072   0x....             LDR.N    R2,??DataTable14_18  ;; 0xffff9e58
   \   00000074   0x4291             CMP      R1,R2
   \   00000076   0xDA01             BGE.N    ??FHigh_0_32_Fixed_4
    232              {
    233                d_Y = 15000;
   \   00000078   0xF643 0x2698      MOVW     R6,#+15000
    234              }
    235            }
    236          
    237          	_X_i = X_i;
    238          
    239          	Y_i = (int32_t)((int64_t)(koef) * ((int64_t)( Y_i_1[ch] + _X_i - X_i_1[ch] )) / 10000L) + d_Y;		/* чем больше koef, тем точнее сигнал, но медленее выплывает и наоборот */
   \                     ??FHigh_0_32_Fixed_4: (+1)
   \   0000007C   0x....             LDR.N    R7,??DataTable14_16
   \   0000007E   0xEB07 0x0885      ADD      R8,R7,R5, LSL #+2
   \   00000082   0xF8D8 0x1040      LDR      R1,[R8, #+64]
   \   00000086   0x1861             ADDS     R1,R4,R1
   \   00000088   0xF857 0x2025      LDR      R2,[R7, R5, LSL #+2]
   \   0000008C   0x1A89             SUBS     R1,R1,R2
   \   0000008E   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   00000092   0xF242 0x7210      MOVW     R2,#+10000
   \   00000096   0x2300             MOVS     R3,#+0
   \   00000098   0x.... 0x....      BL       __aeabi_ldivmod
   \   0000009C   0x1830             ADDS     R0,R6,R0
    240          	Y_i_1[ch] = Y_i;
   \   0000009E   0xF8C8 0x0040      STR      R0,[R8, #+64]
    241          	X_i_1[ch] = _X_i;
   \   000000A2   0xF847 0x4025      STR      R4,[R7, R5, LSL #+2]
    242          	return (Y_i);
   \                     ??FHigh_0_32_Fixed_1: (+1)
   \   000000A6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    243          }
    244          
    245          /*----------------------------------------------------------------------------------*/
    246          /* Фильтр ВЧ, нужен чтобы привести реограмму к нулю								*/
    247          /*----------------------------------------------------------------------------------*/
    248          /* X_i - вх. сигнал, ch - канал, reset - сброс										*/
    249          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    250          int32_t TDSP::FHigh_0_32_Fixed_Resp( int32_t X_i, bool Reset )
    251          {
   \                     _ZN4TDSP21FHigh_0_32_Fixed_RespEib: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    252          	static int32_t X_i_1, Y_i_1;
    253          	int64_t Y_i;
    254          	static int32_t koef = 9991L;
    255          
    256          	if( Reset ){
   \   00000004   0x....             LDR.N    R5,??DataTable14_19
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD007             BEQ.N    ??FHigh_0_32_Fixed_Resp_0
    257          		X_i_1 = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6028             STR      R0,[R5, #+0]
    258          		Y_i_1 = 0;
   \   0000000E   0x6068             STR      R0,[R5, #+4]
    259          		koef = 9991L;
   \   00000010   0xF242 0x7007      MOVW     R0,#+9991
   \   00000014   0x60A8             STR      R0,[R5, #+8]
    260          		return 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD30             POP      {R4,R5,PC}
    261          	}
    262          
    263          	int32_t _X_i;
    264          
    265          
    266          	_X_i = X_i;
    267          	_X_i = X_i;
    268          
    269          	Y_i = (int64_t) koef * (int64_t)( Y_i_1 + _X_i - X_i_1 );		/* чем больше koef, тем точнее сигнал, но медленее выплывает и наоборот */
    270          	Y_i_1 = Y_i / 10000L;
   \                     ??FHigh_0_32_Fixed_Resp_0: (+1)
   \   0000001A   0x68A8             LDR      R0,[R5, #+8]
   \   0000001C   0x6869             LDR      R1,[R5, #+4]
   \   0000001E   0x1861             ADDS     R1,R4,R1
   \   00000020   0x682A             LDR      R2,[R5, #+0]
   \   00000022   0x1A89             SUBS     R1,R1,R2
   \   00000024   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   00000028   0xF242 0x7210      MOVW     R2,#+10000
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x.... 0x....      BL       __aeabi_ldivmod
   \   00000032   0x6068             STR      R0,[R5, #+4]
    271          	Y_i = Y_i_1;
   \   00000034   0x17C1             ASRS     R1,R0,#+31
    272          	if (Y_i > 2000000) Y_i = 2000000;
   \   00000036   0x....             LDR.N    R2,??DataTable14_20  ;; 0x1e8481
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x4299             CMP      R1,R3
   \   0000003C   0xDB04             BLT.N    ??FHigh_0_32_Fixed_Resp_1
   \   0000003E   0xDC01             BGT.N    ??FHigh_0_32_Fixed_Resp_2
   \   00000040   0x4290             CMP      R0,R2
   \   00000042   0xD301             BCC.N    ??FHigh_0_32_Fixed_Resp_1
   \                     ??FHigh_0_32_Fixed_Resp_2: (+1)
   \   00000044   0x....             LDR.N    R0,??DataTable14_21  ;; 0x1e8480
   \   00000046   0x4619             MOV      R1,R3
    273          	if (Y_i < -2000000) Y_i = -2000000;
   \                     ??FHigh_0_32_Fixed_Resp_1: (+1)
   \   00000048   0x....             LDR.N    R2,??DataTable14_22  ;; 0xffe17b80
   \   0000004A   0xF04F 0x33FF      MOV      R3,#-1
   \   0000004E   0x4299             CMP      R1,R3
   \   00000050   0xDC03             BGT.N    ??FHigh_0_32_Fixed_Resp_3
   \   00000052   0xDB01             BLT.N    ??FHigh_0_32_Fixed_Resp_4
   \   00000054   0x4290             CMP      R0,R2
   \   00000056   0xD200             BCS.N    ??FHigh_0_32_Fixed_Resp_3
   \                     ??FHigh_0_32_Fixed_Resp_4: (+1)
   \   00000058   0x4610             MOV      R0,R2
    274          	X_i_1 = _X_i;
   \                     ??FHigh_0_32_Fixed_Resp_3: (+1)
   \   0000005A   0x602C             STR      R4,[R5, #+0]
    275          	return ( Y_i );
   \   0000005C   0xBD30             POP      {R4,R5,PC}       ;; return
    276          }

   \                                 In section .data, align 4
   \                     ??X_i_1_1:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x00002707         DC32 9991
    277          
    278          
    279          
    280          /*----------------------------------------------------------------------------------*/
    281          /* Усредняющий фильтр для подавления помех											*/
    282          /*----------------------------------------------------------------------------------*/
    283          /* *data - указатель на данные														*/
    284          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    285          void TDSP::FF_Median_HS0(int *data)
    286          {
   \                     _ZN4TDSP13FF_Median_HS0EPi: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    287          	int iA = 0;
    288          	static int iB = 0;
    289          	static int iC = 0;
    290          
    291          	iA = *data;
   \   00000002   0x6801             LDR      R1,[R0, #+0]
    292          
    293          	BYTE eqv = 0;
   \   00000004   0x2200             MOVS     R2,#+0
    294          
    295          	if(iA > iB) eqv |= 0x04;
   \   00000006   0x....             LDR.N    R3,??DataTable14_23
   \   00000008   0x681C             LDR      R4,[R3, #+0]
   \   0000000A   0x428C             CMP      R4,R1
   \   0000000C   0xDA00             BGE.N    ??FF_Median_HS0_0
   \   0000000E   0x2204             MOVS     R2,#+4
    296          	if(iA > iC) eqv |= 0x02;
   \                     ??FF_Median_HS0_0: (+1)
   \   00000010   0x685D             LDR      R5,[R3, #+4]
   \   00000012   0x428D             CMP      R5,R1
   \   00000014   0xDA01             BGE.N    ??FF_Median_HS0_1
   \   00000016   0xF042 0x0202      ORR      R2,R2,#0x2
    297          	if(iB > iC) eqv |= 0x01;
   \                     ??FF_Median_HS0_1: (+1)
   \   0000001A   0x42A5             CMP      R5,R4
   \   0000001C   0xDA01             BGE.N    ??FF_Median_HS0_2
   \   0000001E   0xF042 0x0201      ORR      R2,R2,#0x1
    298          
    299          	if((eqv == 0) || (eqv & 0x07)) *data = iB;
   \                     ??FF_Median_HS0_2: (+1)
   \   00000022   0x2A00             CMP      R2,#+0
   \   00000024   0xD002             BEQ.N    ??FF_Median_HS0_3
   \   00000026   0xF012 0x0607      ANDS     R6,R2,#0x7
   \   0000002A   0xD001             BEQ.N    ??FF_Median_HS0_4
   \                     ??FF_Median_HS0_3: (+1)
   \   0000002C   0x6004             STR      R4,[R0, #+0]
   \   0000002E   0xE000             B.N      ??FF_Median_HS0_5
    300          	else
    301          		if((eqv & 0x01)	|| (eqv & 0x06)) *data = iC;
    302          		else *data = iA;
   \                     ??FF_Median_HS0_4: (+1)
   \   00000030   0x6001             STR      R1,[R0, #+0]
    303          
    304           	iC = iB;
   \                     ??FF_Median_HS0_5: (+1)
   \   00000032   0x605C             STR      R4,[R3, #+4]
    305           	iB = iA;
   \   00000034   0x6019             STR      R1,[R3, #+0]
    306          }
   \   00000036   0xBC70             POP      {R4-R6}
   \   00000038   0x4770             BX       LR               ;; return
    307          
    308          
    309          
    310          /*----------------------------------------------------------------------------------*/
    311          /* Усредняющий фильтр для подавления помех											*/
    312          /*----------------------------------------------------------------------------------*/
    313          /* *data - указатель на данные														*/
    314          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    315          void TDSP::FF_Median_HS1(int *data)
    316          {
   \                     _ZN4TDSP13FF_Median_HS1EPi: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    317          	int iA = 0;
    318          	static int iB = 0;
    319          	static int iC = 0;
    320          
    321          	iA = *data;
   \   00000002   0x6801             LDR      R1,[R0, #+0]
    322          
    323          	BYTE eqv = 0;
   \   00000004   0x2200             MOVS     R2,#+0
    324          
    325          	if(iA > iB) eqv |= 0x04;
   \   00000006   0x....             LDR.N    R3,??DataTable14_24
   \   00000008   0x681C             LDR      R4,[R3, #+0]
   \   0000000A   0x428C             CMP      R4,R1
   \   0000000C   0xDA00             BGE.N    ??FF_Median_HS1_0
   \   0000000E   0x2204             MOVS     R2,#+4
    326          	if(iA > iC) eqv |= 0x02;
   \                     ??FF_Median_HS1_0: (+1)
   \   00000010   0x685D             LDR      R5,[R3, #+4]
   \   00000012   0x428D             CMP      R5,R1
   \   00000014   0xDA01             BGE.N    ??FF_Median_HS1_1
   \   00000016   0xF042 0x0202      ORR      R2,R2,#0x2
    327          	if(iB > iC) eqv |= 0x01;
   \                     ??FF_Median_HS1_1: (+1)
   \   0000001A   0x42A5             CMP      R5,R4
   \   0000001C   0xDA01             BGE.N    ??FF_Median_HS1_2
   \   0000001E   0xF042 0x0201      ORR      R2,R2,#0x1
    328          
    329          	if((eqv == 0) || (eqv & 0x07)) *data = iB;
   \                     ??FF_Median_HS1_2: (+1)
   \   00000022   0x2A00             CMP      R2,#+0
   \   00000024   0xD002             BEQ.N    ??FF_Median_HS1_3
   \   00000026   0xF012 0x0607      ANDS     R6,R2,#0x7
   \   0000002A   0xD001             BEQ.N    ??FF_Median_HS1_4
   \                     ??FF_Median_HS1_3: (+1)
   \   0000002C   0x6004             STR      R4,[R0, #+0]
   \   0000002E   0xE000             B.N      ??FF_Median_HS1_5
    330          	else
    331          		if((eqv & 0x01)	|| (eqv & 0x06)) *data = iC;
    332          		else *data = iA;
   \                     ??FF_Median_HS1_4: (+1)
   \   00000030   0x6001             STR      R1,[R0, #+0]
    333          
    334           	iC = iB;
   \                     ??FF_Median_HS1_5: (+1)
   \   00000032   0x605C             STR      R4,[R3, #+4]
    335           	iB = iA;
   \   00000034   0x6019             STR      R1,[R3, #+0]
    336          }
   \   00000036   0xBC70             POP      {R4-R6}
   \   00000038   0x4770             BX       LR               ;; return
    337          
    338          
    339          
    340          /*----------------------------------------------------------------------------------*/
    341          /* Усредняющий фильтр для подавления помех											*/
    342          /*----------------------------------------------------------------------------------*/
    343          /* *data - указатель на данные														*/
    344          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    345          void TDSP::FF_Median_HS2(int *data)
    346          {
   \                     _ZN4TDSP13FF_Median_HS2EPi: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    347          	int iA = 0;
    348          	static int iB = 0;
    349          	static int iC = 0;
    350          
    351          	iA = *data;
   \   00000002   0x6801             LDR      R1,[R0, #+0]
    352          
    353          	BYTE eqv = 0;
   \   00000004   0x2200             MOVS     R2,#+0
    354          
    355          	if(iA > iB) eqv |= 0x04;
   \   00000006   0x....             LDR.N    R3,??DataTable14_25
   \   00000008   0x681C             LDR      R4,[R3, #+0]
   \   0000000A   0x428C             CMP      R4,R1
   \   0000000C   0xDA00             BGE.N    ??FF_Median_HS2_0
   \   0000000E   0x2204             MOVS     R2,#+4
    356          	if(iA > iC) eqv |= 0x02;
   \                     ??FF_Median_HS2_0: (+1)
   \   00000010   0x685D             LDR      R5,[R3, #+4]
   \   00000012   0x428D             CMP      R5,R1
   \   00000014   0xDA01             BGE.N    ??FF_Median_HS2_1
   \   00000016   0xF042 0x0202      ORR      R2,R2,#0x2
    357          	if(iB > iC) eqv |= 0x01;
   \                     ??FF_Median_HS2_1: (+1)
   \   0000001A   0x42A5             CMP      R5,R4
   \   0000001C   0xDA01             BGE.N    ??FF_Median_HS2_2
   \   0000001E   0xF042 0x0201      ORR      R2,R2,#0x1
    358          
    359          	if((eqv == 0) || (eqv & 0x07)) *data = iB;
   \                     ??FF_Median_HS2_2: (+1)
   \   00000022   0x2A00             CMP      R2,#+0
   \   00000024   0xD002             BEQ.N    ??FF_Median_HS2_3
   \   00000026   0xF012 0x0607      ANDS     R6,R2,#0x7
   \   0000002A   0xD001             BEQ.N    ??FF_Median_HS2_4
   \                     ??FF_Median_HS2_3: (+1)
   \   0000002C   0x6004             STR      R4,[R0, #+0]
   \   0000002E   0xE000             B.N      ??FF_Median_HS2_5
    360          	else
    361          		if((eqv & 0x01)	|| (eqv & 0x06)) *data = iC;
    362          		else *data = iA;
   \                     ??FF_Median_HS2_4: (+1)
   \   00000030   0x6001             STR      R1,[R0, #+0]
    363          
    364           	iC = iB;
   \                     ??FF_Median_HS2_5: (+1)
   \   00000032   0x605C             STR      R4,[R3, #+4]
    365           	iB = iA;
   \   00000034   0x6019             STR      R1,[R3, #+0]
    366          }
   \   00000036   0xBC70             POP      {R4-R6}
   \   00000038   0x4770             BX       LR               ;; return
    367          
    368          
    369          
    370          /*----------------------------------------------------------------------------------*/
    371          /* Фильтр скользящего среднего НЧ													*/
    372          /*----------------------------------------------------------------------------------*/
    373          /* X_i - вх. сигнал, *Mid - среднее значение, если не используется то NULL			*/
    374          /* reset - сброс																	*/
    375          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    376          int TDSP::FFHigh_MA0( int X_i, int *Mid, bool Reset )
    377          {
   \                     _ZN4TDSP10FFHigh_MA0EiPib: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    378          	static int ACC;
    379          	static int ACCAddIndx;
    380          	static int HP_Ch_A_Indx;
    381          	int Y_i;
    382          
    383          	int HP_A_Indx = (0 * N_MA_HP) + HP_Ch_A_Indx;
   \   00000002   0x....             LDR.N    R4,??DataTable14_26
   \   00000004   0xF504 0x6300      ADD      R3,R4,#+2048
   \   00000008   0x689D             LDR      R5,[R3, #+8]
   \   0000000A   0x462E             MOV      R6,R5
    384          
    385          	if( Reset ){
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD004             BEQ.N    ??FFHigh_MA0_0
    386          		ACC = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x6018             STR      R0,[R3, #+0]
    387          		ACCAddIndx = 0;
   \   00000014   0x6058             STR      R0,[R3, #+4]
    388          		HP_Ch_A_Indx = 0;
   \   00000016   0x6098             STR      R0,[R3, #+8]
    389          		return 0;
   \   00000018   0xE035             B.N      ??FFHigh_MA0_1
    390          	}
    391          	if( ACCAddIndx < N_MA_HP ){
   \                     ??FFHigh_MA0_0: (+1)
   \   0000001A   0x681A             LDR      R2,[R3, #+0]
   \   0000001C   0x1882             ADDS     R2,R0,R2
   \   0000001E   0x685F             LDR      R7,[R3, #+4]
   \   00000020   0xF5B7 0x7F00      CMP      R7,#+512
   \   00000024   0xDA0C             BGE.N    ??FFHigh_MA0_2
    392          		ACC += X_i;
   \   00000026   0x601A             STR      R2,[R3, #+0]
    393          		MA_HP_Arr0[HP_A_Indx] = X_i;
   \   00000028   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    394          		HP_Ch_A_Indx++;
   \   0000002C   0x1C69             ADDS     R1,R5,#+1
   \   0000002E   0x6099             STR      R1,[R3, #+8]
    395          		if(HP_Ch_A_Indx >= N_MA_HP)
   \   00000030   0xF5B1 0x7F00      CMP      R1,#+512
   \   00000034   0xDB01             BLT.N    ??FFHigh_MA0_3
    396          			HP_Ch_A_Indx = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6099             STR      R1,[R3, #+8]
    397          
    398          		ACCAddIndx++;
   \                     ??FFHigh_MA0_3: (+1)
   \   0000003A   0x1C79             ADDS     R1,R7,#+1
   \   0000003C   0x6059             STR      R1,[R3, #+4]
    399          		return X_i;
   \   0000003E   0xE022             B.N      ??FFHigh_MA0_1
    400          	}
    401          	else {
    402          		ACC = ACC + X_i - MA_HP_Arr0[HP_A_Indx];
   \                     ??FFHigh_MA0_2: (+1)
   \   00000040   0xF854 0x7026      LDR      R7,[R4, R6, LSL #+2]
   \   00000044   0x1BD7             SUBS     R7,R2,R7
   \   00000046   0x601F             STR      R7,[R3, #+0]
    403          
    404          		int X_i_m64 = HP_A_Indx + (N_MA_HP/2);
   \   00000048   0xF506 0x7280      ADD      R2,R6,#+256
    405          		if(X_i_m64 >= N_MA_HP)
   \   0000004C   0xF5B2 0x7F00      CMP      R2,#+512
   \   00000050   0xDB01             BLT.N    ??FFHigh_MA0_4
    406          			X_i_m64 = X_i_m64 - N_MA_HP;
   \   00000052   0xF5A2 0x7200      SUB      R2,R2,#+512
    407          
    408          //		Y_i = X_i - (ACC / N_MA_HP);
    409          		Y_i = MA_HP_Arr0[X_i_m64] - (ACC / N_MA_HP);
   \                     ??FFHigh_MA0_4: (+1)
   \   00000056   0xEA4F 0x2C27      ASR      R12,R7,#+8
   \   0000005A   0xEB07 0x5CDC      ADD      R12,R7,R12, LSR #+23
   \   0000005E   0xEA4F 0x2C6C      ASR      R12,R12,#+9
   \   00000062   0xF854 0x2022      LDR      R2,[R4, R2, LSL #+2]
   \   00000066   0xEBA2 0x020C      SUB      R2,R2,R12
    410          		if(Mid != NULL)
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD001             BEQ.N    ??FFHigh_MA0_5
    411          			*Mid = (ACC / N_MA_HP);
   \   0000006E   0xF8C1 0xC000      STR      R12,[R1, #+0]
    412          
    413          		MA_HP_Arr0[HP_A_Indx] = X_i;
   \                     ??FFHigh_MA0_5: (+1)
   \   00000072   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    414          		HP_Ch_A_Indx++;
   \   00000076   0x1C69             ADDS     R1,R5,#+1
   \   00000078   0x6099             STR      R1,[R3, #+8]
    415          		if(HP_Ch_A_Indx >= N_MA_HP)
   \   0000007A   0xF5B1 0x7F00      CMP      R1,#+512
   \   0000007E   0xDB01             BLT.N    ??FFHigh_MA0_6
    416          			HP_Ch_A_Indx = 0;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x6098             STR      R0,[R3, #+8]
    417          	}
    418          	return Y_i;
   \                     ??FFHigh_MA0_6: (+1)
   \   00000084   0x4610             MOV      R0,R2
   \                     ??FFHigh_MA0_1: (+1)
   \   00000086   0xBCF0             POP      {R4-R7}
   \   00000088   0x4770             BX       LR               ;; return
    419          }

   \                                 In section .bss, align 4
   \                     _ZN4TDSP10MA_HP_Arr0E:
   \   00000000                      DS8 2048
   \   00000800                      DS8 4
   \   00000804                      DS8 4
   \   00000808                      DS8 4
    420          
    421          
    422          
    423          /*----------------------------------------------------------------------------------*/
    424          /* Фильтр скользящего среднего НЧ													*/
    425          /*----------------------------------------------------------------------------------*/
    426          /* X_i - вх. сигнал, *Mid - среднее значение, если не используется то NULL			*/
    427          /* reset - сброс																	*/
    428          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    429          int TDSP::FFHigh_MA1( int X_i, int *Mid, bool Reset )
    430          {
   \                     _ZN4TDSP10FFHigh_MA1EiPib: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    431          	static int ACC;
    432          	static int ACCAddIndx;
    433          	static int HP_Ch_A_Indx;
    434          	int Y_i;
    435          
    436          	int HP_A_Indx = (0 * N_MA_HP) + HP_Ch_A_Indx;
   \   00000002   0x....             LDR.N    R4,??DataTable14_27
   \   00000004   0xF504 0x6300      ADD      R3,R4,#+2048
   \   00000008   0x689D             LDR      R5,[R3, #+8]
   \   0000000A   0x462E             MOV      R6,R5
    437          
    438          	if(Reset)
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD004             BEQ.N    ??FFHigh_MA1_0
    439          	{
    440          		ACC = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x6018             STR      R0,[R3, #+0]
    441          		ACCAddIndx = 0;
   \   00000014   0x6058             STR      R0,[R3, #+4]
    442          		HP_Ch_A_Indx = 0;
   \   00000016   0x6098             STR      R0,[R3, #+8]
    443          		return 0;
   \   00000018   0xE035             B.N      ??FFHigh_MA1_1
    444          	}
    445          	if(ACCAddIndx < N_MA_HP)
   \                     ??FFHigh_MA1_0: (+1)
   \   0000001A   0x681A             LDR      R2,[R3, #+0]
   \   0000001C   0x1882             ADDS     R2,R0,R2
   \   0000001E   0x685F             LDR      R7,[R3, #+4]
   \   00000020   0xF5B7 0x7F00      CMP      R7,#+512
   \   00000024   0xDA0C             BGE.N    ??FFHigh_MA1_2
    446          	{
    447          		ACC += X_i;
   \   00000026   0x601A             STR      R2,[R3, #+0]
    448          		MA_HP_Arr1[HP_A_Indx] = X_i;
   \   00000028   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    449          		HP_Ch_A_Indx++;
   \   0000002C   0x1C69             ADDS     R1,R5,#+1
   \   0000002E   0x6099             STR      R1,[R3, #+8]
    450          		if(HP_Ch_A_Indx >= N_MA_HP)
   \   00000030   0xF5B1 0x7F00      CMP      R1,#+512
   \   00000034   0xDB01             BLT.N    ??FFHigh_MA1_3
    451          			HP_Ch_A_Indx = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6099             STR      R1,[R3, #+8]
    452          
    453          		ACCAddIndx++;
   \                     ??FFHigh_MA1_3: (+1)
   \   0000003A   0x1C79             ADDS     R1,R7,#+1
   \   0000003C   0x6059             STR      R1,[R3, #+4]
    454          		return X_i;
   \   0000003E   0xE022             B.N      ??FFHigh_MA1_1
    455          	}
    456          	else
    457          	{
    458          		ACC = ACC + X_i - MA_HP_Arr1[HP_A_Indx];
   \                     ??FFHigh_MA1_2: (+1)
   \   00000040   0xF854 0x7026      LDR      R7,[R4, R6, LSL #+2]
   \   00000044   0x1BD7             SUBS     R7,R2,R7
   \   00000046   0x601F             STR      R7,[R3, #+0]
    459          
    460          		int X_i_m64 = HP_A_Indx + (N_MA_HP/2);
   \   00000048   0xF506 0x7280      ADD      R2,R6,#+256
    461          		if(X_i_m64 >= N_MA_HP)
   \   0000004C   0xF5B2 0x7F00      CMP      R2,#+512
   \   00000050   0xDB01             BLT.N    ??FFHigh_MA1_4
    462          			X_i_m64 = X_i_m64 - N_MA_HP;
   \   00000052   0xF5A2 0x7200      SUB      R2,R2,#+512
    463          
    464          //		Y_i = X_i - (ACC / N_MA_HP);
    465          		Y_i = MA_HP_Arr1[X_i_m64] - (ACC / N_MA_HP);
   \                     ??FFHigh_MA1_4: (+1)
   \   00000056   0xEA4F 0x2C27      ASR      R12,R7,#+8
   \   0000005A   0xEB07 0x5CDC      ADD      R12,R7,R12, LSR #+23
   \   0000005E   0xEA4F 0x2C6C      ASR      R12,R12,#+9
   \   00000062   0xF854 0x2022      LDR      R2,[R4, R2, LSL #+2]
   \   00000066   0xEBA2 0x020C      SUB      R2,R2,R12
    466          		if(Mid != NULL)
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD001             BEQ.N    ??FFHigh_MA1_5
    467          			*Mid = (ACC / N_MA_HP);
   \   0000006E   0xF8C1 0xC000      STR      R12,[R1, #+0]
    468          
    469          		MA_HP_Arr1[HP_A_Indx] = X_i;
   \                     ??FFHigh_MA1_5: (+1)
   \   00000072   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    470          		HP_Ch_A_Indx++;
   \   00000076   0x1C69             ADDS     R1,R5,#+1
   \   00000078   0x6099             STR      R1,[R3, #+8]
    471          		if(HP_Ch_A_Indx >= N_MA_HP)
   \   0000007A   0xF5B1 0x7F00      CMP      R1,#+512
   \   0000007E   0xDB01             BLT.N    ??FFHigh_MA1_6
    472          			HP_Ch_A_Indx = 0;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x6098             STR      R0,[R3, #+8]
    473          	}
    474          	return Y_i;
   \                     ??FFHigh_MA1_6: (+1)
   \   00000084   0x4610             MOV      R0,R2
   \                     ??FFHigh_MA1_1: (+1)
   \   00000086   0xBCF0             POP      {R4-R7}
   \   00000088   0x4770             BX       LR               ;; return
    475          }

   \                                 In section .bss, align 4
   \                     _ZN4TDSP10MA_HP_Arr1E:
   \   00000000                      DS8 2048
   \   00000800                      DS8 4
   \   00000804                      DS8 4
   \   00000808                      DS8 4
    476          
    477          
    478          
    479          /*----------------------------------------------------------------------------------*/
    480          /* Фильтр скользящего среднего НЧ													*/
    481          /*----------------------------------------------------------------------------------*/
    482          /* X_i - вх. сигнал, *Mid - среднее значение, если не используется то NULL			*/
    483          /* reset - сброс																	*/
    484          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    485          int TDSP::FFHigh_MA2( int X_i, int *Mid, bool Reset )
    486          {
   \                     _ZN4TDSP10FFHigh_MA2EiPib: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    487          	static int ACC;
    488          	static int ACCAddIndx;
    489          	static int HP_Ch_A_Indx;
    490          	int Y_i;
    491          
    492          	int HP_A_Indx = (0 * N_MA_HP) + HP_Ch_A_Indx;
   \   00000002   0x....             LDR.N    R4,??DataTable14_28
   \   00000004   0xF504 0x6300      ADD      R3,R4,#+2048
   \   00000008   0x689D             LDR      R5,[R3, #+8]
   \   0000000A   0x462E             MOV      R6,R5
    493          
    494          	if(Reset)
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD004             BEQ.N    ??FFHigh_MA2_0
    495          	{
    496          		ACC = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x6018             STR      R0,[R3, #+0]
    497          		ACCAddIndx = 0;
   \   00000014   0x6058             STR      R0,[R3, #+4]
    498          		HP_Ch_A_Indx = 0;
   \   00000016   0x6098             STR      R0,[R3, #+8]
    499          		return 0;
   \   00000018   0xE035             B.N      ??FFHigh_MA2_1
    500          	}
    501          	if(ACCAddIndx < N_MA_HP)
   \                     ??FFHigh_MA2_0: (+1)
   \   0000001A   0x681A             LDR      R2,[R3, #+0]
   \   0000001C   0x1882             ADDS     R2,R0,R2
   \   0000001E   0x685F             LDR      R7,[R3, #+4]
   \   00000020   0xF5B7 0x7F00      CMP      R7,#+512
   \   00000024   0xDA0C             BGE.N    ??FFHigh_MA2_2
    502          	{
    503          		ACC += X_i;
   \   00000026   0x601A             STR      R2,[R3, #+0]
    504          		MA_HP_Arr2[HP_A_Indx] = X_i;
   \   00000028   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    505          		HP_Ch_A_Indx++;
   \   0000002C   0x1C69             ADDS     R1,R5,#+1
   \   0000002E   0x6099             STR      R1,[R3, #+8]
    506          		if(HP_Ch_A_Indx >= N_MA_HP)
   \   00000030   0xF5B1 0x7F00      CMP      R1,#+512
   \   00000034   0xDB01             BLT.N    ??FFHigh_MA2_3
    507          			HP_Ch_A_Indx = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6099             STR      R1,[R3, #+8]
    508          
    509          		ACCAddIndx++;
   \                     ??FFHigh_MA2_3: (+1)
   \   0000003A   0x1C79             ADDS     R1,R7,#+1
   \   0000003C   0x6059             STR      R1,[R3, #+4]
    510          		return X_i;
   \   0000003E   0xE022             B.N      ??FFHigh_MA2_1
    511          	}
    512          	else
    513          	{
    514          		ACC = ACC + X_i - MA_HP_Arr2[HP_A_Indx];
   \                     ??FFHigh_MA2_2: (+1)
   \   00000040   0xF854 0x7026      LDR      R7,[R4, R6, LSL #+2]
   \   00000044   0x1BD7             SUBS     R7,R2,R7
   \   00000046   0x601F             STR      R7,[R3, #+0]
    515          
    516          		int X_i_m64 = HP_A_Indx + (N_MA_HP/2);
   \   00000048   0xF506 0x7280      ADD      R2,R6,#+256
    517          		if(X_i_m64 >= N_MA_HP)
   \   0000004C   0xF5B2 0x7F00      CMP      R2,#+512
   \   00000050   0xDB01             BLT.N    ??FFHigh_MA2_4
    518          			X_i_m64 = X_i_m64 - N_MA_HP;
   \   00000052   0xF5A2 0x7200      SUB      R2,R2,#+512
    519          
    520          //		Y_i = X_i - (ACC / N_MA_HP);
    521          		Y_i = MA_HP_Arr2[X_i_m64] - (ACC / N_MA_HP);
   \                     ??FFHigh_MA2_4: (+1)
   \   00000056   0xEA4F 0x2C27      ASR      R12,R7,#+8
   \   0000005A   0xEB07 0x5CDC      ADD      R12,R7,R12, LSR #+23
   \   0000005E   0xEA4F 0x2C6C      ASR      R12,R12,#+9
   \   00000062   0xF854 0x2022      LDR      R2,[R4, R2, LSL #+2]
   \   00000066   0xEBA2 0x020C      SUB      R2,R2,R12
    522          		if(Mid != NULL)
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD001             BEQ.N    ??FFHigh_MA2_5
    523          			*Mid = (ACC / N_MA_HP);
   \   0000006E   0xF8C1 0xC000      STR      R12,[R1, #+0]
    524          
    525          		MA_HP_Arr2[HP_A_Indx] = X_i;
   \                     ??FFHigh_MA2_5: (+1)
   \   00000072   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
    526          		HP_Ch_A_Indx++;
   \   00000076   0x1C69             ADDS     R1,R5,#+1
   \   00000078   0x6099             STR      R1,[R3, #+8]
    527          		if(HP_Ch_A_Indx >= N_MA_HP)
   \   0000007A   0xF5B1 0x7F00      CMP      R1,#+512
   \   0000007E   0xDB01             BLT.N    ??FFHigh_MA2_6
    528          			HP_Ch_A_Indx = 0;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x6098             STR      R0,[R3, #+8]
    529          	}
    530          	return Y_i;
   \                     ??FFHigh_MA2_6: (+1)
   \   00000084   0x4610             MOV      R0,R2
   \                     ??FFHigh_MA2_1: (+1)
   \   00000086   0xBCF0             POP      {R4-R7}
   \   00000088   0x4770             BX       LR               ;; return
    531          }

   \                                 In section .bss, align 4
   \                     _ZN4TDSP10MA_HP_Arr2E:
   \   00000000                      DS8 2048
   \   00000800                      DS8 4
   \   00000804                      DS8 4
   \   00000808                      DS8 4

   \                                 In section .bss, align 4
   \                     xval:
   \   00000000                      DS8 48

   \                                 In section .bss, align 8
   \                     ??x:
   \   00000000                      DS8 40
   \   00000028                      DS8 40

   \                                 In section .bss, align 4
   \                     ??xv:
   \   00000000                      DS8 128
   \   00000080                      DS8 128

   \                                 In section .bss, align 4
   \                     ??xv_HF:
   \   00000000                      DS8 192
   \   000000C0                      DS8 192
   \   00000180                      DS8 192
   \   00000240                      DS8 192

   \                                 In section .bss, align 4
   \                     ??xv_1:
   \   00000000                      DS8 192
   \   000000C0                      DS8 192

   \                                 In section .bss, align 4
   \                     ??X_i_1:
   \   00000000                      DS8 64
   \   00000040                      DS8 64

   \                                 In section .bss, align 4
   \                     ??iB:
   \   00000000                      DS8 4
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
   \                     ??iB_1:
   \   00000000                      DS8 4
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
   \                     ??iB_2:
   \   00000000                      DS8 4
   \   00000004                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x3BDB8BAC         DC32     0x3bdb8bac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x3CC7E282         DC32     0x3cc7e282

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x3D690FF9         DC32     0x3d690ff9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x3DCD013B         DC32     0x3dcd013b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x3E11D14E         DC32     0x3e11d14e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x3E2CD9E8         DC32     0x3e2cd9e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x45FA0001         DC32     0x45fa0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xC5FA0000         DC32     0xc5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x00000000         DC32     0x0,0x40DF4000
   \              0x40DF4000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40827C62         DC32     0x40827c62

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xBF027043         DC32     0xbf027043

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x3F8074AD         DC32     0x3f8074ad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x00000000         DC32     0x0,0xC0DF4000
   \              0xC0DF4000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x40066666         DC32     0x40066666

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x3FE01C74         DC32     0x3fe01c74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     xval

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     ??x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x40100000         DC32     0x40100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x40DF4000         DC32     0x40df4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0xC0DF4000         DC32     0xc0df4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     ??xv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     ??xv_HF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x05331C6C         DC32     0x5331c6c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0xBFEFC5F9         DC32     0xbfefc5f9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x1C4EC70C         DC32     0x1c4ec70c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x3FFFE2E2         DC32     0x3fffe2e2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0xD790D8D2         DC32     0xd790d8d2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x3FB832F9         DC32     0x3fb832f9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x786052C0         DC32     0x786052c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0xBFE85B5A         DC32     0xbfe85b5a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     ??xv_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     ??X_i_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0xFFFFC568         DC32     0xffffc568

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0xFFFF9E58         DC32     0xffff9e58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     ??X_i_1_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x001E8481         DC32     0x1e8481

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x001E8480         DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0xFFE17B80         DC32     0xffe17b80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x........         DC32     ??iB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x........         DC32     ??iB_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x........         DC32     ??iB_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x........         DC32     _ZN4TDSP10MA_HP_Arr0E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x........         DC32     _ZN4TDSP10MA_HP_Arr1E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x........         DC32     _ZN4TDSP10MA_HP_Arr2E
    532          
    533          
    534          
    535          /*----------------------------------------------------------------------------------*/
    536          /* Фильтр скользящего среднего НЧ, жёсткий для ЧСС									*/
    537          /*----------------------------------------------------------------------------------*/
    538          /* X_i - вх. сигнал, *Mid - среднее значение, если не используется то NULL			*/
    539          /* reset - сброс																	*/
    540          /*----------------------------------------------------------------------------------*/
    541          //int TDSP::FFHigh_MA3( int X_i, int *Mid, bool Reset )
    542          //{
    543          //	static int ACC;
    544          //	static int ACCAddIndx;
    545          //	static int HP_Ch_A_Indx;
    546          //	int Y_i;
    547          //
    548          //	int HP_A_Indx = (0 * N_MA_HP_2H) + HP_Ch_A_Indx;
    549          //
    550          //	if(Reset)
    551          //	{
    552          //		ACC = 0;
    553          //		ACCAddIndx = 0;
    554          //		HP_Ch_A_Indx = 0;
    555          //		return 0;
    556          //	}
    557          //	if(ACCAddIndx < N_MA_HP_2H)
    558          //	{
    559          //		ACC += X_i;
    560          //		MA_HP_Arr3[HP_A_Indx] = X_i;
    561          //		HP_Ch_A_Indx++;
    562          //		if(HP_Ch_A_Indx >= N_MA_HP_2H)
    563          //			HP_Ch_A_Indx = 0;
    564          //
    565          //		ACCAddIndx++;
    566          //		return X_i;
    567          //	}
    568          //	else
    569          //	{
    570          //		ACC = ACC + X_i - MA_HP_Arr3[HP_A_Indx];
    571          //
    572          //		int X_i_m64 = HP_A_Indx + (N_MA_HP_2H/2);
    573          //		if(X_i_m64 >= N_MA_HP_2H)
    574          //			X_i_m64 = X_i_m64 - N_MA_HP_2H;
    575          //
    576          ////		Y_i = X_i - (ACC / N_MA_HP_2H);
    577          //		Y_i = MA_HP_Arr3[X_i_m64] - (ACC / N_MA_HP_2H);
    578          //		if(Mid != NULL)
    579          //			*Mid = (ACC / N_MA_HP_2H);
    580          //
    581          //		MA_HP_Arr3[HP_A_Indx] = X_i;
    582          //		HP_Ch_A_Indx++;
    583          //		if(HP_Ch_A_Indx >= N_MA_HP_2H)
    584          //			HP_Ch_A_Indx = 0;
    585          //	}
    586          //	return Y_i;
    587          //}

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   TDSP::Butterworth_Ecg(int32_t, uint8_t)
        24   -> __aeabi_d2f
        24   -> __aeabi_dadd
        24   -> __aeabi_dmul
        24   -> __aeabi_f2d
      16   TDSP::Butterworth_Ecg_HF(int, uint8_t)
        16   -> __aeabi_d2f
        16   -> __aeabi_dadd
        16   -> __aeabi_dmul
        16   -> __aeabi_f2d
      16   TDSP::FFHigh_MA0(int, int *, bool)
      16   TDSP::FFHigh_MA1(int, int *, bool)
      16   TDSP::FFHigh_MA2(int, int *, bool)
       4   TDSP::FF_Butterworth_HF(int32_t, uint8_t)
       0   TDSP::FF_LP_12(int)
      12   TDSP::FF_Median_HS0(int *)
      12   TDSP::FF_Median_HS1(int *)
      12   TDSP::FF_Median_HS2(int *)
      24   TDSP::FHigh_0_32_Fixed(int32_t, uint8_t, bool, uint8_t)
        24 __aeabi_ldivmod
      12   TDSP::FHigh_0_32_Fixed_Resp(int32_t, bool)
        12 __aeabi_ldivmod
     120   TDSP::RFF_LP_12(int)
       120   -> __aeabi_d2iz
       120   -> __aeabi_dadd
       120   -> __aeabi_ddiv
       120   -> __aeabi_dmul
       120   -> __aeabi_dsub
       120   -> __aeabi_i2d
       120   -> __aeabi_memcpy4
       120 __aeabi_cdcmple
       120 __aeabi_cdrcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable5
       8  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable7
       8  ??DataTable7_1
       4  ??DataTable8
      40  ?_0
      40  ?_1
     336  TDSP::Butterworth_Ecg(int32_t, uint8_t)
     190  TDSP::Butterworth_Ecg_HF(int, uint8_t)
     138  TDSP::FFHigh_MA0(int, int *, bool)
     138  TDSP::FFHigh_MA1(int, int *, bool)
     138  TDSP::FFHigh_MA2(int, int *, bool)
     100  TDSP::FF_Butterworth_HF(int32_t, uint8_t)
     216  TDSP::FF_LP_12(int)
      58  TDSP::FF_Median_HS0(int *)
      58  TDSP::FF_Median_HS1(int *)
      58  TDSP::FF_Median_HS2(int *)
     170  TDSP::FHigh_0_32_Fixed(int32_t, uint8_t, bool, uint8_t)
      94  TDSP::FHigh_0_32_Fixed_Resp(int32_t, bool)
    2060  TDSP::MA_HP_Arr0
          ACC
          ACCAddIndx
          HP_Ch_A_Indx
    2060  TDSP::MA_HP_Arr1
          ACC
          ACCAddIndx
          HP_Ch_A_Indx
    2060  TDSP::MA_HP_Arr2
          ACC
          ACCAddIndx
          HP_Ch_A_Indx
     260  TDSP::RFF_LP_12(int)
     128  X_i_1
          Y_i_1
      12  X_i_1
          Y_i_1
          koef
       8  iB
          iC
       8  iB
          iC
       8  iB
          iC
      80  x
          y
     256  xv
          yv
     384  xv
          yv
     768  xv_HF
          yv_HF
          xv_BP
          yv_BP
      48  xval

 
 7 868 bytes in section .bss
    12 bytes in section .data
 2 222 bytes in section .text
 
 2 222 bytes of CODE memory
 7 880 bytes of DATA memory

Errors: none
Warnings: 3

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        17/Oct/2018  09:50:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\MemMang\heap_2.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\MemMang\heap_2.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\heap_2.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\heap_2.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\MemMang\heap_2.c
      1          /*
      2              FreeRTOS V7.1.1 - Copyright (C) 2012 Real Time Engineers Ltd.
      3          	
      4          
      5              ***************************************************************************
      6               *                                                                       *
      7               *    FreeRTOS tutorial books are available in pdf and paperback.        *
      8               *    Complete, revised, and edited pdf reference manuals are also       *
      9               *    available.                                                         *
     10               *                                                                       *
     11               *    Purchasing FreeRTOS documentation will not only help you, by       *
     12               *    ensuring you get running as quickly as possible and with an        *
     13               *    in-depth knowledge of how to use FreeRTOS, it will also help       *
     14               *    the FreeRTOS project to continue with its mission of providing     *
     15               *    professional grade, cross platform, de facto standard solutions    *
     16               *    for microcontrollers - completely free of charge!                  *
     17               *                                                                       *
     18               *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
     19               *                                                                       *
     20               *    Thank you for using FreeRTOS, and thank you for your support!      *
     21               *                                                                       *
     22              ***************************************************************************
     23          
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              >>>NOTE<<< The modification to the GPL is included to allow you to
     31              distribute a combined work that includes FreeRTOS without being obliged to
     32              provide the source code for proprietary components outside of the FreeRTOS
     33              kernel.  FreeRTOS is distributed in the hope that it will be useful, but
     34              WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     35              or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43              
     44              ***************************************************************************
     45               *                                                                       *
     46               *    Having a problem?  Start by reading the FAQ "My application does   *
     47               *    not run, what could be wrong?                                      *
     48               *                                                                       *
     49               *    http://www.FreeRTOS.org/FAQHelp.html                               *
     50               *                                                                       *
     51              ***************************************************************************
     52          
     53              
     54              http://www.FreeRTOS.org - Documentation, training, latest information, 
     55              license and contact details.
     56              
     57              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     58              including FreeRTOS+Trace - an indispensable productivity tool.
     59          
     60              Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
     61              the code with commercial support, indemnification, and middleware, under 
     62              the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
     63              provide a safety engineered and independently SIL3 certified version under 
     64              the SafeRTOS brand: http://www.SafeRTOS.com.
     65          */
     66          
     67          /*
     68           * A sample implementation of pvPortMalloc() and vPortFree() that permits
     69           * allocated blocks to be freed, but does not combine adjacent free blocks
     70           * into a single larger block.
     71           *
     72           * See heap_1.c and heap_3.c for alternative implementations, and the memory
     73           * management pages of http://www.FreeRTOS.org for more information.
     74           */
     75          #include <stdlib.h>
     76          
     77          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
     78          all the API functions to use the MPU wrappers.  That should only be done when
     79          task.h is included from an application file. */
     80          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     81          
     82          #include "FreeRTOS.h"
     83          #include "task.h"
     84          
     85          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     86          
     87          /* Allocate the memory for the heap.  The struct is used to force byte
     88          alignment without using any non-portable code. */
     89          #pragma location=".ccm"
     90          static union xRTOS_HEAP
     91          {
     92          	#if portBYTE_ALIGNMENT == 8
     93          		volatile portDOUBLE dDummy;
     94          	#else
     95          		volatile unsigned long ulDummy;
     96          	#endif
     97          	unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];

   \                                 In section .ccm, align 8
     98          } xHeap;
   \                     xHeap:
   \   00000000                      DS8 22528
     99          
    100          /* Define the linked list structure.  This is used to link free blocks in order
    101          of their size. */
    102          typedef struct A_BLOCK_LINK
    103          {
    104          	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
    105          	size_t xBlockSize;						/*<< The size of the free block. */
    106          } xBlockLink;
    107          
    108          
    109          static const unsigned short  heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
    110          #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
    111          
    112          /* Create a couple of list links to mark the start and end of the list. */
    113          static xBlockLink xStart, xEnd;
    114          
    115          /* Keeps track of the number of free bytes remaining, but says nothing about
    116          fragmentation. */
    117          static size_t xFreeBytesRemaining = configTOTAL_HEAP_SIZE;
    118          
    119          /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
    120          
    121          /*
    122           * Insert a block into the list of free blocks - which is ordered by size of
    123           * the block.  Small blocks at the start of the list and large blocks at the end
    124           * of the list.
    125           */
    126          #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
    127          {																					\
    128          xBlockLink *pxIterator;																\
    129          size_t xBlockSize;																	\
    130          																					\
    131          	xBlockSize = pxBlockToInsert->xBlockSize;										\
    132          																					\
    133          	/* Iterate through the list until a block is found that has a larger size */	\
    134          	/* than the block we are inserting. */											\
    135          	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIterator->pxNextFreeBlock )	\
    136          	{																				\
    137          		/* There is nothing to do here - just iterate to the correct position. */	\
    138          	}																				\
    139          																					\
    140          	/* Update the list to include the block being inserted in the correct */		\
    141          	/* position. */																	\
    142          	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
    143          	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
    144          }
    145          /*-----------------------------------------------------------*/
    146          
    147          #define prvHeapInit()																\
    148          {																					\
    149          xBlockLink *pxFirstFreeBlock;														\
    150          																					\
    151          	/* xStart is used to hold a pointer to the first item in the list of free */	\
    152          	/* blocks.  The void cast is used to prevent compiler warnings. */				\
    153          	xStart.pxNextFreeBlock = ( A_BLOCK_LINK * ) xHeap.ucHeap;								\
    154          	xStart.xBlockSize = ( size_t ) 0;												\
    155          																					\
    156          	/* xEnd is used to mark the end of the list of free blocks. */					\
    157          	xEnd.xBlockSize = configTOTAL_HEAP_SIZE;										\
    158          	xEnd.pxNextFreeBlock = NULL;													\
    159          																					\
    160          	/* To start with there is a single free block that is sized to take up the		\
    161          	entire heap space. */															\
    162          	pxFirstFreeBlock = ( xBlockLink * ) xHeap.ucHeap;										\
    163          	pxFirstFreeBlock->xBlockSize = configTOTAL_HEAP_SIZE;							\
    164          	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
    165          }
    166          /*-----------------------------------------------------------*/
    167          

   \                                 In section .text, align 2, keep-with-next
    168          void *pvPortMalloc( size_t xWantedSize )
    169          {
   \                     pvPortMalloc: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    170          xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
    171          static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
    172          void *pvReturn = NULL;
   \   00000004   0x2500             MOVS     R5,#+0
    173          
    174          	vTaskSuspendAll();
   \   00000006   0x.... 0x....      BL       vTaskSuspendAll
    175          	{
    176          		/* If this is the first call to malloc then the heap will require
    177          		initialisation to setup the list of free blocks. */
    178          		if( xHeapHasBeenInitialised == pdFALSE )
   \   0000000A   0x....             LDR.N    R0,??DataTable2
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD10E             BNE.N    ??pvPortMalloc_0
    179          		{
    180          			prvHeapInit();
   \   00000012   0x....             LDR.N    R1,??DataTable2_1
   \   00000014   0x6001             STR      R1,[R0, #+0]
   \   00000016   0x462A             MOV      R2,R5
   \   00000018   0x6042             STR      R2,[R0, #+4]
   \   0000001A   0xF44F 0x42B0      MOV      R2,#+22528
   \   0000001E   0x60C2             STR      R2,[R0, #+12]
   \   00000020   0x462B             MOV      R3,R5
   \   00000022   0x6083             STR      R3,[R0, #+8]
   \   00000024   0x604A             STR      R2,[R1, #+4]
   \   00000026   0xF100 0x0208      ADD      R2,R0,#+8
   \   0000002A   0x600A             STR      R2,[R1, #+0]
    181          			xHeapHasBeenInitialised = pdTRUE;
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x6141             STR      R1,[R0, #+20]
    182          		}
    183          
    184          		/* The wanted size is increased so it can contain a xBlockLink
    185          		structure in addition to the requested amount of bytes. */
    186          		if( xWantedSize > 0 )
   \                     ??pvPortMalloc_0: (+1)
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD008             BEQ.N    ??pvPortMalloc_1
    187          		{
    188          			xWantedSize += heapSTRUCT_SIZE;
   \   00000034   0x3410             ADDS     R4,R4,#+16
    189          
    190          			/* Ensure that blocks are always aligned to the required number of bytes. */
    191          			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   \   00000036   0xF014 0x0F07      TST      R4,#0x7
   \   0000003A   0xD004             BEQ.N    ??pvPortMalloc_1
    192          			{
    193          				/* Byte alignment required. */
    194          				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   \   0000003C   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000040   0xF004 0x0207      AND      R2,R4,#0x7
   \   00000044   0x1A8C             SUBS     R4,R1,R2
    195          			}
    196          		}
    197          
    198          		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
   \                     ??pvPortMalloc_1: (+1)
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD02B             BEQ.N    ??pvPortMalloc_2
   \   0000004A   0xF5B4 0x4FB0      CMP      R4,#+22528
   \   0000004E   0xD228             BCS.N    ??pvPortMalloc_2
    199          		{
    200          			/* Blocks are stored in byte order - traverse the list from the start
    201          			(smallest) block until one of adequate size is found. */
    202          			pxPreviousBlock = &xStart;
   \   00000050   0x4602             MOV      R2,R0
    203          			pxBlock = xStart.pxNextFreeBlock;
   \   00000052   0x6801             LDR      R1,[R0, #+0]
   \   00000054   0xE001             B.N      ??pvPortMalloc_3
    204          			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    205          			{
    206          				pxPreviousBlock = pxBlock;
   \                     ??pvPortMalloc_4: (+1)
   \   00000056   0x460A             MOV      R2,R1
    207          				pxBlock = pxBlock->pxNextFreeBlock;
   \   00000058   0x4619             MOV      R1,R3
    208          			}
   \                     ??pvPortMalloc_3: (+1)
   \   0000005A   0x684B             LDR      R3,[R1, #+4]
   \   0000005C   0x42A3             CMP      R3,R4
   \   0000005E   0xD202             BCS.N    ??pvPortMalloc_5
   \   00000060   0x680B             LDR      R3,[R1, #+0]
   \   00000062   0x2B00             CMP      R3,#+0
   \   00000064   0xD1F7             BNE.N    ??pvPortMalloc_4
    209          
    210          			/* If we found the end marker then a block of adequate size was not found. */
    211          			if( pxBlock != &xEnd )
   \                     ??pvPortMalloc_5: (+1)
   \   00000066   0xF100 0x0308      ADD      R3,R0,#+8
   \   0000006A   0x4299             CMP      R1,R3
   \   0000006C   0xD019             BEQ.N    ??pvPortMalloc_2
    212          			{
    213          				/* Return the memory space - jumping over the xBlockLink structure
    214          				at its start. */
    215          				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   \   0000006E   0x6813             LDR      R3,[R2, #+0]
   \   00000070   0xF103 0x0510      ADD      R5,R3,#+16
    216          
    217          				/* This block is being returned for use so must be taken our of the
    218          				list of free blocks. */
    219          				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   \   00000074   0x680B             LDR      R3,[R1, #+0]
   \   00000076   0x6013             STR      R3,[R2, #+0]
    220          
    221          				/* If the block is larger than required it can be split into two. */
    222          				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   \   00000078   0x684A             LDR      R2,[R1, #+4]
   \   0000007A   0x1B12             SUBS     R2,R2,R4
   \   0000007C   0x2A21             CMP      R2,#+33
   \   0000007E   0xD30C             BCC.N    ??pvPortMalloc_6
    223          				{
    224          					/* This block is to be split into two.  Create a new block
    225          					following the number of bytes requested. The void cast is
    226          					used to prevent byte alignment warnings from the compiler. */
    227          					pxNewBlockLink = ( xBlockLink * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   \   00000080   0x1863             ADDS     R3,R4,R1
    228          
    229          					/* Calculate the sizes of two blocks split from the single
    230          					block. */
    231          					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   \   00000082   0x605A             STR      R2,[R3, #+4]
    232          					pxBlock->xBlockSize = xWantedSize;
   \   00000084   0x604C             STR      R4,[R1, #+4]
    233          
    234          					/* Insert the new block into the list of free blocks. */
    235          					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   \   00000086   0x685A             LDR      R2,[R3, #+4]
   \   00000088   0x4604             MOV      R4,R0
   \   0000008A   0xE000             B.N      ??pvPortMalloc_7
   \                     ??pvPortMalloc_8: (+1)
   \   0000008C   0x4634             MOV      R4,R6
   \                     ??pvPortMalloc_7: (+1)
   \   0000008E   0x6826             LDR      R6,[R4, #+0]
   \   00000090   0x6877             LDR      R7,[R6, #+4]
   \   00000092   0x4297             CMP      R7,R2
   \   00000094   0xD3FA             BCC.N    ??pvPortMalloc_8
   \   00000096   0x601E             STR      R6,[R3, #+0]
   \   00000098   0x6023             STR      R3,[R4, #+0]
    236          				}
    237          				
    238          				xFreeBytesRemaining -= pxBlock->xBlockSize;
   \                     ??pvPortMalloc_6: (+1)
   \   0000009A   0x6902             LDR      R2,[R0, #+16]
   \   0000009C   0x6849             LDR      R1,[R1, #+4]
   \   0000009E   0x1A51             SUBS     R1,R2,R1
   \   000000A0   0x6101             STR      R1,[R0, #+16]
    239          			}
    240          		}
    241          	}
    242          	xTaskResumeAll();
   \                     ??pvPortMalloc_2: (+1)
   \   000000A2   0x.... 0x....      BL       xTaskResumeAll
    243          
    244          	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
    245          	{
    246          		if( pvReturn == NULL )
    247          		{
    248          			extern void vApplicationMallocFailedHook( void );
    249          			vApplicationMallocFailedHook();
    250          		}
    251          	}
    252          	#endif
    253          
    254          	return pvReturn;
   \   000000A6   0x4628             MOV      R0,R5
   \   000000A8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    255          }

   \                                 In section .data, align 4
   \                     xStart:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00005800         DC32 22528
   \   00000014   0x00000000         DC32 0
    256          /*-----------------------------------------------------------*/
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void vPortFree( void *pv )
    259          {
   \                     vPortFree: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    260          unsigned char *puc = ( unsigned char * ) pv;
    261          xBlockLink *pxLink;
    262          
    263          	if( pv )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD016             BEQ.N    ??vPortFree_0
    264          	{
    265          		/* The memory being freed will have an xBlockLink structure immediately
    266          		before it. */
    267          		puc -= heapSTRUCT_SIZE;
    268          
    269          		/* This casting is to keep the compiler from issuing warnings. */
    270          		pxLink = ( xBlockLink * ) puc;
   \   00000006   0xF1A0 0x0410      SUB      R4,R0,#+16
    271          
    272          		vTaskSuspendAll();
   \   0000000A   0x.... 0x....      BL       vTaskSuspendAll
    273          		{
    274          			/* Add this block to the list of free blocks. */
    275          			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
   \   0000000E   0x6860             LDR      R0,[R4, #+4]
   \   00000010   0x....             LDR.N    R1,??DataTable2
   \   00000012   0x460A             MOV      R2,R1
   \   00000014   0xE000             B.N      ??vPortFree_1
   \                     ??vPortFree_2: (+1)
   \   00000016   0x461A             MOV      R2,R3
   \                     ??vPortFree_1: (+1)
   \   00000018   0x6813             LDR      R3,[R2, #+0]
   \   0000001A   0x685D             LDR      R5,[R3, #+4]
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xD3FA             BCC.N    ??vPortFree_2
   \   00000020   0x6023             STR      R3,[R4, #+0]
   \   00000022   0x6014             STR      R4,[R2, #+0]
    276          			xFreeBytesRemaining += pxLink->xBlockSize;
   \   00000024   0x6908             LDR      R0,[R1, #+16]
   \   00000026   0x6862             LDR      R2,[R4, #+4]
   \   00000028   0x1810             ADDS     R0,R2,R0
   \   0000002A   0x6108             STR      R0,[R1, #+16]
    277          		}
    278          		xTaskResumeAll();
   \   0000002C   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000030   0x.... 0x....      B.W      xTaskResumeAll
    279          	}
    280          }
   \                     ??vPortFree_0: (+1)
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    281          /*-----------------------------------------------------------*/
    282          

   \                                 In section .text, align 2, keep-with-next
    283          size_t xPortGetFreeHeapSize( void )
    284          {
    285          	return xFreeBytesRemaining;
   \                     xPortGetFreeHeapSize: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2
   \   00000002   0x6900             LDR      R0,[R0, #+16]
   \   00000004   0x4770             BX       LR               ;; return
    286          }
    287          /*-----------------------------------------------------------*/
    288          

   \                                 In section .text, align 2, keep-with-next
    289          void vPortInitialiseBlocks( void )
    290          {
    291          	/* This just exists to keep the linker quiet. */
    292          }
   \                     vPortInitialiseBlocks: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     xStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     xHeap

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   pvPortMalloc
        24   -> vTaskSuspendAll
        24   -> xTaskResumeAll
      16   vPortFree
        16   -> vTaskSuspendAll
       0   vPortInitialiseBlocks
       0   xPortGetFreeHeapSize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
     170  pvPortMalloc
      54  vPortFree
       2  vPortInitialiseBlocks
   22528  xHeap
       6  xPortGetFreeHeapSize
      24  xStart
          xEnd
          xFreeBytesRemaining
          xHeapHasBeenInitialised

 
 22 528 bytes in section .ccm
     24 bytes in section .data
    240 bytes in section .text
 
    240 bytes of CODE memory
 22 552 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\THardware.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\THardware.cpp -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\THardware.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\THardware.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\THardware.cpp
      1          /************************************************************************************/
      2          /* Title:		Низкоуровневая инициализация переферии								*/
      3          /* Author:		Cyber Genius														*/
      4          /* Version:																			*/
      5          /* Date:																			*/
      6          /************************************************************************************/
      7          /*																					*/
      8          /************************************************************************************/
      9          #include "main.h"
     10          #include "THardware.h"
     11          #include "TLcd.h"
     12          #include "TADS1298.h"
     13          #include "TDevice.h"
     14          #include "TLcdTrace.h"
     15          #include "TSound.h"
     16          
     17          /*----------------------------------------------------------------------------------*/

   \                                 In section .bss, align 4
     18          volatile uint16_t THardware::ADC3_ScanResult[4];
   \                     _ZN9THardware15ADC3_ScanResultE:
   \   00000000                      DS8 8
     19          /*----------------------------------------------------------------------------------*/

   \                                 In section .bss, align 4
     20          DebugTools_TypeDef THardware::DebugTools;
   \                     _ZN9THardware10DebugToolsE:
   \   00000000                      DS8 52
     21          

   \                                 In section .bss, align 1
     22          bool  THardware::BlockKeys = false;
   \                     _ZN9THardware9BlockKeysE:
   \   00000000                      DS8 1
     23          
     24          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     25          void THardware::TestPinControl( bool state ){
     26          	if( state == true )	GPIO_SetBits( TEST_PORT, TEST_PIN );
   \                     _ZN9THardware14TestPinControlEb: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable5  ;; 0x40020800
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD003             BEQ.N    ??TestPinControl_0
   \   00000006   0x2120             MOVS     R1,#+32
   \   00000008   0x4610             MOV      R0,R2
   \   0000000A   0x.... 0x....      B.W      GPIO_SetBits
     27          	else GPIO_ResetBits( TEST_PORT, TEST_PIN );
   \                     ??TestPinControl_0: (+1)
   \   0000000E   0x2120             MOVS     R1,#+32
   \   00000010   0x4610             MOV      R0,R2
   \   00000012   0x.... 0x....      B.W      GPIO_ResetBits
     28          }
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void THardware::LedInvert( void )
     31          {
   \                     _ZN9THardware9LedInvertEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32          	if(GPIO_ReadInputDataBit( TEST_PORT, TEST_PIN ) == Bit_SET)
   \   00000002   0x2120             MOVS     R1,#+32
   \   00000004   0x....             LDR.N    R0,??DataTable5  ;; 0x40020800
   \   00000006   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD103             BNE.N    ??LedInvert_0
     33              TestPinControl(0);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE8BD 0x4002      POP      {R1,LR}
   \   00000014   0x....             B.N      _ZN9THardware14TestPinControlEb
     34            else
     35              TestPinControl(1);
   \                     ??LedInvert_0: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE8BD 0x4002      POP      {R1,LR}
   \   0000001C   0x....             B.N      _ZN9THardware14TestPinControlEb
     36          }
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void THardware::LedOn( void )
     39          {
     40          	TestPinControl( 1 );
   \                     _ZN9THardware5LedOnEv: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             B.N      _ZN9THardware14TestPinControlEb
     41          }
     42          
     43          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     44          void THardware::LedOff( void )
     45          {
     46          	TestPinControl( 0 );
   \                     _ZN9THardware6LedOffEv: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             B.N      _ZN9THardware14TestPinControlEb
     47          }
     48          
     49          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     50          void THardware::TestPinInit( void )
     51          {
   \                     _ZN9THardware11TestPinInitEv: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     52          	RCC_AHB1PeriphClockCmd( TEST_GPIO_CLK, ENABLE );
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     53          
     54          	GPIO_InitTypeDef GPIO_InitStructure;
     55          
     56          	GPIO_InitStructure.GPIO_Pin = TEST_PIN;
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x9000             STR      R0,[SP, #+0]
     57          	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_OUT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
     58          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xF88D 0x0005      STRB     R0,[SP, #+5]
     59          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;        
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     60            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     61          	GPIO_Init( TEST_PORT, &GPIO_InitStructure );
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x....             LDR.N    R0,??DataTable5  ;; 0x40020800
   \   00000026   0x.... 0x....      BL       GPIO_Init
     62          }
   \   0000002A   0xBD07             POP      {R0-R2,PC}       ;; return
     63          
     64          
     65          
     66          
     67          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     68          void THardware::TestPinDeinit( void )
     69          {
     70          }
   \                     _ZN9THardware13TestPinDeinitEv: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     71          
     72          
     73          
     74          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     75          void THardware::KeysInit( void )
     76          {
   \                     _ZN9THardware8KeysInitEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     77          
     78          	GPIO_InitTypeDef GPIO_InitStructure;
     79          
     80          	RCC_AHB1PeriphClockCmd( UB1_BUTTON_CLK, ENABLE );
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     81          	GPIO_InitStructure.GPIO_Pin = UB1_BUTTON_PIN;
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x9001             STR      R0,[SP, #+4]
     82          	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_IN;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9002             STR      R0,[SP, #+8]
     83          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
     84          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;        
     85          	GPIO_InitStructure.GPIO_PuPd =  GPIO_PuPd_NOPULL;
     86          	GPIO_Init( UB1_BUTTON_PORT, &GPIO_InitStructure );
   \   00000014   0x....             LDR.N    R4,??DataTable5  ;; 0x40020800
   \   00000016   0xA901             ADD      R1,SP,#+4
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     87          
     88          	GPIO_InitStructure.GPIO_Pin = UB2_BUTTON_PIN;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x9001             STR      R0,[SP, #+4]
     89          	GPIO_Init( UB2_BUTTON_PORT, &GPIO_InitStructure );
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       GPIO_Init
     90            
     91          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xF44F 0x4080      MOV      R0,#+16384
   \   00000030   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     92          	SYSCFG_EXTILineConfig( UB1_EXTI_PORT, UB1_EXTI_PIN );
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x.... 0x....      BL       SYSCFG_EXTILineConfig
     93          	SYSCFG_EXTILineConfig( UB2_EXTI_PORT, UB2_EXTI_PIN );
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       SYSCFG_EXTILineConfig
     94          
     95          	NVIC_InitTypeDef NVIC_InitStructure;
     96          	EXTI_InitTypeDef EXTI_InitStructure;
     97          
     98          
     99          	/* Configure Button EXTI line */
    100          	EXTI_ClearITPendingBit( UB1_EXTI_LINE ); 			// Clear the Key Button EXTI line pending bit
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x.... 0x....      BL       EXTI_ClearITPendingBit
    101          	EXTI_InitStructure.EXTI_Line = UB1_EXTI_LINE;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x9003             STR      R0,[SP, #+12]
    102          	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF88D 0x0010      STRB     R0,[SP, #+16]
    103          	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000054   0x200C             MOVS     R0,#+12
   \   00000056   0xF88D 0x0011      STRB     R0,[SP, #+17]
    104          	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xF88D 0x0012      STRB     R0,[SP, #+18]
    105          	EXTI_Init( &EXTI_InitStructure );
   \   00000060   0xA803             ADD      R0,SP,#+12
   \   00000062   0x.... 0x....      BL       EXTI_Init
    106          
    107          	EXTI_ClearITPendingBit( UB2_EXTI_LINE ); 			// Clear the Key Button EXTI line pending bit
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       EXTI_ClearITPendingBit
    108          	EXTI_InitStructure.EXTI_Line = UB2_EXTI_LINE;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x9003             STR      R0,[SP, #+12]
    109          	EXTI_Init( &EXTI_InitStructure );
   \   00000070   0xA803             ADD      R0,SP,#+12
   \   00000072   0x.... 0x....      BL       EXTI_Init
    110          
    111          	/* Enable and set Button EXTI Interrupt to the lowest priority */
    112          	NVIC_InitStructure.NVIC_IRQChannel = UB1_IRQChannel;
   \   00000076   0x2007             MOVS     R0,#+7
   \   00000078   0xF88D 0x0000      STRB     R0,[SP, #+0]
    113          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 14;
   \   0000007C   0x200E             MOVS     R0,#+14
   \   0000007E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    114          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF88D 0x0002      STRB     R0,[SP, #+2]
    115          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    116          	NVIC_Init( &NVIC_InitStructure );
   \   0000008E   0xA800             ADD      R0,SP,#+0
   \   00000090   0x.... 0x....      BL       NVIC_Init
    117          
    118          	NVIC_InitStructure.NVIC_IRQChannel = UB2_IRQChannel;
   \   00000094   0x2006             MOVS     R0,#+6
   \   00000096   0xF88D 0x0000      STRB     R0,[SP, #+0]
    119          	NVIC_Init( &NVIC_InitStructure );
   \   0000009A   0xA800             ADD      R0,SP,#+0
   \   0000009C   0x.... 0x....      BL       NVIC_Init
    120          }
   \   000000A0   0xB006             ADD      SP,SP,#+24
   \   000000A2   0xBD10             POP      {R4,PC}          ;; return
    121          
    122          
    123          
    124          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    125          void THardware::KeysDeinit( void )
    126          {
   \                     _ZN9THardware10KeysDeinitEv: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    127          	GPIO_InitTypeDef GPIO_InitStructure;
    128          
    129          	GPIO_InitStructure.GPIO_Pin = UB1_BUTTON_PIN;
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x9000             STR      R0,[SP, #+0]
    130          	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_IN;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9001             STR      R0,[SP, #+4]
    131          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    132          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;        
    133          	GPIO_InitStructure.GPIO_PuPd =  GPIO_PuPd_NOPULL;
    134          	GPIO_Init( UB1_BUTTON_PORT, &GPIO_InitStructure );
   \   0000000A   0x....             LDR.N    R4,??DataTable5  ;; 0x40020800
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       GPIO_Init
    135          
    136          	GPIO_InitStructure.GPIO_Pin = UB2_BUTTON_PIN;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9000             STR      R0,[SP, #+0]
    137          	GPIO_Init( UB2_BUTTON_PORT, &GPIO_InitStructure );
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       GPIO_Init
    138          }
   \   00000020   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    139          
    140          

   \                                 In section .text, align 2, keep-with-next
    141          int THardware::CheckKey( int _Key )
    142          {
   \                     _ZN9THardware8CheckKeyEi: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    143            if(BlockKeys) return 0;
   \   00000002   0x....             LDR.N    R1,??DataTable5_1
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD10A             BNE.N    ??CheckKey_0
    144            
    145            switch( _Key )
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD002             BEQ.N    ??CheckKey_1
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD008             BEQ.N    ??CheckKey_2
   \   00000012   0xE005             B.N      ??CheckKey_0
    146            {
    147              case ChangeButton: 
    148                if( GPIO_ReadInputDataBit( UB1_BUTTON_PORT, UB1_BUTTON_PIN ) == 0 ) 
   \                     ??CheckKey_1: (+1)
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x....             LDR.N    R0,??DataTable5  ;; 0x40020800
   \   00000018   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD007             BEQ.N    ??CheckKey_3
    149                {
    150                  return 1; 
    151                }
    152                break;
    153              case SelectButton: 
    154                if( GPIO_ReadInputDataBit( UB2_BUTTON_PORT, UB2_BUTTON_PIN ) == 0 )
    155                { 
    156                  return 1; 
    157                }
    158                break;
    159              default: 
    160                return 0;
    161            }
    162            return 0;
   \                     ??CheckKey_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
   \                     ??CheckKey_2: (+1)
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR.N    R0,??DataTable5  ;; 0x40020800
   \   00000028   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD1F7             BNE.N    ??CheckKey_0
   \                     ??CheckKey_3: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xBD02             POP      {R1,PC}
    163          }
    164          
    165          
    166          //------------------------------------------------------------------------------
    167          /*
    168          int THardware::CheckKey( int _Key )
    169          {
    170          	if(BlockKeys) return 0;
    171          
    172          	int cnt = 0;
    173          	bool press = false;
    174          	static int LastPress = -1;
    175          
    176          	if( LastPress == _Key )
    177          	{
    178          		switch( _Key )
    179          		{
    180          			case ChangeButton: 
    181          				if ( GPIO_ReadInputDataBit( UB1_BUTTON_PORT, UB1_BUTTON_PIN ) == 0 ) 
    182          				{
    183          					//TSound::PlaySound(_modiShortBeep);
    184                    
    185                    return 0; 
    186          				}
    187          				else
    188          				{
    189          					LastPress = -1;; 
    190          				} break;
    191          			case SelectButton: 
    192          				if ( GPIO_ReadInputDataBit( UB2_BUTTON_PORT, UB2_BUTTON_PIN ) == 0 )
    193          				{
    194          					//TSound::PlaySound(_modiShortBeep);
    195                    
    196                    return 0; 
    197          				}
    198          				else
    199          				{
    200          					LastPress = -1; 
    201          				} break;
    202          		}
    203          	}
    204          	do
    205          	{
    206          		switch( _Key )
    207          		{
    208          			case ChangeButton: 
    209          				if( GPIO_ReadInputDataBit( UB1_BUTTON_PORT, UB1_BUTTON_PIN ) == 0 ) 
    210          				{
    211          					press = true;
    212          				}
    213          				else 
    214          				{
    215          					press = false;
    216          				} 
    217                  break;
    218          			case SelectButton: 
    219          				if( GPIO_ReadInputDataBit( UB2_BUTTON_PORT, UB2_BUTTON_PIN ) == 0 )
    220          				{
    221          					press = true;
    222          				}
    223          				else 
    224          				{
    225          					press = false;
    226          				} 
    227                  break;
    228          		}
    229          		if( press ) 
    230          		{
    231          			cnt++;
    232          			if( cnt > 100 ) 
    233          			{
    234          				LastPress = _Key;
    235          				return 2;
    236          			}
    237          		}
    238          		vTaskDelay(20/portTICK_RATE_MS);
    239          	} while (press);
    240          
    241          	if( cnt < 3 ) return 0;
    242          	else if( cnt < 100 ) return 1;
    243          	else return 2;
    244          }
    245          */
    246          
    247          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    248          void THardware::VoltmeterInit( void )
    249          {
    250          /*
    251          	GPIO_InitTypeDef GPIO_InitStructure;
    252          	ADC_InitTypeDef ADC_InitStructure;
    253          //	NVIC_InitTypeDef NVIC_InitStructure;
    254          
    255          	RCC_APB2PeriphClockCmd( NiBat_GPIO_CLK | Axel_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE );
    256          	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
    257          
    258          	RCC_ADCCLKConfig( RCC_PCLK2_Div8 );
    259          	RCC_APB2PeriphClockCmd( RCC_APB2Periph_ADC3, ENABLE );
    260          #ifdef DEVICE_2
    261          	RCC_APB2PeriphClockCmd( RCC_APB2Periph_ADC2, ENABLE );
    262          #endif
    263          
    264          //	NVIC_InitStructure.NVIC_IRQChannel = ADC3_IRQn;
    265          //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 14;
    266          //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    267          //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    268          //	NVIC_Init( &NVIC_InitStructure );
    269          
    270          //  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Channel4_5_IRQn;
    271          //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 14;
    272          //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    273          //  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    274          //  NVIC_Init(&NVIC_InitStructure); //Используется прерывание DMA канала
    275          
    276          
    277          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    278          
    279          	GPIO_InitStructure.GPIO_Pin = NiBat_GPIO_PIN;
    280          	GPIO_Init( NiBat_GPIO_PORT, &GPIO_InitStructure );
    281          
    282          	GPIO_InitStructure.GPIO_Pin = Axel_X_GPIO_PIN | Axel_Y_GPIO_PIN | Axel_Z_GPIO_PIN;
    283          	GPIO_Init( Axel_GPIO_PORT, &GPIO_InitStructure );
    284          
    285          	DMA_InitTypeDef  DMA_InitStructure;
    286          	// DMA1 channel1 configuration ----------------------------------------------
    287          	DMA_DeInit(DMA2_Channel5);
    288          	DMA_InitStructure.DMA_PeripheralBaseAddr = ADC3_DR_Address;
    289          	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&ADC3_ScanResult[0];
    290          	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    291          	DMA_InitStructure.DMA_BufferSize = 4;
    292          	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    293          	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    294          	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    295          	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    296          	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    297          	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    298          	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    299            
    300          	DMA_Init(DMA2_Channel5, &DMA_InitStructure);
    301            
    302          	// Enable DMA1 channel1 
    303          	DMA_Cmd(DMA2_Channel5, ENABLE);
    304            
    305          	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    306          	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    307          	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    308          	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    309          	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    310          	ADC_InitStructure.ADC_NbrOfChannel = 4;
    311          	ADC_Init( ADC3, &ADC_InitStructure );
    312          
    313          	ADC_RegularChannelConfig(ADC3, NiBat_ADC_Channel,  1, ADC_SampleTime_55Cycles5);
    314          	ADC_RegularChannelConfig(ADC3, Axel_X_ADC_Channel, 2, ADC_SampleTime_55Cycles5);
    315          	ADC_RegularChannelConfig(ADC3, Axel_Y_ADC_Channel, 3, ADC_SampleTime_55Cycles5);
    316          	ADC_RegularChannelConfig(ADC3, Axel_Z_ADC_Channel, 4, ADC_SampleTime_55Cycles5);
    317          	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    318          	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    319          	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    320          	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    321          	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    322          	ADC_InitStructure.ADC_NbrOfChannel = 1;
    323          	ADC_Init( ADC2, &ADC_InitStructure );
    324          
    325          	ADC_RegularChannelConfig(ADC2, NiBat_ADC_Channel,  1, ADC_SampleTime_55Cycles5);
    326          	ADC_Cmd( ADC2, ENABLE );
    327          //	ADC_ITConfig( ADC3, ADC_IT_EOC, ENABLE );
    328            
    329            ADC_DMACmd(ADC3, ENABLE);
    330          
    331          	ADC_Cmd( ADC3, ENABLE );
    332          
    333          	ADC_ResetCalibration( ADC3 );
    334          	while( ADC_GetResetCalibrationStatus( ADC3 ));
    335          
    336          	ADC_StartCalibration( ADC3 );
    337          	while( ADC_GetCalibrationStatus( ADC3 ));
    338          
    339          	ADC_SoftwareStartConvCmd( ADC3, ENABLE );
    340          */
    341          }
   \                     _ZN9THardware13VoltmeterInitEv: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    342          
    343          
    344          
    345          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    346          void THardware::VoltmeterDeinit( void )
    347          {
    348          /*
    349          	GPIO_InitTypeDef GPIO_InitStructure;
    350          	NVIC_InitTypeDef NVIC_InitStructure;
    351          
    352          	RCC_APB2PeriphClockCmd( RCC_APB2Periph_ADC3, DISABLE );
    353          
    354          	NVIC_InitStructure.NVIC_IRQChannel = ADC3_IRQn;
    355          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 14;
    356          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    357          	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    358          	NVIC_Init( &NVIC_InitStructure );
    359          
    360          	GPIO_InitStructure.GPIO_Pin = NiBat_GPIO_PIN;
    361          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    362          	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_IN_FLOATING;
    363          	GPIO_Init( NiBat_GPIO_PORT, &GPIO_InitStructure );
    364          
    365          	ADC_DeInit( ADC3 );
    366          */
    367          }
   \                     _ZN9THardware15VoltmeterDeinitEv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     _ZN9THardware9BlockKeysE
    368          
    369          
    370          
    371          ////---------------------------------------------------------------------------
    372          
    373          // void THardware::Switch_RCC_to_24Mhz(void)
    374          // {
    375          	// FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
    376          
    377          	// /* Flash 2 wait state */
    378          	// FLASH_SetLatency( FLASH_Latency_1 );
    379          
    380          	// /* HCLK = SYSCLK */
    381          	// RCC_HCLKConfig( RCC_SYSCLK_Div1 );
    382          
    383          	// /* PCLK2 = HCLK */
    384          	// RCC_PCLK2Config( RCC_HCLK_Div1 );
    385          
    386          	// /* PCLK1 = HCLK/2 */
    387          	// RCC_PCLK1Config( RCC_HCLK_Div1 );
    388          
    389          	// /* ADCCLK = PCLK2/8 */
    390          	// RCC_ADCCLKConfig( RCC_PCLK2_Div2 );
    391          
    392          	// ChangePllMul( RCC_PLLSource_HSE_Div1, 3 );
    393          // }
    394          //---------------------------------------------------------------------------
    395          
    396          // void THardware::Switch_RCC_to_72Mhz(void)
    397          // {
    398          //		if(CurrentSysClock72Mhz) return;
    399          //	 CurrentSysClock72Mhz = true;
    400          
    401          	// /* Enable Prefetch Buffer */
    402          	// FLASH_PrefetchBufferCmd( FLASH_PrefetchBuffer_Enable );
    403          
    404          	// /* Flash 2 wait state */
    405          	// FLASH_SetLatency( FLASH_Latency_2 );
    406          
    407          	// /* HCLK = SYSCLK */
    408          	// RCC_HCLKConfig( RCC_SYSCLK_Div1 );
    409          
    410          	// /* PCLK2 = HCLK */
    411          	// RCC_PCLK2Config( RCC_HCLK_Div1 );
    412          
    413          	// /* PCLK1 = HCLK/2 */
    414          	// RCC_PCLK1Config( RCC_HCLK_Div2 );
    415          
    416          	// /* ADCCLK = PCLK2/8 */
    417          	// RCC_ADCCLKConfig( RCC_PCLK2_Div8 );
    418          
    419          	// ChangePllMul( RCC_PLLSource_HSE_Div1, 9 );
    420          // }
    421          //---------------------------------------------------------------------------
    422          
    423          // void THardware::ChangePllMul( uint32_t div,uint32_t PllMul )
    424          // {
    425          
    426          	// /* Если источник системной тактовой частоты HSI то ничего не делаем
    427          	// Это означает, что система Clock security system сработала */
    428          	// if(( RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0x0 ){
    429          	// return;
    430          	// }
    431          
    432          	// /* Выбираем HSI как источник системной частоты */
    433          	// RCC_SYSCLKConfig( RCC_SYSCLKSource_HSI);
    434          
    435          	// /* Ожидаем, пока HSI выберется как источник системной частоты */
    436          	// while(( RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != (uint32_t)0x00 ){
    437          	// }
    438          
    439          	// /* Выключаем PLL */
    440          	// RCC_PLLCmd( DISABLE );
    441          
    442          	// /* Ожидаем, пока PLL снимет бит готовности */
    443          	// while( RCC_GetFlagStatus( RCC_FLAG_PLLRDY) == SET ){
    444          	// }
    445          
    446          	// /* Конфигурируем множитель PLL: PLLCLK = HSE * PllMul */
    447          	// RCC_PLLConfig( div, (( PllMul - 2) << 18 ));
    448          
    449          	// /* Включаем PLL */
    450          	// RCC_PLLCmd( ENABLE );
    451          
    452          	// /* Ожидаем, пока PLL выставит бит готовности */
    453          	// while( RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET ){
    454          	// }
    455          
    456          	// /* Выбираем PLL как источник системной частоты */
    457          	// RCC_SYSCLKConfig( RCC_SYSCLKSource_PLLCLK );
    458          
    459          	// /* Ожидаем, пока PLL выберется как источник системной частоты */
    460          	// while(( RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08 ){
    461          	// }
    462          
    463          	// return;
    464          // }
    465          //------------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   THardware::CheckKey(int)
         8   -> GPIO_ReadInputDataBit
      16   THardware::KeysDeinit()
        16   -> GPIO_Init
      32   THardware::KeysInit()
        32   -> EXTI_ClearITPendingBit
        32   -> EXTI_Init
        32   -> GPIO_Init
        32   -> NVIC_Init
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SYSCFG_EXTILineConfig
       8   THardware::LedInvert()
         8   -> GPIO_ReadInputDataBit
         0   -> THardware::TestPinControl(bool)
       0   THardware::LedOff()
         0   -> THardware::TestPinControl(bool)
       0   THardware::LedOn()
         0   -> THardware::TestPinControl(bool)
       0   THardware::TestPinControl(bool)
         0   -> GPIO_ResetBits
       0   THardware::TestPinDeinit()
      16   THardware::TestPinInit()
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   THardware::VoltmeterDeinit()
       0   THardware::VoltmeterInit()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       8  THardware::ADC3_ScanResult
       1  THardware::BlockKeys
      52  THardware::CheckKey(int)
      52  THardware::DebugTools
      34  THardware::KeysDeinit()
     164  THardware::KeysInit()
      30  THardware::LedInvert()
       4  THardware::LedOff()
       4  THardware::LedOn()
      22  THardware::TestPinControl(bool)
       2  THardware::TestPinDeinit()
      44  THardware::TestPinInit()
       2  THardware::VoltmeterDeinit()
       2  THardware::VoltmeterInit()

 
  61 bytes in section .bss
 368 bytes in section .text
 
 368 bytes of CODE memory
  61 bytes of DATA memory

Errors: none
Warnings: none

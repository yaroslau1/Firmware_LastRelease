###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        08/Oct/2018  17:04:49
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\stm32f4xx_syscfg.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\stm32f4xx_syscfg.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_syscfg.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief   This file provides firmware functions to manage the SYSCFG peripheral.
      8            *
      9           @verbatim
     10              
     11           ===============================================================================
     12                               ##### How to use this driver #####
     13           ===============================================================================
     14              [..] This driver provides functions for:
     15                      
     16                 (#) Remapping the memory accessible in the code area using SYSCFG_MemoryRemapConfig()
     17                      
     18                 (#) Swapping the internal flash Bank1 and Bank2 this features is only visible for 
     19                     STM32F42xxx/43xxx devices Devices. 
     20                          
     21                 (#) Manage the EXTI lines connection to the GPIOs using SYSCFG_EXTILineConfig()
     22                        
     23                 (#) Select the ETHERNET media interface (RMII/RII) using SYSCFG_ETH_MediaInterfaceConfig()
     24            
     25                 -@- SYSCFG APB clock must be enabled to get write access to SYSCFG registers,
     26                     using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     27                             
     28           @endverbatim      
     29            ******************************************************************************
     30            * @attention
     31            *
     32            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     33            *
     34            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     35            * You may not use this file except in compliance with the License.
     36            * You may obtain a copy of the License at:
     37            *
     38            *        http://www.st.com/software_license_agreement_liberty_v2
     39            *
     40            * Unless required by applicable law or agreed to in writing, software 
     41            * distributed under the License is distributed on an "AS IS" BASIS, 
     42            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     43            * See the License for the specific language governing permissions and
     44            * limitations under the License.
     45            *
     46            ******************************************************************************
     47            */
     48          
     49          /* Includes ------------------------------------------------------------------*/
     50          #include "stm32f4xx_syscfg.h"
     51          #include "stm32f4xx_rcc.h"
     52          
     53          /** @addtogroup STM32F4xx_StdPeriph_Driver
     54            * @{
     55            */
     56          
     57          /** @defgroup SYSCFG 
     58            * @brief SYSCFG driver modules
     59            * @{
     60            */ 
     61          
     62          /* Private typedef -----------------------------------------------------------*/
     63          /* Private define ------------------------------------------------------------*/
     64          /* ------------ RCC registers bit address in the alias region ----------- */
     65          #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
     66          /* ---  MEMRMP Register ---*/ 
     67          /* Alias word address of UFB_MODE bit */ 
     68          #define MEMRMP_OFFSET             SYSCFG_OFFSET 
     69          #define UFB_MODE_BitNumber        ((uint8_t)0x8) 
     70          #define UFB_MODE_BB               (PERIPH_BB_BASE + (MEMRMP_OFFSET * 32) + (UFB_MODE_BitNumber * 4)) 
     71          
     72          
     73          /* ---  PMC Register ---*/ 
     74          /* Alias word address of MII_RMII_SEL bit */ 
     75          #define PMC_OFFSET                (SYSCFG_OFFSET + 0x04) 
     76          #define MII_RMII_SEL_BitNumber    ((uint8_t)0x17) 
     77          #define PMC_MII_RMII_SEL_BB       (PERIPH_BB_BASE + (PMC_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4)) 
     78          
     79          /* ---  CMPCR Register ---*/ 
     80          /* Alias word address of CMP_PD bit */ 
     81          #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
     82          #define CMP_PD_BitNumber          ((uint8_t)0x00) 
     83          #define CMPCR_CMP_PD_BB           (PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BitNumber * 4)) 
     84          
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          /* Private function prototypes -----------------------------------------------*/
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          /** @defgroup SYSCFG_Private_Functions
     91            * @{
     92            */ 
     93          
     94          /**
     95            * @brief  Deinitializes the Alternate Functions (remap and EXTI configuration)
     96            *   registers to their default reset values.
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .text, align 2, keep-with-next
    100          void SYSCFG_DeInit(void)
    101          {
   \                     SYSCFG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    102             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x4080      MOV      R0,#+16384
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    103             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0xE8BD 0x4004      POP      {R2,LR}
   \   00000016   0x.... 0x....      B.W      RCC_APB2PeriphResetCmd
    104          }
    105          
    106          /**
    107            * @brief  Changes the mapping of the specified pin.
    108            * @param  SYSCFG_Memory: selects the memory remapping.
    109            *         This parameter can be one of the following values:
    110            *            @arg SYSCFG_MemoryRemap_Flash:       Main Flash memory mapped at 0x00000000  
    111            *            @arg SYSCFG_MemoryRemap_SystemFlash: System Flash memory mapped at 0x00000000
    112            *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000 for STM32F405xx/407xx and STM32F415xx/417xx devices. 
    113            *            @arg SYSCFG_MemoryRemap_FMC:         FMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000 for STM32F42xxx/43xxx devices.  
    114            *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
    115            *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
    116            * @retval None
    117            */

   \                                 In section .text, align 2, keep-with-next
    118          void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
    119          {
   \                     SYSCFG_MemoryRemapConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    120            /* Check the parameters */
    121            assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
   \   00000004   0xD00A             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD008             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   0000000A   0x2803             CMP      R0,#+3
   \   0000000C   0xD006             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD004             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   00000012   0x2179             MOVS     R1,#+121
   \   00000014   0x.... 0x....      ADR.W    R0,?_0
   \   00000018   0x.... 0x....      BL       assert_failed
    122          
    123            SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
   \                     ??SYSCFG_MemoryRemapConfig_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable6  ;; 0x40013800
   \   0000001E   0x6004             STR      R4,[R0, #+0]
    124          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    125          
    126          /**
    127            * @brief  Enables or disables the Interal FLASH Bank Swapping.
    128            *   
    129            * @note   This function can be used only for STM32F42xxx/43xxx devices. 
    130            *
    131            * @param  NewState: new state of Interal FLASH Bank swapping.
    132            *          This parameter can be one of the following values:
    133            *            @arg ENABLE: Flash Bank2 mapped at 0x08000000 (and aliased @0x00000000) 
    134            *                         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)   
    135            *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
    136                                      and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
    137            * @retval None
    138            */

   \                                 In section .text, align 2, keep-with-next
    139          void SYSCFG_MemorySwappingBank(FunctionalState NewState)
    140          {
   \                     SYSCFG_MemorySwappingBank: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    141            /* Check the parameters */
    142            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xD006             BEQ.N    ??SYSCFG_MemorySwappingBank_0
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD004             BEQ.N    ??SYSCFG_MemorySwappingBank_0
   \   0000000A   0x218E             MOVS     R1,#+142
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       assert_failed
    143          
    144            *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
   \                     ??SYSCFG_MemorySwappingBank_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_1  ;; 0x42270020
   \   00000016   0x6004             STR      R4,[R0, #+0]
    145          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    146          
    147          /**
    148            * @brief  Selects the GPIO pin used as EXTI Line.
    149            * @param  EXTI_PortSourceGPIOx : selects the GPIO port to be used as source for
    150            *          EXTI lines where x can be (A..K) for STM32F42xxx/43xxx devices, (A..I) 
    151            *          for STM32F405xx/407xx and STM32F415xx/417xx devices or (A, B, C, D and H)
    152            *          for STM32401xx devices.  
    153            *            
    154            * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
    155            *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
    156            *           for EXTI_PortSourceGPIOI x can be (0..11) for STM32F405xx/407xx
    157            *           and STM32F405xx/407xx devices and for EXTI_PortSourceGPIOK x can   
    158            *           be (0..7) for STM32F42xxx/43xxx devices. 
    159            *             
    160            * @retval None
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
    163          {
   \                     SYSCFG_EXTILineConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    164            uint32_t tmp = 0x00;
    165          
    166            /* Check the parameters */
    167            assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD018             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD016             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD014             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD012             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xD010             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000001A   0x2805             CMP      R0,#+5
   \   0000001C   0xD00E             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000001E   0x2806             CMP      R0,#+6
   \   00000020   0xD00C             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000022   0x2807             CMP      R0,#+7
   \   00000024   0xD00A             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000026   0x2808             CMP      R0,#+8
   \   00000028   0xD008             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000002A   0x2809             CMP      R0,#+9
   \   0000002C   0xD006             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000002E   0x280A             CMP      R0,#+10
   \   00000030   0xD004             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000032   0x21A7             MOVS     R1,#+167
   \   00000034   0x.... 0x....      ADR.W    R0,?_0
   \   00000038   0x.... 0x....      BL       assert_failed
    168            assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
   \                     ??SYSCFG_EXTILineConfig_0: (+1)
   \   0000003C   0x002E             MOVS     R6,R5
   \   0000003E   0xD022             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000040   0x2E01             CMP      R6,#+1
   \   00000042   0xD020             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000044   0x2E02             CMP      R6,#+2
   \   00000046   0xD01E             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000048   0x2E03             CMP      R6,#+3
   \   0000004A   0xD01C             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000004C   0x2E04             CMP      R6,#+4
   \   0000004E   0xD01A             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000050   0x2E05             CMP      R6,#+5
   \   00000052   0xD018             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000054   0x2E06             CMP      R6,#+6
   \   00000056   0xD016             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000058   0x2E07             CMP      R6,#+7
   \   0000005A   0xD014             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000005C   0x2E08             CMP      R6,#+8
   \   0000005E   0xD012             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000060   0x2E09             CMP      R6,#+9
   \   00000062   0xD010             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000064   0x2E0A             CMP      R6,#+10
   \   00000066   0xD00E             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000068   0x2E0B             CMP      R6,#+11
   \   0000006A   0xD00C             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000006C   0x2E0C             CMP      R6,#+12
   \   0000006E   0xD00A             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000070   0x2E0D             CMP      R6,#+13
   \   00000072   0xD008             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000074   0x2E0E             CMP      R6,#+14
   \   00000076   0xD006             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000078   0x2E0F             CMP      R6,#+15
   \   0000007A   0xD004             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000007C   0x21A8             MOVS     R1,#+168
   \   0000007E   0x.... 0x....      ADR.W    R0,?_0
   \   00000082   0x.... 0x....      BL       assert_failed
    169          
    170            tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
    171            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
   \                     ??SYSCFG_EXTILineConfig_1: (+1)
   \   00000086   0xF005 0x0003      AND      R0,R5,#0x3
   \   0000008A   0x0080             LSLS     R0,R0,#+2
   \   0000008C   0xF026 0x0103      BIC      R1,R6,#0x3
   \   00000090   0x....             LDR.N    R2,??DataTable6_2  ;; 0x40013808
   \   00000092   0x588B             LDR      R3,[R1, R2]
   \   00000094   0x250F             MOVS     R5,#+15
   \   00000096   0x4085             LSLS     R5,R5,R0
   \   00000098   0x43AB             BICS     R3,R3,R5
   \   0000009A   0x508B             STR      R3,[R1, R2]
    172            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
   \   0000009C   0x588B             LDR      R3,[R1, R2]
   \   0000009E   0xFA04 0xF000      LSL      R0,R4,R0
   \   000000A2   0x4318             ORRS     R0,R0,R3
   \   000000A4   0x5088             STR      R0,[R1, R2]
    173          }
   \   000000A6   0xBD70             POP      {R4-R6,PC}       ;; return
    174          
    175          /**
    176            * @brief  Selects the ETHERNET media interface 
    177            * @param  SYSCFG_ETH_MediaInterface: specifies the Media Interface mode. 
    178            *          This parameter can be one of the following values: 
    179            *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
    180            *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
    181            * @retval None 
    182            */

   \                                 In section .text, align 2, keep-with-next
    183          void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
    184          { 
   \                     SYSCFG_ETH_MediaInterfaceConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    185            assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
   \   00000004   0xD006             BEQ.N    ??SYSCFG_ETH_MediaInterfaceConfig_0
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD004             BEQ.N    ??SYSCFG_ETH_MediaInterfaceConfig_0
   \   0000000A   0x21B9             MOVS     R1,#+185
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       assert_failed
    186            /* Configure MII_RMII selection bit */ 
    187            *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
   \                     ??SYSCFG_ETH_MediaInterfaceConfig_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_3  ;; 0x422700dc
   \   00000016   0x6004             STR      R4,[R0, #+0]
    188          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    189          
    190          /**
    191            * @brief  Enables or disables the I/O Compensation Cell.
    192            * @note   The I/O compensation cell can be used only when the device supply
    193            *         voltage ranges from 2.4 to 3.6 V.  
    194            * @param  NewState: new state of the I/O Compensation Cell.
    195            *          This parameter can be one of the following values:
    196            *            @arg ENABLE: I/O compensation cell enabled  
    197            *            @arg DISABLE: I/O compensation cell power-down mode  
    198            * @retval None
    199            */

   \                                 In section .text, align 2, keep-with-next
    200          void SYSCFG_CompensationCellCmd(FunctionalState NewState)
    201          {
   \                     SYSCFG_CompensationCellCmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    202            /* Check the parameters */
    203            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xD006             BEQ.N    ??SYSCFG_CompensationCellCmd_0
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD004             BEQ.N    ??SYSCFG_CompensationCellCmd_0
   \   0000000A   0x21CB             MOVS     R1,#+203
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       assert_failed
    204          
    205            *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
   \                     ??SYSCFG_CompensationCellCmd_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable6_4  ;; 0x42270400
   \   00000016   0x6004             STR      R4,[R0, #+0]
    206          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    207          
    208          /**
    209            * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
    210            * @param  None
    211            * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
    212            */

   \                                 In section .text, align 2, keep-with-next
    213          FlagStatus SYSCFG_GetCompensationCellStatus(void)
    214          {
    215            FlagStatus bitstatus = RESET;
    216              
    217            if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
   \                     SYSCFG_GetCompensationCellStatus: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40013820
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    218            {
    219              bitstatus = SET;
    220            }
    221            else
    222            {
    223              bitstatus = RESET;
   \   00000004   0x0A00             LSRS     R0,R0,#+8
   \   00000006   0xF000 0x0001      AND      R0,R0,#0x1
    224            }
    225            return bitstatus;
   \   0000000A   0x4770             BX       LR               ;; return
    226          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x42270020         DC32     0x42270020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x422700DC         DC32     0x422700dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x42270400         DC32     0x42270400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40013820         DC32     0x40013820

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 57H, 4FH, 52H, 4BH, 5CH
   \              0x5C 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5C    
   \   00000008   0x46 0x69          DC8 46H, 69H, 72H, 6DH, 77H, 61H, 72H, 65H
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \   00000010   0x5F 0x4C          DC8 5FH, 4CH, 61H, 73H, 74H, 52H, 65H, 6CH
   \              0x61 0x73    
   \              0x74 0x52    
   \              0x65 0x6C    
   \   00000018   0x65 0x61          DC8 65H, 61H, 73H, 65H, 5CH, 5FH, 37H, 2EH
   \              0x73 0x65    
   \              0x5C 0x5F    
   \              0x37 0x2E    
   \   00000020   0x30 0x2E          DC8 30H, 2EH, 39H, 35H, 5CH, 4DH, 61H, 69H
   \              0x39 0x35    
   \              0x5C 0x4D    
   \              0x61 0x69    
   \   00000028   0x6E 0x4D          DC8 6EH, 4DH, 43H, 55H, 5CH, 4CH, 69H, 62H
   \              0x43 0x55    
   \              0x5C 0x4C    
   \              0x69 0x62    
   \   00000030   0x72 0x61          DC8 72H, 61H, 72H, 69H, 65H, 73H, 5CH, 53H
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x5C 0x53    
   \   00000038   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 46H, 34H, 78H, 78H
   \              0x33 0x32    
   \              0x46 0x34    
   \              0x78 0x78    
   \   00000040   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000048   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000050   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 73H, 74H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x73 0x74    
   \   00000058   0x6D 0x33          DC8 6DH, 33H, 32H, 66H, 34H, 78H, 78H, 5FH
   \              0x32 0x66    
   \              0x34 0x78    
   \              0x78 0x5F    
   \   00000060   0x73 0x79          DC8 73H, 79H, 73H, 63H, 66H, 67H, 2EH, 63H
   \              0x73 0x63    
   \              0x66 0x67    
   \              0x2E 0x63    
   \   00000068   0x00               DC8 0
   \   00000069   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    227          
    228          /**
    229            * @}
    230            */
    231          
    232          /**
    233            * @}
    234            */
    235          
    236          /**
    237            * @}
    238            */
    239          
    240          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SYSCFG_CompensationCellCmd
         8   -> assert_failed
       8   SYSCFG_DeInit
         0   -> RCC_APB2PeriphResetCmd
         8   -> RCC_APB2PeriphResetCmd
       8   SYSCFG_ETH_MediaInterfaceConfig
         8   -> assert_failed
      16   SYSCFG_EXTILineConfig
        16   -> assert_failed
       0   SYSCFG_GetCompensationCellStatus
       8   SYSCFG_MemoryRemapConfig
         8   -> assert_failed
       8   SYSCFG_MemorySwappingBank
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
     108  ?_0
      26  SYSCFG_CompensationCellCmd
      26  SYSCFG_DeInit
      26  SYSCFG_ETH_MediaInterfaceConfig
     168  SYSCFG_EXTILineConfig
      12  SYSCFG_GetCompensationCellStatus
      34  SYSCFG_MemoryRemapConfig
      26  SYSCFG_MemorySwappingBank

 
 450 bytes in section .text
 
 450 bytes of CODE memory

Errors: none
Warnings: none

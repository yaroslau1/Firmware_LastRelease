###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:09
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c
#        -D IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D
#        HAVE_CONFIG_H -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\misc.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\misc.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            *          
     10            *  @verbatim   
     11            *                               
     12            *          ===================================================================      
     13            *                        How to configure Interrupts using driver 
     14            *          ===================================================================      
     15            * 
     16            *            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     17            *            The Cortex-M4 exceptions are managed by CMSIS functions.
     18            *
     19            *            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig()
     20            *                function according to the following table.
     21           
     22            *  The table below gives the allowed values of the pre-emption priority and subpriority according
     23            *  to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     24            *    ==========================================================================================================================
     25            *      NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     26            *    ==========================================================================================================================
     27            *     NVIC_PriorityGroup_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     28            *                           |                                   |                             | 4 bits for subpriority
     29            *    --------------------------------------------------------------------------------------------------------------------------
     30            *     NVIC_PriorityGroup_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     31            *                           |                                   |                             | 3 bits for subpriority
     32            *    --------------------------------------------------------------------------------------------------------------------------    
     33            *     NVIC_PriorityGroup_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     34            *                           |                                   |                             | 2 bits for subpriority
     35            *    --------------------------------------------------------------------------------------------------------------------------    
     36            *     NVIC_PriorityGroup_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     37            *                           |                                   |                             | 1 bits for subpriority
     38            *    --------------------------------------------------------------------------------------------------------------------------    
     39            *     NVIC_PriorityGroup_4  |                0-15               |            0                | 4 bits for pre-emption priority
     40            *                           |                                   |                             | 0 bits for subpriority                       
     41            *    ==========================================================================================================================     
     42            *
     43            *            2. Enable and Configure the priority of the selected IRQ Channels using NVIC_Init()  
     44            *
     45            * @note  When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
     46            *        The pending IRQ priority will be managed only by the subpriority.
     47            *
     48            * @note  IRQ priority order (sorted by highest to lowest priority):
     49            *         - Lowest pre-emption priority
     50            *         - Lowest subpriority
     51            *         - Lowest hardware priority (IRQ number)
     52            *
     53            *  @endverbatim
     54            *
     55            ******************************************************************************
     56            * @attention
     57            *
     58            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     59            *
     60            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     61            * You may not use this file except in compliance with the License.
     62            * You may obtain a copy of the License at:
     63            *
     64            *        http://www.st.com/software_license_agreement_liberty_v2
     65            *
     66            * Unless required by applicable law or agreed to in writing, software 
     67            * distributed under the License is distributed on an "AS IS" BASIS, 
     68            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     69            * See the License for the specific language governing permissions and
     70            * limitations under the License.
     71            *
     72            ******************************************************************************
     73            */
     74          
     75          /* Includes ------------------------------------------------------------------*/
     76          #include "misc.h"
     77          
     78          /** @addtogroup STM32F4xx_StdPeriph_Driver
     79            * @{
     80            */
     81          
     82          /** @defgroup MISC 
     83            * @brief MISC driver modules
     84            * @{
     85            */
     86          
     87          /* Private typedef -----------------------------------------------------------*/
     88          /* Private define ------------------------------------------------------------*/
     89          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     90          
     91          /* Private macro -------------------------------------------------------------*/
     92          /* Private variables ---------------------------------------------------------*/
     93          /* Private function prototypes -----------------------------------------------*/
     94          /* Private functions ---------------------------------------------------------*/
     95          
     96          /** @defgroup MISC_Private_Functions
     97            * @{
     98            */
     99          
    100          /**
    101            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
    102            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
    103            *   This parameter can be one of the following values:
    104            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
    105            *                                4 bits for subpriority
    106            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    107            *                                3 bits for subpriority
    108            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    109            *                                2 bits for subpriority
    110            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    111            *                                1 bits for subpriority
    112            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    113            *                                0 bits for subpriority
    114            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    115            *         The pending IRQ priority will be managed only by the subpriority. 
    116            * @retval None
    117            */

   \                                 In section .text, align 2, keep-with-next
    118          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    119          {
   \                     NVIC_PriorityGroupConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    120            /* Check the parameters */
    121            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
   \   00000004   0xF5B4 0x6FE0      CMP      R4,#+1792
   \   00000008   0xD010             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   0000000A   0xF5B4 0x6FC0      CMP      R4,#+1536
   \   0000000E   0xD00D             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000010   0xF5B4 0x6FA0      CMP      R4,#+1280
   \   00000014   0xD00A             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000016   0xF5B4 0x6F80      CMP      R4,#+1024
   \   0000001A   0xD007             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   0000001C   0xF5B4 0x7F40      CMP      R4,#+768
   \   00000020   0xD004             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000022   0x2179             MOVS     R1,#+121
   \   00000024   0x.... 0x....      ADR.W    R0,?_0
   \   00000028   0x.... 0x....      BL       assert_failed
    122            
    123            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    124            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     ??NVIC_PriorityGroupConfig_0: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable5  ;; 0x5fa0000
   \   0000002E   0x4320             ORRS     R0,R0,R4
   \   00000030   0x....             LDR.N    R1,??DataTable5_1  ;; 0xe000ed0c
   \   00000032   0x6008             STR      R0,[R1, #+0]
    125          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    126          
    127          /**
    128            * @brief  Initializes the NVIC peripheral according to the specified
    129            *         parameters in the NVIC_InitStruct.
    130            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    131            *         function should be called before. 
    132            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    133            *         the configuration information for the specified NVIC peripheral.
    134            * @retval None
    135            */

   \                                 In section .text, align 2, keep-with-next
    136          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    137          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    138            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    139            
    140            /* Check the parameters */
    141            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
   \   00000004   0x78E0             LDRB     R0,[R4, #+3]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD006             BEQ.N    ??NVIC_Init_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD004             BEQ.N    ??NVIC_Init_0
   \   0000000E   0x218D             MOVS     R1,#+141
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    142            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
   \                     ??NVIC_Init_0: (+1)
   \   00000018   0x7860             LDRB     R0,[R4, #+1]
   \   0000001A   0x2810             CMP      R0,#+16
   \   0000001C   0xDB04             BLT.N    ??NVIC_Init_1
   \   0000001E   0x218E             MOVS     R1,#+142
   \   00000020   0x.... 0x....      ADR.W    R0,?_0
   \   00000024   0x.... 0x....      BL       assert_failed
    143            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
   \                     ??NVIC_Init_1: (+1)
   \   00000028   0x78A0             LDRB     R0,[R4, #+2]
   \   0000002A   0x2810             CMP      R0,#+16
   \   0000002C   0xDB04             BLT.N    ??NVIC_Init_2
   \   0000002E   0x218F             MOVS     R1,#+143
   \   00000030   0x.... 0x....      ADR.W    R0,?_0
   \   00000034   0x.... 0x....      BL       assert_failed
    144              
    145            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \                     ??NVIC_Init_2: (+1)
   \   00000038   0x7822             LDRB     R2,[R4, #+0]
   \   0000003A   0x4611             MOV      R1,R2
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x78E3             LDRB     R3,[R4, #+3]
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD01D             BEQ.N    ??NVIC_Init_3
    146            {
    147              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    148              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \   00000044   0x....             LDR.N    R2,??DataTable5_1  ;; 0xe000ed0c
   \   00000046   0x6812             LDR      R2,[R2, #+0]
   \   00000048   0xF402 0x62E0      AND      R2,R2,#0x700
   \   0000004C   0xF5C2 0x62E0      RSB      R2,R2,#+1792
   \   00000050   0x0A12             LSRS     R2,R2,#+8
    149              tmppre = (0x4 - tmppriority);
    150              tmpsub = tmpsub >> tmppriority;
    151          
    152              tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    153              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
    154                  
    155              tmppriority = tmppriority << 0x04;
    156                  
    157              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \   00000052   0x7863             LDRB     R3,[R4, #+1]
   \   00000054   0xF1C2 0x0504      RSB      R5,R2,#+4
   \   00000058   0x40AB             LSLS     R3,R3,R5
   \   0000005A   0x78A5             LDRB     R5,[R4, #+2]
   \   0000005C   0x260F             MOVS     R6,#+15
   \   0000005E   0x4637             MOV      R7,R6
   \   00000060   0x4117             ASRS     R7,R7,R2
   \   00000062   0xEA07 0x0205      AND      R2,R7,R5
   \   00000066   0x431A             ORRS     R2,R2,R3
   \   00000068   0x0112             LSLS     R2,R2,#+4
   \   0000006A   0x....             LDR.N    R3,??DataTable5_2  ;; 0xe000e400
   \   0000006C   0x54CA             STRB     R2,[R1, R3]
    158              
    159              /* Enable the Selected IRQ Channels --------------------------------------*/
    160              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    161                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \   0000006E   0x7821             LDRB     R1,[R4, #+0]
   \   00000070   0xF001 0x021F      AND      R2,R1,#0x1F
   \   00000074   0x4090             LSLS     R0,R0,R2
   \   00000076   0x....             LDR.N    R2,??DataTable5_3  ;; 0xe000e100
   \   00000078   0x1149             ASRS     R1,R1,#+5
   \   0000007A   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   0000007E   0xBDF1             POP      {R0,R4-R7,PC}
    162            }
    163            else
    164            {
    165              /* Disable the Selected IRQ Channels -------------------------------------*/
    166              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    167                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_3: (+1)
   \   00000080   0xF002 0x021F      AND      R2,R2,#0x1F
   \   00000084   0x4090             LSLS     R0,R0,R2
   \   00000086   0x....             LDR.N    R2,??DataTable5_4  ;; 0xe000e180
   \   00000088   0x1149             ASRS     R1,R1,#+5
   \   0000008A   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    168            }
    169          }
   \   0000008E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    170          
    171          /**
    172            * @brief  Sets the vector table location and Offset.
    173            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    174            *   This parameter can be one of the following values:
    175            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    176            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    177            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    178            * @retval None
    179            */

   \                                 In section .text, align 2, keep-with-next
    180          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    181          { 
   \                     NVIC_SetVectorTable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    182            /* Check the parameters */
    183            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
   \   00000006   0xF1B4 0x5F00      CMP      R4,#+536870912
   \   0000000A   0xD007             BEQ.N    ??NVIC_SetVectorTable_0
   \   0000000C   0xF1B4 0x6F00      CMP      R4,#+134217728
   \   00000010   0xD004             BEQ.N    ??NVIC_SetVectorTable_0
   \   00000012   0x21B7             MOVS     R1,#+183
   \   00000014   0x.... 0x....      ADR.W    R0,?_0
   \   00000018   0x.... 0x....      BL       assert_failed
    184            assert_param(IS_NVIC_OFFSET(Offset));  
   \                     ??NVIC_SetVectorTable_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable5_5  ;; 0xfffff
   \   0000001E   0x4285             CMP      R5,R0
   \   00000020   0xD304             BCC.N    ??NVIC_SetVectorTable_1
   \   00000022   0x21B8             MOVS     R1,#+184
   \   00000024   0x.... 0x....      ADR.W    R0,?_0
   \   00000028   0x.... 0x....      BL       assert_failed
    185             
    186            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     ??NVIC_SetVectorTable_1: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable5_6  ;; 0x1fffff80
   \   0000002E   0x4028             ANDS     R0,R0,R5
   \   00000030   0x4320             ORRS     R0,R0,R4
   \   00000032   0x....             LDR.N    R1,??DataTable5_7  ;; 0xe000ed08
   \   00000034   0x6008             STR      R0,[R1, #+0]
    187          }
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    188          
    189          /**
    190            * @brief  Selects the condition for the system to enter low power mode.
    191            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    192            *   This parameter can be one of the following values:
    193            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    194            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    195            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    196            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    197            * @retval None
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    200          {
   \                     NVIC_SystemLPConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    201            /* Check the parameters */
    202            assert_param(IS_NVIC_LP(LowPowerMode));
   \   00000006   0x2810             CMP      R0,#+16
   \   00000008   0xD008             BEQ.N    ??NVIC_SystemLPConfig_0
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xD006             BEQ.N    ??NVIC_SystemLPConfig_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD004             BEQ.N    ??NVIC_SystemLPConfig_0
   \   00000012   0x21CA             MOVS     R1,#+202
   \   00000014   0x.... 0x....      ADR.W    R0,?_0
   \   00000018   0x.... 0x....      BL       assert_failed
    203            assert_param(IS_FUNCTIONAL_STATE(NewState));  
   \                     ??NVIC_SystemLPConfig_0: (+1)
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD006             BEQ.N    ??NVIC_SystemLPConfig_1
   \   00000020   0x2D01             CMP      R5,#+1
   \   00000022   0xD004             BEQ.N    ??NVIC_SystemLPConfig_1
   \   00000024   0x21CB             MOVS     R1,#+203
   \   00000026   0x.... 0x....      ADR.W    R0,?_0
   \   0000002A   0x.... 0x....      BL       assert_failed
    204            
    205            if (NewState != DISABLE)
   \                     ??NVIC_SystemLPConfig_1: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable5_8  ;; 0xe000ed10
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0xD002             BEQ.N    ??NVIC_SystemLPConfig_2
    206            {
    207              SCB->SCR |= LowPowerMode;
   \   00000036   0x4321             ORRS     R1,R4,R1
   \   00000038   0x6001             STR      R1,[R0, #+0]
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}
    208            }
    209            else
    210            {
    211              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \                     ??NVIC_SystemLPConfig_2: (+1)
   \   0000003C   0x43A1             BICS     R1,R1,R4
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    212            }
    213          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    214          
    215          /**
    216            * @brief  Configures the SysTick clock source.
    217            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    218            *   This parameter can be one of the following values:
    219            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    220            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    221            * @retval None
    222            */

   \                                 In section .text, align 2, keep-with-next
    223          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    224          {
   \                     SysTick_CLKSourceConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    225            /* Check the parameters */
    226            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
   \   00000004   0x2C04             CMP      R4,#+4
   \   00000006   0xD007             BEQ.N    ??SysTick_CLKSourceConfig_0
   \   00000008   0xF114 0x0F05      CMN      R4,#+5
   \   0000000C   0xD004             BEQ.N    ??SysTick_CLKSourceConfig_0
   \   0000000E   0x21E2             MOVS     R1,#+226
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       assert_failed
    227            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000e010
   \   0000001A   0x2C04             CMP      R4,#+4
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xD103             BNE.N    ??SysTick_CLKSourceConfig_1
    228            {
    229              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \   00000020   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0xBD10             POP      {R4,PC}
    230            }
    231            else
    232            {
    233              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_1: (+1)
   \   00000028   0xF021 0x0104      BIC      R1,R1,#0x4
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    234            }
    235          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x000FFFFF         DC32     0xfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x1FFFFF80         DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 57H, 4FH, 52H, 4BH, 5CH
   \              0x5C 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5C    
   \   00000008   0x46 0x69          DC8 46H, 69H, 72H, 6DH, 77H, 61H, 72H, 65H
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \   00000010   0x5F 0x4C          DC8 5FH, 4CH, 61H, 73H, 74H, 52H, 65H, 6CH
   \              0x61 0x73    
   \              0x74 0x52    
   \              0x65 0x6C    
   \   00000018   0x65 0x61          DC8 65H, 61H, 73H, 65H, 5CH, 5FH, 37H, 2EH
   \              0x73 0x65    
   \              0x5C 0x5F    
   \              0x37 0x2E    
   \   00000020   0x30 0x2E          DC8 30H, 2EH, 39H, 35H, 5CH, 4DH, 61H, 69H
   \              0x39 0x35    
   \              0x5C 0x4D    
   \              0x61 0x69    
   \   00000028   0x6E 0x4D          DC8 6EH, 4DH, 43H, 55H, 5CH, 4CH, 69H, 62H
   \              0x43 0x55    
   \              0x5C 0x4C    
   \              0x69 0x62    
   \   00000030   0x72 0x61          DC8 72H, 61H, 72H, 69H, 65H, 73H, 5CH, 53H
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x5C 0x53    
   \   00000038   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 46H, 34H, 78H, 78H
   \              0x33 0x32    
   \              0x46 0x34    
   \              0x78 0x78    
   \   00000040   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000048   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000050   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 6DH, 69H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x6D 0x69    
   \   00000058   0x73 0x63          DC8 73H, 63H, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   0000005D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    236          
    237          /**
    238            * @}
    239            */
    240          
    241          /**
    242            * @}
    243            */
    244          
    245          /**
    246            * @}
    247            */
    248          
    249          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   NVIC_Init
        24   -> assert_failed
       8   NVIC_PriorityGroupConfig
         8   -> assert_failed
      16   NVIC_SetVectorTable
        16   -> assert_failed
      16   NVIC_SystemLPConfig
        16   -> assert_failed
       8   SysTick_CLKSourceConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      96  ?_0
     144  NVIC_Init
      54  NVIC_PriorityGroupConfig
      56  NVIC_SetVectorTable
      66  NVIC_SystemLPConfig
      48  SysTick_CLKSourceConfig

 
 504 bytes in section .text
 
 504 bytes of CODE memory

Errors: none
Warnings: none

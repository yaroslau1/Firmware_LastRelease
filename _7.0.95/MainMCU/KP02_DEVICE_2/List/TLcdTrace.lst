###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TLcdTrace.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TLcdTrace.cpp -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\TLcdTrace.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\TLcdTrace.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TLcdTrace.cpp
      1          /*
      2              Title:    
      3              Author:   VN Asliuk(Cardian)
      4              Date:     24.08.2010 16:49:08
      5              Purpose:  
      6              Software: 
      7              Hardware: 
      8              Note:    
      9          */
     10          //------------------------------------------------------------------------------------
     11          #include "TLcdTrace.h"
     12          #include <string.h>
     13          //#include "TGuiObjectsV2.h"
     14          #include "TLMX9838.h"
     15          #include "TAppProcessor.h"
     16          //#include "StorageFlash.h"
     17          #include "StnFont.h"
     18          
     19          //------------------------------------------------------------------------------------

   \                                 In section .bss, align 4
     20          int  TLcdTrace::CurrentLine = 0;
     21          int  TLcdTrace::FirstLine = 0;
     22          bool TLcdTrace::Filled = false;
   \                     _ZN9TLcdTrace6FilledE:
   \   00000000                      DS8 1
     23          char TLcdTrace::LinesBuffer[LTR_LINESNUM][LTR_LINEMAXLENGHT];
     24          char TLcdTrace::LinesBufferBk[LTR_LINESNUM][LTR_LINEMAXLENGHT];
     25          bool TLcdTrace::UpdatedLine = false;	
   \                     _ZN9TLcdTrace11UpdatedLineE:
   \   00000001                      DS8 1
     26          bool TLcdTrace::DisableLcdTrace = false;	
   \                     _ZN9TLcdTrace15DisableLcdTraceE:
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \                     _ZN9TLcdTrace11CurrentLineE:
   \   00000004                      DS8 4
   \                     _ZN9TLcdTrace9FirstLineE:
   \   00000008                      DS8 4
     27          int  TLcdTrace::StartingUpStages = 0;	
   \                     _ZN9TLcdTrace16StartingUpStagesE:
   \   0000000C                      DS8 4

   \                                 In section .bss, align 4
   \                     _ZN9TLcdTrace11LinesBufferE:
   \   00000000                      DS8 212

   \                                 In section .bss, align 4
   \                     _ZN9TLcdTrace13LinesBufferBkE:
   \   00000000                      DS8 212
     28          //------------------------------------------------------------------------------------
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void TLcdTrace::UpdateEnable()
     31          {
     32          	UpdatedLine = true;		
   \                     _ZN9TLcdTrace12UpdateEnableEv: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable6
   \   00000004   0x7048             STRB     R0,[R1, #+1]
     33          }
   \   00000006   0x4770             BX       LR               ;; return
     34          //------------------------------------------------------------------------------------
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void TLcdTrace::AddLineX(const char *str,int num)
     37          {
   \                     _ZN9TLcdTrace8AddLineXEPKci: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
     38          #ifdef LCD_TRACE
     39          	static char str1[10];
     40          	static char str2[20];
     41          
     42          	strcpy(str2,str);
   \   00000004   0x....             LDR.N    R5,??DataTable6_1
   \   00000006   0x4601             MOV      R1,R0
   \   00000008   0xF105 0x000C      ADD      R0,R5,#+12
   \   0000000C   0x.... 0x....      BL       strcpy
     43          	itos(num,str1,6,HEXADECIMAL);
   \   00000010   0x2310             MOVS     R3,#+16
   \   00000012   0x2206             MOVS     R2,#+6
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       _Z4itosiPci5Radix
     44          	strcat(str2,str1);
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0xF105 0x000C      ADD      R0,R5,#+12
   \   00000022   0x.... 0x....      BL       strcat
     45            AddLine(str2);
   \   00000026   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000002A   0x....             B.N      _ZN9TLcdTrace7AddLineEPKc
     46          #endif //LCD_TRACE
     47          }

   \                                 In section .bss, align 4
   \                     ??str1:
   \   00000000                      DS8 12
   \   0000000C                      DS8 20
     48          //------------------------------------------------------------------------------------
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void TLcdTrace::AddLine(const char *str,int num)
     51          {
   \                     _ZN9TLcdTrace7AddLineEPKci: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
     52          #ifdef LCD_TRACE
     53          	static char str1[10];
     54          	static char str2[20];
     55          
     56          	strcpy(str2,str);
   \   00000004   0x....             LDR.N    R5,??DataTable6_2
   \   00000006   0x4601             MOV      R1,R0
   \   00000008   0xF105 0x000C      ADD      R0,R5,#+12
   \   0000000C   0x.... 0x....      BL       strcpy
     57          	itos(num,str1,6,DECIMAL);
   \   00000010   0x230A             MOVS     R3,#+10
   \   00000012   0x2206             MOVS     R2,#+6
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       _Z4itosiPci5Radix
     58          	strcat(str2,str1);
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0xF105 0x000C      ADD      R0,R5,#+12
   \   00000022   0x.... 0x....      BL       strcat
     59            AddLine(str2);
   \   00000026   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000002A                      REQUIRE _ZN9TLcdTrace7AddLineEPKc
   \   0000002A                      ;; // Fall through to label TLcdTrace::AddLine(char const *)
     60          #endif //LCD_TRACE
     61          }

   \                                 In section .bss, align 4
   \                     ??str1_1:
   \   00000000                      DS8 12
   \   0000000C                      DS8 20
     62          //------------------------------------------------------------------------------------
     63          

   \                                 In section .text, align 2, keep-with-next
     64          void TLcdTrace::AddLine(const char *str)
     65          {
   \                     _ZN9TLcdTrace7AddLineEPKc: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     66          #ifdef LCD_TRACE
     67          //	if(DisableLcdTrace) return;
     68          	
     69          	bool FillSpaces = false;
   \   00000002   0x2200             MOVS     R2,#+0
     70          
     71          	UpdatedLine = false;		
   \   00000004   0x....             LDR.N    R4,??DataTable6
   \   00000006   0x4611             MOV      R1,R2
   \   00000008   0x7061             STRB     R1,[R4, #+1]
     72          	
     73          	for(int i = 0;i < LTR_LINEMAXLENGHT;i++)
   \   0000000A   0x460B             MOV      R3,R1
   \   0000000C   0x....             LDR.N    R6,??DataTable6_3
   \   0000000E   0x2715             MOVS     R7,#+21
   \   00000010   0xE001             B.N      ??AddLine_0
     74          	{
     75          		if(str[i] == 0) FillSpaces = true;
     76          		if(FillSpaces)	
     77          			LinesBuffer[CurrentLine][i] = ' ';
     78          		else	
     79          			LinesBuffer[CurrentLine][i] = str[i];
   \                     ??AddLine_1: (+1)
   \   00000012   0x545D             STRB     R5,[R3, R1]
   \                     ??AddLine_2: (+1)
   \   00000014   0x1C5B             ADDS     R3,R3,#+1
   \                     ??AddLine_0: (+1)
   \   00000016   0x2B15             CMP      R3,#+21
   \   00000018   0xDA0B             BGE.N    ??AddLine_3
   \   0000001A   0x5C1D             LDRB     R5,[R3, R0]
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD100             BNE.N    ??AddLine_4
   \   00000020   0x2201             MOVS     R2,#+1
   \                     ??AddLine_4: (+1)
   \   00000022   0x6861             LDR      R1,[R4, #+4]
   \   00000024   0xFB07 0x6101      MLA      R1,R7,R1,R6
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD0F2             BEQ.N    ??AddLine_1
   \   0000002C   0x2520             MOVS     R5,#+32
   \   0000002E   0x545D             STRB     R5,[R3, R1]
   \   00000030   0xE7F0             B.N      ??AddLine_2
     80          	}
     81          	
     82          	LinesBuffer[CurrentLine][LTR_LINEMAXLENGHT - 1] = 0;
   \                     ??AddLine_3: (+1)
   \   00000032   0x6861             LDR      R1,[R4, #+4]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x4632             MOV      R2,R6
   \   00000038   0x463B             MOV      R3,R7
   \   0000003A   0xFB03 0x2201      MLA      R2,R3,R1,R2
   \   0000003E   0x7510             STRB     R0,[R2, #+20]
     83          	
     84          	if(Filled == true) 
   \   00000040   0x7820             LDRB     R0,[R4, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD006             BEQ.N    ??AddLine_5
     85          		{
     86          			FirstLine++;
   \   00000046   0x68A0             LDR      R0,[R4, #+8]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x60A0             STR      R0,[R4, #+8]
     87          			if(FirstLine >= LTR_LINESNUM)
   \   0000004C   0x280A             CMP      R0,#+10
   \   0000004E   0xDB01             BLT.N    ??AddLine_5
     88          				{
     89          					FirstLine = 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x60A0             STR      R0,[R4, #+8]
     90          				}
     91          		}
     92          	
     93          	CurrentLine++;
   \                     ??AddLine_5: (+1)
   \   00000054   0x1C48             ADDS     R0,R1,#+1
   \   00000056   0x6060             STR      R0,[R4, #+4]
     94          	if(CurrentLine >= LTR_LINESNUM)
   \   00000058   0x280A             CMP      R0,#+10
   \   0000005A   0xDB03             BLT.N    ??AddLine_6
     95          		{
     96          			CurrentLine = 0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x6060             STR      R0,[R4, #+4]
     97          			Filled = true;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x7020             STRB     R0,[R4, #+0]
     98          		}
     99          		
    100          	InvalidateLines();
   \                     ??AddLine_6: (+1)
   \   00000064   0x.... 0x....      BL       _ZN9TLcdTrace15InvalidateLinesEv
    101          		
    102          //	vTaskDelay(ADDTRACE_DELAY/portTICK_RATE_MS);	
    103          
    104          	StartingUpStages++;
   \   00000068   0x68E0             LDR      R0,[R4, #+12]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x60E0             STR      R0,[R4, #+12]
    105          #endif //LCD_TRACE
    106          }
   \   0000006E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    107          //------------------------------------------------------------------------------------
    108          

   \                                 In section .text, align 2, keep-with-next
    109          void TLcdTrace::UpdateLastLine(const char *str)
    110          {
   \                     _ZN9TLcdTrace14UpdateLastLineEPKc: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    111          	if(!UpdatedLine) return;
   \   00000002   0x....             LDR.N    R4,??DataTable6
   \   00000004   0x7861             LDRB     R1,[R4, #+1]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD036             BEQ.N    ??UpdateLastLine_0
    112          	
    113          	bool FillSpaces = false;
   \   0000000A   0x2100             MOVS     R1,#+0
    114          	
    115          	CurrentLine--;
   \   0000000C   0x6862             LDR      R2,[R4, #+4]
   \   0000000E   0x1E52             SUBS     R2,R2,#+1
   \   00000010   0x6062             STR      R2,[R4, #+4]
    116          	if(CurrentLine < 0)
   \   00000012   0xD501             BPL.N    ??UpdateLastLine_1
    117          	{
    118          		CurrentLine = LTR_LINESNUM - 1;
   \   00000014   0x2209             MOVS     R2,#+9
   \   00000016   0x6062             STR      R2,[R4, #+4]
    119          	}
    120          
    121          	for(int i = 0;i < LTR_LINEMAXLENGHT;i++)
   \                     ??UpdateLastLine_1: (+1)
   \   00000018   0x460B             MOV      R3,R1
   \   0000001A   0x2715             MOVS     R7,#+21
   \   0000001C   0xE001             B.N      ??UpdateLastLine_2
    122          	{
    123          		if(str[i] == 0) FillSpaces = true;
    124          		if(FillSpaces)	
    125          			LinesBuffer[CurrentLine][i] = ' ';
    126          		else	
    127          			LinesBuffer[CurrentLine][i] = str[i];
   \                     ??UpdateLastLine_3: (+1)
   \   0000001E   0x549D             STRB     R5,[R3, R2]
   \                     ??UpdateLastLine_4: (+1)
   \   00000020   0x1C5B             ADDS     R3,R3,#+1
   \                     ??UpdateLastLine_2: (+1)
   \   00000022   0x2B15             CMP      R3,#+21
   \   00000024   0xDA0C             BGE.N    ??UpdateLastLine_5
   \   00000026   0x5C1D             LDRB     R5,[R3, R0]
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD100             BNE.N    ??UpdateLastLine_6
   \   0000002C   0x2101             MOVS     R1,#+1
   \                     ??UpdateLastLine_6: (+1)
   \   0000002E   0x....             LDR.N    R2,??DataTable6_3
   \   00000030   0x6866             LDR      R6,[R4, #+4]
   \   00000032   0xFB07 0x2206      MLA      R2,R7,R6,R2
   \   00000036   0x2900             CMP      R1,#+0
   \   00000038   0xD0F1             BEQ.N    ??UpdateLastLine_3
   \   0000003A   0x2520             MOVS     R5,#+32
   \   0000003C   0x549D             STRB     R5,[R3, R2]
   \   0000003E   0xE7EF             B.N      ??UpdateLastLine_4
    128          	}
    129          	
    130          	LinesBuffer[CurrentLine][LTR_LINEMAXLENGHT - 1] = 0;
   \                     ??UpdateLastLine_5: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable6_3
   \   00000042   0x6861             LDR      R1,[R4, #+4]
   \   00000044   0x463A             MOV      R2,R7
   \   00000046   0xFB02 0x0201      MLA      R2,R2,R1,R0
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x7510             STRB     R0,[R2, #+20]
    131          	
    132          	SBYTE y = 62 - (LTR_LINEOFFSET*(LTR_LINESNUM));
    133          		
    134          	//Draw Lines
    135          //	TAppProcessor::TaskFlags |= TASKF_INV;
    136          	if(!DisableLcdTrace) 
   \   0000004E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD108             BNE.N    ??UpdateLastLine_7
    137          	{
    138          		PutStnString(0,y,LinesBuffer[CurrentLine],clBlack,clWhite);	
   \   00000054   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0xF64F 0x71D0      MOVW     R1,#+65488
   \   00000060   0x4618             MOV      R0,R3
   \   00000062   0x.... 0x....      BL       _ZN9TLcdTrace12PutStnStringEttPctt
    139          	}
    140          //	vTaskResume(TLcd::xLcdInvalidate);
    141          //	TAppProcessor::TaskFlags &= ~TASKF_INV;
    142          	
    143          	CurrentLine++;
   \                     ??UpdateLastLine_7: (+1)
   \   00000066   0x6860             LDR      R0,[R4, #+4]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0x6060             STR      R0,[R4, #+4]
    144          	if(CurrentLine >= LTR_LINESNUM)
   \   0000006C   0x280A             CMP      R0,#+10
   \   0000006E   0xDB03             BLT.N    ??UpdateLastLine_0
    145          		{
    146          			CurrentLine = 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x6060             STR      R0,[R4, #+4]
    147          			Filled = true;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x7020             STRB     R0,[R4, #+0]
    148          		}
    149          }
   \                     ??UpdateLastLine_0: (+1)
   \   00000078   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    150          //------------------------------------------------------------------------------------
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void TLcdTrace::AddLine(bool key, const char *str)
    153          {
    154          #ifdef LCD_TRACE
    155          //	if(DisableLcdTrace) return;
    156          
    157          	UpdatedLine = false;		
   \                     _ZN9TLcdTrace7AddLineEbPKc: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R2,??DataTable6
   \   00000004   0x7050             STRB     R0,[R2, #+1]
    158          
    159          	#ifdef LCD_TRACE_STEPBYSTEP
    160          	  if(TFlash::SF_GetData8(START_UP_SYSTEM) == 0xFF)
    161          	  {	
    162          			if(key)
    163          				{
    164          					while(!TPushButton::GetButtonTriggerState())
    165          					{
    166          						vTaskDelay(50/portTICK_RATE_MS);	
    167          					}
    168          					TPushButton::ResetButtonTrigger();
    169          				}
    170          			//TSound::PlaySound(_modiShortBeep);	
    171          		}		
    172          	#endif		
    173          	AddLine(str);
   \   00000006   0x4608             MOV      R0,R1
   \   00000008   0x....             B.N      _ZN9TLcdTrace7AddLineEPKc
    174          #endif //LCD_TRACE
    175          }
    176          //------------------------------------------------------------------------------------
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void TLcdTrace::Clear()
    179          {
    180          	CurrentLine = 0;
   \                     _ZN9TLcdTrace5ClearEv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6041             STR      R1,[R0, #+4]
    181          	FirstLine = 0;
   \   00000006   0x6081             STR      R1,[R0, #+8]
    182          	Filled = false;
   \   00000008   0x7001             STRB     R1,[R0, #+0]
    183          	
    184          	for(int i = 0;i < LTR_LINESNUM;i++)
   \   0000000A   0x4608             MOV      R0,R1
   \   0000000C   0xE000             B.N      ??Clear_0
   \                     ??Clear_1: (+1)
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??Clear_0: (+1)
   \   00000010   0x280A             CMP      R0,#+10
   \   00000012   0xDA0F             BGE.N    ??Clear_2
    185          		for(int j = 0;j < LTR_LINEMAXLENGHT;j++)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xE002             B.N      ??Clear_3
    186          			{
    187          				if(j == (LTR_LINEMAXLENGHT-1))
    188          					LinesBuffer[i][j] = 0;
    189          				else	
    190          					LinesBuffer[i][j] = ' ';
   \                     ??Clear_4: (+1)
   \   00000018   0x2320             MOVS     R3,#+32
   \   0000001A   0x548B             STRB     R3,[R1, R2]
   \                     ??Clear_5: (+1)
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \                     ??Clear_3: (+1)
   \   0000001E   0x2915             CMP      R1,#+21
   \   00000020   0xDAF5             BGE.N    ??Clear_1
   \   00000022   0x....             LDR.N    R2,??DataTable6_3
   \   00000024   0x2315             MOVS     R3,#+21
   \   00000026   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000002A   0x2914             CMP      R1,#+20
   \   0000002C   0xD1F4             BNE.N    ??Clear_4
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x7513             STRB     R3,[R2, #+20]
   \   00000032   0xE7F3             B.N      ??Clear_5
    191          			}
    192          }
   \                     ??Clear_2: (+1)
   \   00000034   0x4770             BX       LR               ;; return
    193          //------------------------------------------------------------------------------------
    194          

   \                                 In section .text, align 2, keep-with-next
    195          void TLcdTrace::InvalidateLines()
    196          {
    197            if(!DisableLcdTrace) 	
   \                     _ZN9TLcdTrace15InvalidateLinesEv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6
   \   00000002   0x7881             LDRB     R1,[R0, #+2]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD000             BEQ.N    ??InvalidateLines_0
   \   00000008   0x4770             BX       LR
    198            {
    199              uint16_t y = 21;
   \                     ??InvalidateLines_0: (+1)
   \   0000000A   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   0000000E   0x2415             MOVS     R4,#+21
    200          
    201              //Draw Lines
    202              int _fl = FirstLine;
   \   00000010   0x6885             LDR      R5,[R0, #+8]
    203              for(int h = 0;h < LTR_LINESNUM;h++)
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0xE024             B.N      ??InvalidateLines_1
    204              {
    205                for(int i = 0;i < LTR_LINEMAXLENGHT;i++)
    206                {
    207                  if(LinesBufferBk[_fl][i] != LinesBuffer[_fl][i])
   \                     ??InvalidateLines_2: (+1)
   \   00000016   0x2015             MOVS     R0,#+21
   \   00000018   0x4368             MULS     R0,R0,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_3
   \   0000001C   0xEB00 0x0801      ADD      R8,R0,R1
   \   00000020   0xF817 0x2008      LDRB     R2,[R7, R8]
   \   00000024   0x....             LDR.N    R1,??DataTable6_4
   \   00000026   0xEB00 0x0901      ADD      R9,R0,R1
   \   0000002A   0xF817 0x0009      LDRB     R0,[R7, R9]
   \   0000002E   0x4290             CMP      R0,R2
   \   00000030   0xD00D             BEQ.N    ??InvalidateLines_3
    208                  {
    209                    PutStnChar(i*8*2,y,LinesBuffer[_fl][i],clAqua,clBlack);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0xF240 0x73FF      MOVW     R3,#+2047
   \   0000003A   0x4621             MOV      R1,R4
   \   0000003C   0xB289             UXTH     R1,R1
   \   0000003E   0x0138             LSLS     R0,R7,#+4
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x.... 0x....      BL       _ZN9TLcdTrace10PutStnCharEtthtt
    210                    LinesBufferBk[_fl][i] = LinesBuffer[_fl][i];
   \   00000046   0xF817 0x0008      LDRB     R0,[R7, R8]
   \   0000004A   0xF807 0x0009      STRB     R0,[R7, R9]
    211                  }
    212                }
   \                     ??InvalidateLines_3: (+1)
   \   0000004E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??InvalidateLines_4: (+1)
   \   00000050   0x2F15             CMP      R7,#+21
   \   00000052   0xDBE0             BLT.N    ??InvalidateLines_2
    213                _fl++;
   \   00000054   0x1C6D             ADDS     R5,R5,#+1
    214                if(_fl >= LTR_LINESNUM) _fl = 0;
   \   00000056   0x2D0A             CMP      R5,#+10
   \   00000058   0xDB00             BLT.N    ??InvalidateLines_5
   \   0000005A   0x2500             MOVS     R5,#+0
    215                y += LTR_LINEOFFSET*2;
   \                     ??InvalidateLines_5: (+1)
   \   0000005C   0x3416             ADDS     R4,R4,#+22
   \   0000005E   0x1C76             ADDS     R6,R6,#+1
   \                     ??InvalidateLines_1: (+1)
   \   00000060   0x2E0A             CMP      R6,#+10
   \   00000062   0xDA01             BGE.N    ??InvalidateLines_6
   \   00000064   0x2700             MOVS     R7,#+0
   \   00000066   0xE7F3             B.N      ??InvalidateLines_4
    216              }
    217            }
    218          }
   \                     ??InvalidateLines_6: (+1)
   \   00000068   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    219          //------------------------------------------------------------------------------------
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void TLcdTrace::Tr_PB_LongPress()
    222          {
    223          //	static bool gui_nongui = false;
    224          	
    225          	TLMX9838::TurnOnBluetooth();
   \                     _ZN9TLcdTrace15Tr_PB_LongPressEv: (+1)
   \   00000000   0x.... 0x....      B.W      _ZN8TLMX983815TurnOnBluetoothEv
    226          	
    227          /*	if(gui_nongui)
    228          	{
    229          		TGuiObjects::Disabled = false;
    230          		DisableLcdTrace = true;
    231          		TGuiObjects::StartDesktop();
    232          	}	
    233          	else	
    234          	{	
    235          		TGuiObjects::DisableAll();
    236          		DisableLcdTrace = false;
    237          		ClearScreen();
    238          		InvalidateLines();	
    239          	}
    240          	gui_nongui = !gui_nongui;*/
    241          }
    242          //------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    243          void TLcdTrace::PutStnChar(uint16_t x, uint16_t y, BYTE Char, uint16_t frontcolor, uint16_t backcolor)
    244          {
   \                     _ZN9TLcdTrace10PutStnCharEtthtt: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4610             MOV      R0,R2
   \   0000000C   0x461F             MOV      R7,R3
    245          	const BYTE *FontPtr = GetTableCharFont1(Char);
   \   0000000E   0x.... 0x....      BL       _Z17GetTableCharFont1c
   \   00000012   0x9001             STR      R0,[SP, #+4]
    246          	
    247          	
    248          //	for(SBYTE u = 11-1;u >= 0;u--)
    249          	for(SBYTE u = 0;u < 11;u++)
   \   00000014   0xF04F 0x0800      MOV      R8,#+0
   \   00000018   0x9C0C             LDR      R4,[SP, #+48]
   \   0000001A   0xE022             B.N      ??PutStnChar_0
    250          		{
    251          			BYTE PixMask = 0x01;
    252          			
    253          			BYTE PixByte = FontPtr[u];
    254          			
    255          			for(BYTE i = 0;i < 8;i++)
    256          				{
    257          					uint16_t PixState = backcolor;
   \                     ??PutStnChar_1: (+1)
   \   0000001C   0x4621             MOV      R1,R4
    258          					if(PixByte & PixMask) PixState = frontcolor;
   \   0000001E   0x4658             MOV      R0,R11
   \   00000020   0x464A             MOV      R2,R9
   \   00000022   0x4210             TST      R0,R2
   \   00000024   0xD000             BEQ.N    ??PutStnChar_2
   \   00000026   0x4639             MOV      R1,R7
    259          					FillRectangle(x+8*2-i*2,y+u*2,2,2,PixState);	
   \                     ??PutStnChar_2: (+1)
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x2302             MOVS     R3,#+2
   \   0000002C   0x461A             MOV      R2,R3
   \   0000002E   0xEA4F 0x0048      LSL      R0,R8,#+1
   \   00000032   0xFA10 0xF186      UXTAH    R1,R0,R6
   \   00000036   0xB289             UXTH     R1,R1
   \   00000038   0xF105 0x0010      ADD      R0,R5,#+16
   \   0000003C   0xEBA0 0x004C      SUB      R0,R0,R12, LSL #+1
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x.... 0x....      BL       _ZN4TLcd13FillRectangleEttttt
    260          					PixMask = PixMask << 1;
   \   00000046   0xEA4F 0x0949      LSL      R9,R9,#+1
   \   0000004A   0xFA5F 0xF989      UXTB     R9,R9
    261          				}
   \   0000004E   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??PutStnChar_3: (+1)
   \   00000052   0xFA5F 0xFA8A      UXTB     R10,R10
   \   00000056   0x46D4             MOV      R12,R10
   \   00000058   0xF1BC 0x0F08      CMP      R12,#+8
   \   0000005C   0xDBDE             BLT.N    ??PutStnChar_1
   \   0000005E   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??PutStnChar_0: (+1)
   \   00000062   0xF1B8 0x0F0B      CMP      R8,#+11
   \   00000066   0xDA07             BGE.N    ??PutStnChar_4
   \   00000068   0xF04F 0x0901      MOV      R9,#+1
   \   0000006C   0x9801             LDR      R0,[SP, #+4]
   \   0000006E   0xF818 0xB000      LDRB     R11,[R8, R0]
   \   00000072   0xF04F 0x0A00      MOV      R10,#+0
   \   00000076   0xE7EC             B.N      ??PutStnChar_3
    262          		}
    263          }
   \                     ??PutStnChar_4: (+1)
   \   00000078   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    264          

   \                                 In section .text, align 2, keep-with-next
    265          void TLcdTrace::PutStnString(uint16_t x, uint16_t y, char* str, uint16_t frontcolor, uint16_t backcolor)
    266          {
   \                     _ZN9TLcdTrace12PutStnStringEttPctt: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
    267          	for(int i = 0;i < LTR_LINEMAXLENGHT;i++)
   \   0000000C   0xF04F 0x0900      MOV      R9,#+0
   \   00000010   0x9C08             LDR      R4,[SP, #+32]
   \   00000012   0xE00E             B.N      ??PutStnString_0
    268          	{
    269          		PutStnChar(x+i*8*2,y,str[i],frontcolor,backcolor);
   \                     ??PutStnString_1: (+1)
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x4643             MOV      R3,R8
   \   0000001A   0xF819 0x2007      LDRB     R2,[R9, R7]
   \   0000001E   0x4631             MOV      R1,R6
   \   00000020   0xEA4F 0x1009      LSL      R0,R9,#+4
   \   00000024   0xFA10 0xF085      UXTAH    R0,R0,R5
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x.... 0x....      BL       _ZN9TLcdTrace10PutStnCharEtthtt
    270          	}
   \   0000002E   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??PutStnString_0: (+1)
   \   00000032   0xF1B9 0x0F15      CMP      R9,#+21
   \   00000036   0xDBED             BLT.N    ??PutStnString_1
    271          }
   \   00000038   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     _ZN9TLcdTrace6FilledE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ??str1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     ??str1_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     _ZN9TLcdTrace11LinesBufferE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     _ZN9TLcdTrace13LinesBufferBkE

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   TLcdTrace::AddLine(bool, char const *)
         0   -> TLcdTrace::AddLine(char const *)
      24   TLcdTrace::AddLine(char const *)
        24   -> TLcdTrace::InvalidateLines()
      16   TLcdTrace::AddLine(char const *, int)
         0   -> TLcdTrace::AddLine(char const *)
        16   -> itos(int, char *, int, Radix)
        16   -> strcat
        16   -> strcpy
      16   TLcdTrace::AddLineX(char const *, int)
         0   -> TLcdTrace::AddLine(char const *)
        16   -> itos(int, char *, int, Radix)
        16   -> strcat
        16   -> strcpy
       0   TLcdTrace::Clear()
      32   TLcdTrace::InvalidateLines()
        32   -> TLcdTrace::PutStnChar(uint16_t, uint16_t, BYTE, uint16_t, uint16_t)
      48   TLcdTrace::PutStnChar(uint16_t, uint16_t, BYTE, uint16_t, uint16_t)
        48   -> GetTableCharFont1(char)
        48   -> TLcd::FillRectangle(uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)
      32   TLcdTrace::PutStnString(uint16_t, uint16_t, char *, uint16_t, uint16_t)
        32   -> TLcdTrace::PutStnChar(uint16_t, uint16_t, BYTE, uint16_t, uint16_t)
       0   TLcdTrace::Tr_PB_LongPress()
         0   -> TLMX9838::TurnOnBluetooth()
       0   TLcdTrace::UpdateEnable()
      24   TLcdTrace::UpdateLastLine(char const *)
        24   -> TLcdTrace::PutStnString(uint16_t, uint16_t, char *, uint16_t, uint16_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
      10  TLcdTrace::AddLine(bool, char const *)
     112  TLcdTrace::AddLine(char const *)
      42  TLcdTrace::AddLine(char const *, int)
      44  TLcdTrace::AddLineX(char const *, int)
      54  TLcdTrace::Clear()
      16  TLcdTrace::Filled
          TLcdTrace::UpdatedLine
          TLcdTrace::DisableLcdTrace
          TLcdTrace::CurrentLine
          TLcdTrace::FirstLine
          TLcdTrace::StartingUpStages
     108  TLcdTrace::InvalidateLines()
     212  TLcdTrace::LinesBuffer
     212  TLcdTrace::LinesBufferBk
     124  TLcdTrace::PutStnChar(uint16_t, uint16_t, BYTE, uint16_t, uint16_t)
      60  TLcdTrace::PutStnString(uint16_t, uint16_t, char *, uint16_t, uint16_t)
       4  TLcdTrace::Tr_PB_LongPress()
       8  TLcdTrace::UpdateEnable()
     122  TLcdTrace::UpdateLastLine(char const *)
      32  str1
          str2
      32  str1
          str2

 
 504 bytes in section .bss
 708 bytes in section .text
 
 708 bytes of CODE memory
 504 bytes of DATA memory

Errors: none
Warnings: none

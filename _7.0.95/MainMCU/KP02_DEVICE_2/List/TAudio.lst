###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TAudio.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TAudio.cpp -D IAR_ARM_CM4
#        -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H -D
#        SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D STENDBUY_NOT_USE
#        -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO -D
#        BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\TAudio.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\TAudio.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\TAudio.cpp
      1          /************************************************************************************/
      2          /* @title		Audio processor														*/
      3          /* @author		Cyber Genius														*/
      4          /* @version		1.0																	*/
      5          /* @date		17.08.2012															*/
      6          /************************************************************************************/
      7          /* @brief																			*/
      8          /************************************************************************************/
      9          
     10          #include "TAudio.h"
     11          #include "THardware.h"
     12          /************************************************************************************/
     13          
     14          /************************************************************************************/
     15          #define ADC1_DR_ADRESS ((uint32_t)0x4001204C)
     16          /************************************************************************************/

   \                                 In section .bss, align 4
     17          int16_t TAudio::ADC1_raw_data[ADC1_BUFFER_SIZE];
   \                     _ZN6TAudio13ADC1_raw_dataE:
   \   00000000                      DS8 2048

   \                                 In section .bss, align 4
     18          int16_t TAudio::Audio_raw_data[AUDIO_BUFFER_SIZE];
   \                     _ZN6TAudio14Audio_raw_dataE:
   \   00000000                      DS8 2048

   \                                 In section .bss, align 1
     19          bool TAudio::VoiceRec = false;
   \                     _ZN6TAudio8VoiceRecE:
   \   00000000                      DS8 1
     20          /************************************************************************************/
     21          
     22          //SpeexBits TAudio::bits;								/* Holds bits so they can be read and written by the Speex routines */

   \                                 In section .bss, align 4
     23          void *TAudio::enc_state;							/* Holds the states of the encoder & the decoder */
   \                     _ZN6TAudio9enc_stateE:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          uint8_t TAudio::AudioCodedData[AUDIO_ENCODED_SIZE]; /* сюда сохраняются закодированные данные */
   \                     _ZN6TAudio14AudioCodedDataE:
   \   00000000                      DS8 160

   \                                 In section .bss, align 4
     25          uint8_t *TAudio::pRecData;
   \                     _ZN6TAudio8pRecDataE:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     26          int quality = 4, complexity=1, vbr=0, enh=1;		/* SPEEX PARAMETERS, MUST REMAINED UNCHANGED */
   \                     quality:
   \   00000000   0x00000004         DC32 4

   \                                 In section .data, align 4
   \                     complexity:
   \   00000000   0x00000001         DC32 1

   \                                 In section .bss, align 4
   \                     vbr:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     enh:
   \   00000000   0x00000001         DC32 1
     27          //SpeexHeader header;
     28          

   \                                 In section .bss, align 4
     29          xTaskHandle TAudio::xWriteOnSD;
   \                     _ZN6TAudio10xWriteOnSDE:
   \   00000000                      DS8 4
     30          

   \                                 In section .bss, align 4
     31          volatile int zond ;
   \                     zond:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     32          FIL CodedFile;
   \                     CodedFile:
   \   00000000                      DS8 40
     33          
     34          
     35          
     36          /*----------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     37          void TAudio::AUDIO_PHYInit( void )
     38          {
   \                     _ZN6TAudio13AUDIO_PHYInitEv: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A5             SUB      SP,SP,#+148
     39          	ADC_InitTypeDef ADC_InitStructure;
     40          	ADC_CommonInitTypeDef ADC_CommonInitStructure;
     41          	GPIO_InitTypeDef GPIO_InitStructure;
     42          	NVIC_InitTypeDef NVIC_InitStructure;
     43          	DMA_InitTypeDef DMA_InitStructure;
     44          	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
     45          	TIM_OCInitTypeDef  TIM_OCInitStructure;
     46          
     47          	// NVIC
     48          	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
   \   00000004   0x2038             MOVS     R0,#+56
   \   00000006   0xF88D 0x0008      STRB     R0,[SP, #+8]
     49          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 13;
   \   0000000A   0x200D             MOVS     R0,#+13
   \   0000000C   0xF88D 0x0009      STRB     R0,[SP, #+9]
     50          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x000A      STRB     R0,[SP, #+10]
     51          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x000B      STRB     R0,[SP, #+11]
     52          	NVIC_Init( &NVIC_InitStructure );
   \   0000001C   0xA802             ADD      R0,SP,#+8
   \   0000001E   0x.... 0x....      BL       NVIC_Init
     53          
     54          	// GPIO
     55          	RCC_AHB1PeriphClockCmd( AudioIn_GPIO_CLK, ENABLE );
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     56          	GPIO_InitStructure.GPIO_Pin = AudioIn_GPIO_PIN;
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x9000             STR      R0,[SP, #+0]
     57          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0xF88D 0x0004      STRB     R0,[SP, #+4]
     58          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0005      STRB     R0,[SP, #+5]
     59          	GPIO_InitStructure.GPIO_OType =  GPIO_OType_PP;
   \   0000003A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     60            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     61          	GPIO_Init( AudioIn_GPIO_PORT, &GPIO_InitStructure );
   \   0000003E   0x4C61             LDR.N    R4,??AUDIO_PHYInit_0  ;; 0x40020800
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       GPIO_Init
     62          
     63          	RCC_AHB1PeriphClockCmd( AudioPwr_GPIO_CLK, ENABLE );
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     64            GPIO_SetBits(AudioPwr_GPIO_PORT,AudioPwr_GPIO_PIN);
   \   00000050   0x2108             MOVS     R1,#+8
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       GPIO_SetBits
     65          	GPIO_InitStructure.GPIO_Pin = AudioPwr_GPIO_PIN;
   \   00000058   0x2008             MOVS     R0,#+8
   \   0000005A   0x9000             STR      R0,[SP, #+0]
     66          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xF88D 0x0005      STRB     R0,[SP, #+5]
     67          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xF88D 0x0004      STRB     R0,[SP, #+4]
     68          	GPIO_InitStructure.GPIO_OType =  GPIO_OType_PP;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     69            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     70          	GPIO_Init( AudioPwr_GPIO_PORT, &GPIO_InitStructure );
   \   0000006E   0xA900             ADD      R1,SP,#+0
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       GPIO_Init
     71            
     72          	// TIM
     73          	RCC_APB1PeriphClockCmd( RCC_APB1Periph_TIM4, ENABLE );
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x2004             MOVS     R0,#+4
   \   0000007A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     74          	TIM_TimeBaseStructure.TIM_Period = (SystemCoreClock / AUDIO_SAMPLE_RATE) - 1;
   \   0000007E   0x4D52             LDR.N    R5,??AUDIO_PHYInit_0+0x4
   \   00000080   0x6828             LDR      R0,[R5, #+0]
   \   00000082   0xF44F 0x51FA      MOV      R1,#+8000
   \   00000086   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000008A   0x1E40             SUBS     R0,R0,#+1
   \   0000008C   0x9004             STR      R0,[SP, #+16]
     75          	TIM_TimeBaseStructure.TIM_Prescaler = 0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9003             STR      R0,[SP, #+12]
     76          	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000092   0xF8AD 0x0014      STRH     R0,[SP, #+20]
     77          	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
     78          	TIM_TimeBaseInit( TIM4, &TIM_TimeBaseStructure );
   \   00000096   0x4C4D             LDR.N    R4,??AUDIO_PHYInit_0+0x8  ;; 0x40000800
   \   00000098   0xA903             ADD      R1,SP,#+12
   \   0000009A   0x4620             MOV      R0,R4
   \   0000009C   0x.... 0x....      BL       TIM_TimeBaseInit
     79          
     80          	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   000000A0   0x2060             MOVS     R0,#+96
   \   000000A2   0xF8AD 0x0040      STRH     R0,[SP, #+64]
     81          	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0xF8AD 0x0042      STRH     R0,[SP, #+66]
     82          	TIM_OCInitStructure.TIM_Pulse = (SystemCoreClock / AUDIO_SAMPLE_RATE) / 2 - 1;
   \   000000AC   0x6828             LDR      R0,[R5, #+0]
   \   000000AE   0xF44F 0x51FA      MOV      R1,#+8000
   \   000000B2   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000B6   0x0840             LSRS     R0,R0,#+1
   \   000000B8   0x1E40             SUBS     R0,R0,#+1
   \   000000BA   0x9012             STR      R0,[SP, #+72]
     83          	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xF8AD 0x004C      STRH     R0,[SP, #+76]
     84          	TIM_OC4Init( TIM4, &TIM_OCInitStructure );
   \   000000C2   0xA910             ADD      R1,SP,#+64
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       TIM_OC4Init
     85          
     86          	TIM_OC4PreloadConfig( TIM4, TIM_OCPreload_Enable );
   \   000000CA   0x2108             MOVS     R1,#+8
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       TIM_OC4PreloadConfig
     87          
     88          	TIM_SelectMasterSlaveMode( TIM4, TIM_MasterSlaveMode_Enable );
   \   000000D2   0x2180             MOVS     R1,#+128
   \   000000D4   0x4620             MOV      R0,R4
   \   000000D6   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
     89          
     90          	TIM_SelectOutputTrigger( TIM4, TIM_TRGOSource_OC4Ref );
   \   000000DA   0x2170             MOVS     R1,#+112
   \   000000DC   0x4620             MOV      R0,R4
   \   000000DE   0x.... 0x....      BL       TIM_SelectOutputTrigger
     91          
     92          	// DMA
     93          	RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_DMA2, ENABLE );
   \   000000E2   0x2101             MOVS     R1,#+1
   \   000000E4   0xF44F 0x0080      MOV      R0,#+4194304
   \   000000E8   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     94          	DMA_DeInit(DMA2_Stream0);
   \   000000EC   0x4D38             LDR.N    R5,??AUDIO_PHYInit_0+0xC  ;; 0x40026410
   \   000000EE   0x4628             MOV      R0,R5
   \   000000F0   0x.... 0x....      BL       DMA_DeInit
     95          	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x9015             STR      R0,[SP, #+84]
     96          	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&ADC1->DR);					/* адрес регистра переферии */
   \   000000F8   0x4836             LDR.N    R0,??AUDIO_PHYInit_0+0x10  ;; 0x4001204c
   \   000000FA   0x9016             STR      R0,[SP, #+88]
     97          	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&TAudio::ADC1_raw_data;
   \   000000FC   0x4836             LDR.N    R0,??AUDIO_PHYInit_0+0x14
   \   000000FE   0x9017             STR      R0,[SP, #+92]
     98          	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;							/* из переферии в память */
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x9018             STR      R0,[SP, #+96]
     99          	DMA_InitStructure.DMA_BufferSize = ADC1_BUFFER_SIZE;
   \   00000104   0xF44F 0x6080      MOV      R0,#+1024
   \   00000108   0x9019             STR      R0,[SP, #+100]
    100          	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   0000010A   0x2100             MOVS     R1,#+0
   \   0000010C   0x911A             STR      R1,[SP, #+104]
    101          	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \   0000010E   0x901B             STR      R0,[SP, #+108]
    102          	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
   \   00000110   0xF44F 0x6000      MOV      R0,#+2048
   \   00000114   0x901C             STR      R0,[SP, #+112]
    103          	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
   \   00000116   0xF44F 0x5000      MOV      R0,#+8192
   \   0000011A   0x901D             STR      R0,[SP, #+116]
    104          	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   \   0000011C   0xF44F 0x7080      MOV      R0,#+256
   \   00000120   0x901E             STR      R0,[SP, #+120]
    105          	DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
   \   00000122   0x4608             MOV      R0,R1
   \   00000124   0x901F             STR      R0,[SP, #+124]
    106              DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
   \   00000126   0x9020             STR      R0,[SP, #+128]
    107              DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0x9021             STR      R0,[SP, #+132]
    108              DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \   0000012C   0x4608             MOV      R0,R1
   \   0000012E   0x9022             STR      R0,[SP, #+136]
    109              DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \   00000130   0x9023             STR      R0,[SP, #+140]
    110          	DMA_Init( DMA2_Stream0, &DMA_InitStructure );
   \   00000132   0xA915             ADD      R1,SP,#+84
   \   00000134   0x4628             MOV      R0,R5
   \   00000136   0x.... 0x....      BL       DMA_Init
    111          
    112          	DMA_ITConfig( DMA2_Stream0, DMA_IT_TC | DMA_IT_HT, ENABLE );
   \   0000013A   0x2201             MOVS     R2,#+1
   \   0000013C   0x2118             MOVS     R1,#+24
   \   0000013E   0x4628             MOV      R0,R5
   \   00000140   0x.... 0x....      BL       DMA_ITConfig
    113          
    114          	DMA_Cmd( DMA2_Stream0, ENABLE );
   \   00000144   0x2101             MOVS     R1,#+1
   \   00000146   0x4628             MOV      R0,R5
   \   00000148   0x.... 0x....      BL       DMA_Cmd
    115          
    116          
    117          
    118          
    119          
    120          
    121          
    122          
    123          
    124          	// ADC
    125          	RCC_APB2PeriphClockCmd( RCC_APB2Periph_ADC1, ENABLE );
   \   0000014C   0x2101             MOVS     R1,#+1
   \   0000014E   0xF44F 0x7080      MOV      R0,#+256
   \   00000152   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    126          
    127          	ADC_InitStructure.ADC_ScanConvMode = DISABLE; //ENABLE;
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0xF8AD 0x002C      STRH     R0,[SP, #+44]
    128          	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    129          	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000015C   0x900E             STR      R0,[SP, #+56]
    130          	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T4_CC4;
   \   0000015E   0xF04F 0x6010      MOV      R0,#+150994944
   \   00000162   0x900D             STR      R0,[SP, #+52]
    131          	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
   \   00000164   0xF04F 0x5080      MOV      R0,#+268435456
   \   00000168   0x900C             STR      R0,[SP, #+48]
    132          	ADC_InitStructure.ADC_NbrOfConversion = 0; //2;
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0xF88D 0x003C      STRB     R0,[SP, #+60]
    133          	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
   \   00000170   0x900A             STR      R0,[SP, #+40]
    134          	ADC_Init( ADC1, &ADC_InitStructure );
   \   00000172   0x4D1A             LDR.N    R5,??AUDIO_PHYInit_0+0x18  ;; 0x40012000
   \   00000174   0xA90A             ADD      R1,SP,#+40
   \   00000176   0x4628             MOV      R0,R5
   \   00000178   0x.... 0x....      BL       ADC_Init
    135          
    136          	ADC_RegularChannelConfig( ADC1, AudioIn_ADC_Channel, 1, ADC_SampleTime_56Cycles );
   \   0000017C   0x2303             MOVS     R3,#+3
   \   0000017E   0x2201             MOVS     R2,#+1
   \   00000180   0x210C             MOVS     R1,#+12
   \   00000182   0x4628             MOV      R0,R5
   \   00000184   0x.... 0x....      BL       ADC_RegularChannelConfig
    137          //	ADC_RegularChannelConfig( ADC1, AudioIn_ADC_Channel, 2, ADC_SampleTime_56Cycles );
    138          
    139          	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0x9006             STR      R0,[SP, #+24]
    140          	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
   \   0000018C   0xF44F 0x3040      MOV      R0,#+196608
   \   00000190   0x9007             STR      R0,[SP, #+28]
    141          	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
   \   00000192   0x2000             MOVS     R0,#+0
   \   00000194   0x9008             STR      R0,[SP, #+32]
    142          	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
   \   00000196   0x9009             STR      R0,[SP, #+36]
    143          	ADC_CommonInit(&ADC_CommonInitStructure);
   \   00000198   0xA806             ADD      R0,SP,#+24
   \   0000019A   0x.... 0x....      BL       ADC_CommonInit
    144          
    145          
    146          
    147                  
    148          	ADC_DMARequestAfterLastTransferCmd( ADC1, ENABLE );
   \   0000019E   0x2101             MOVS     R1,#+1
   \   000001A0   0x4628             MOV      R0,R5
   \   000001A2   0x.... 0x....      BL       ADC_DMARequestAfterLastTransferCmd
    149          
    150          	ADC_DMACmd( ADC1, ENABLE );
   \   000001A6   0x2101             MOVS     R1,#+1
   \   000001A8   0x4628             MOV      R0,R5
   \   000001AA   0x.... 0x....      BL       ADC_DMACmd
    151          
    152          	ADC_Cmd( ADC1, ENABLE );
   \   000001AE   0x2101             MOVS     R1,#+1
   \   000001B0   0x4628             MOV      R0,R5
   \   000001B2   0x.... 0x....      BL       ADC_Cmd
    153          
    154          	TIM_Cmd( TIM4, ENABLE );
   \   000001B6   0x2101             MOVS     R1,#+1
   \   000001B8   0x4620             MOV      R0,R4
   \   000001BA   0x.... 0x....      BL       TIM_Cmd
    155          }
   \   000001BE   0xB025             ADD      SP,SP,#+148
   \   000001C0   0xBD30             POP      {R4,R5,PC}       ;; return
   \   000001C2   0xBF00             Nop      
   \                     ??AUDIO_PHYInit_0:
   \   000001C4   0x40020800         DC32     0x40020800
   \   000001C8   0x........         DC32     SystemCoreClock
   \   000001CC   0x40000800         DC32     0x40000800
   \   000001D0   0x40026410         DC32     0x40026410
   \   000001D4   0x4001204C         DC32     0x4001204c
   \   000001D8   0x........         DC32     _ZN6TAudio13ADC1_raw_dataE
   \   000001DC   0x40012000         DC32     0x40012000
    156          
    157          
    158          
    159          ///*----------------------------------------------------------------------------------*/
    160          //void TAudio::TASK_WriteOnSD( void *pvParameters )
    161          //{
    162          //	vTaskSuspend( xWriteOnSD );
    163          //
    164          //	while( 1 ){
    165          //		uint32_t s;
    166          //
    167          //		EncodeData();
    168          //
    169          ////		FIL SoundFile;
    170          ////
    171          ////		if( SD_Init() == SD_OK ){
    172          ////			f_mount( 0, &TSDProcessor::FATFS_Obj );
    173          ////
    174          ////			f_open( &SoundFile, "sound.sss", FA_CREATE_ALWAYS | FA_WRITE );
    175          ////
    176          ////			uint8_t *uiTemp;
    177          ////			uiTemp = (uint8_t*)&ADC1_raw_data[0];
    178          ////
    179          ////			for( int i=0; i<((ADC1_BUFFER_SIZE*2)/512); i++ )
    180          ////				f_write( &SoundFile, &uiTemp[i*512], 512, &s );
    181          ////
    182          ////			f_close( &SoundFile );
    183          ////		}
    184          //
    185          //		if( disk_initialize(0) == RES_OK ){
    186          //			f_mount( 0, &TSDProcessor::FATFS_Obj );
    187          //			zond = 1000;
    188          //			f_open( &CodedFile, "coded.spx", FA_CREATE_ALWAYS | FA_WRITE );
    189          //
    190          //			Speex_WriteHeader( &CodedFile, &header );
    191          //
    192          //			f_write( &CodedFile, AudioCodedData, 1000, &s );
    193          //
    194          //			f_close( &CodedFile );
    195          //			zond = 0;
    196          //		}
    197          //
    198          //		vTaskSuspend( NULL );
    199          //	}
    200          //}
    201          //
    202          //
    203          //
    204          ///*----------------------------------------------------------------------------------*/
    205          ///* @brief	кодирование данных														*/
    206          ///* @param	None																	*/
    207          ///* @return	None																	*/
    208          ///*----------------------------------------------------------------------------------*/
    209          //void TAudio::EncodeData( void )
    210          //{
    211          //	pRecData = AudioCodedData;
    212          //	for( int t=0; t<50; t++ ){
    213          //		speex_bits_reset( &bits );		/* обязательно - очистка буферов speex */
    214          //
    215          //		speex_encode_int( enc_state, (spx_int16_t*)ADC1_raw_data, &bits );
    216          //
    217          //		speex_bits_write( &bits, (char *)pRecData, ENCODED_FRAME_SIZE );	/* записваем ENCODED_FRAME_SIZE байт */
    218          //		pRecData += ENCODED_FRAME_SIZE;
    219          //	}
    220          //}
    221          //
    222          //
    223          //
    224          ///*----------------------------------------------------------------------------------*/
    225          //void TAudio::Speex_WriteInit( void )
    226          //{
    227          //	const SpeexMode *mode=NULL;
    228          //
    229          //	mode = speex_lib_get_mode( SPEEX_MODEID_NB );
    230          //	speex_init_header( &header, 8000, 1, mode );
    231          //
    232          //	enc_state = speex_encoder_init( &speex_nb_mode );
    233          //
    234          //	speex_encoder_ctl( enc_state, SPEEX_SET_QUALITY, &quality );
    235          //	speex_encoder_ctl( enc_state, SPEEX_SET_COMPLEXITY, &complexity );
    236          //
    237          //	speex_bits_init( &bits );		/* Speex encoding initializations */
    238          //}
    239          //
    240          //
    241          //
    242          ///*----------------------------------------------------------------------------------*/
    243          //void TAudio::Speex_WriteHeader( FIL *encodedfile, SpeexHeader *SpHeader )
    244          //{
    245          //	static uint8_t HeaderBuffer[80];
    246          //	int k = 0;
    247          //	uint32_t s;
    248          //
    249          //	for( int i=0; i<SPEEX_HEADER_STRING_LENGTH; i++ )
    250          //		HeaderBuffer[k++] = (uint8_t)(SpHeader->speex_string[i]);
    251          //
    252          //	for( int i=0; i<SPEEX_HEADER_VERSION_LENGTH; i++ )
    253          //		HeaderBuffer[k++] = (uint8_t)(SpHeader->speex_version[i]);
    254          //
    255          //	HeaderBuffer[k++] = (uint8_t)SpHeader->speex_version_id;
    256          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->speex_version_id >> 8);
    257          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->speex_version_id >> 16);
    258          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->speex_version_id >> 24);
    259          //
    260          //	HeaderBuffer[k++] = (uint8_t)SpHeader->header_size;
    261          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->header_size >> 8);
    262          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->header_size >> 16);
    263          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->header_size >> 24);
    264          //
    265          //	HeaderBuffer[k++] = (uint8_t)SpHeader->rate;
    266          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->rate >> 8);
    267          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->rate >> 16);
    268          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->rate >> 24);
    269          //
    270          //	HeaderBuffer[k++] = (uint8_t)SpHeader->mode;
    271          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->mode >> 8);
    272          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->mode >> 16);
    273          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->mode >> 24);
    274          //
    275          //	HeaderBuffer[k++] = (uint8_t)SpHeader->mode_bitstream_version;
    276          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->mode_bitstream_version >> 8);
    277          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->mode_bitstream_version >> 16);
    278          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->mode_bitstream_version >> 24);
    279          //
    280          //	HeaderBuffer[k++] = (uint8_t)SpHeader->nb_channels;
    281          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->nb_channels >> 8);
    282          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->nb_channels >> 16);
    283          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->nb_channels >> 24);
    284          //
    285          //	HeaderBuffer[k++] = (uint8_t)SpHeader->bitrate;
    286          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->bitrate >> 8);
    287          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->bitrate >> 16);
    288          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->bitrate >> 24);
    289          //
    290          //	HeaderBuffer[k++] = (uint8_t)SpHeader->frame_size;
    291          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->frame_size >> 8);
    292          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->frame_size >> 16);
    293          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->frame_size >> 24);
    294          //
    295          //	HeaderBuffer[k++] = (uint8_t)SpHeader->vbr;
    296          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->vbr >> 8);
    297          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->vbr >> 16);
    298          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->vbr >> 24);
    299          //
    300          //	HeaderBuffer[k++] = (uint8_t)SpHeader->frames_per_packet;
    301          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->frames_per_packet >> 8);
    302          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->frames_per_packet >> 16);
    303          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->frames_per_packet >> 24);
    304          //
    305          //	HeaderBuffer[k++] = (uint8_t)SpHeader->extra_headers;
    306          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->extra_headers >> 8);
    307          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->extra_headers >> 16);
    308          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->extra_headers >> 24);
    309          //
    310          //	HeaderBuffer[k++] = (uint8_t)SpHeader->reserved1;
    311          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->reserved1 >> 8);
    312          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->reserved1 >> 16);
    313          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->reserved1 >> 24);
    314          //
    315          //	HeaderBuffer[k++] = (uint8_t)SpHeader->reserved2;
    316          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->reserved2 >> 8);
    317          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->reserved2 >> 16);
    318          //	HeaderBuffer[k++] = (uint8_t)(SpHeader->reserved2 >> 24);
    319          //
    320          //	f_write( &CodedFile, HeaderBuffer, 80, &s );
    321          //
    322          //	f_sync( &CodedFile );
    323          //}

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     160   TAudio::AUDIO_PHYInit()
       160   -> ADC_Cmd
       160   -> ADC_CommonInit
       160   -> ADC_DMACmd
       160   -> ADC_DMARequestAfterLastTransferCmd
       160   -> ADC_Init
       160   -> ADC_RegularChannelConfig
       160   -> DMA_Cmd
       160   -> DMA_DeInit
       160   -> DMA_ITConfig
       160   -> DMA_Init
       160   -> GPIO_Init
       160   -> GPIO_SetBits
       160   -> NVIC_Init
       160   -> RCC_AHB1PeriphClockCmd
       160   -> RCC_APB1PeriphClockCmd
       160   -> RCC_APB2PeriphClockCmd
       160   -> TIM_Cmd
       160   -> TIM_OC4Init
       160   -> TIM_OC4PreloadConfig
       160   -> TIM_SelectMasterSlaveMode
       160   -> TIM_SelectOutputTrigger
       160   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  CodedFile
    2048  TAudio::ADC1_raw_data
     480  TAudio::AUDIO_PHYInit()
     160  TAudio::AudioCodedData
    2048  TAudio::Audio_raw_data
       1  TAudio::VoiceRec
       4  TAudio::enc_state
       4  TAudio::pRecData
       4  TAudio::xWriteOnSD
       4  complexity
       4  enh
       4  quality
       4  vbr
       4  zond

 
 4 317 bytes in section .bss
    12 bytes in section .data
   480 bytes in section .text
 
   480 bytes of CODE memory
 4 329 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\system_stm32f4xx.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\system_stm32f4xx.c -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\system_stm32f4xx.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\system_stm32f4xx.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\system_stm32f4xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f4xx.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    08-November-2013
      7            * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F4xx devices.
      9            *             
     10            * 1.  This file provides two functions and one global variable to be called from 
     11            *     user application:
     12            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     13            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     14            *                      depending on the configuration made in the clock xls tool. 
     15            *                      This function is called at startup just after reset and 
     16            *                      before branch to main program. This call is made inside
     17            *                      the "startup_stm32f4xx.s" file.
     18            *
     19            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     20            *                                  by the user application to setup the SysTick 
     21            *                                  timer or configure other parameters.
     22            *                                     
     23            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     24            *                                 be called whenever the core clock is changed
     25            *                                 during program execution.
     26            *
     27            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     28            *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
     29            *    configure the system clock before to branch to main program.
     30            *
     31            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     32            *    function will do nothing and HSI still used as system clock source. User can 
     33            *    add some code to deal with this issue inside the SetSysClock() function.
     34            *
     35            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     36            *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
     37            *    through PLL, and you are using different crystal you have to adapt the HSE
     38            *    value to your own configuration.
     39            *
     40            * 5. This file configures the system clock as follows:
     41            *=============================================================================
     42            *=============================================================================
     43            *                    Supported STM32F40xxx/41xxx devices
     44            *-----------------------------------------------------------------------------
     45            *        System Clock source                    | PLL (HSE)
     46            *-----------------------------------------------------------------------------
     47            *        SYSCLK(Hz)                             | 168000000
     48            *-----------------------------------------------------------------------------
     49            *        HCLK(Hz)                               | 168000000
     50            *-----------------------------------------------------------------------------
     51            *        AHB Prescaler                          | 1
     52            *-----------------------------------------------------------------------------
     53            *        APB1 Prescaler                         | 4
     54            *-----------------------------------------------------------------------------
     55            *        APB2 Prescaler                         | 2
     56            *-----------------------------------------------------------------------------
     57            *        HSE Frequency(Hz)                      | 25000000
     58            *-----------------------------------------------------------------------------
     59            *        PLL_M                                  | 25
     60            *-----------------------------------------------------------------------------
     61            *        PLL_N                                  | 336
     62            *-----------------------------------------------------------------------------
     63            *        PLL_P                                  | 2
     64            *-----------------------------------------------------------------------------
     65            *        PLL_Q                                  | 7
     66            *-----------------------------------------------------------------------------
     67            *        PLLI2S_N                               | NA
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_R                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        I2S input clock                        | NA
     72            *-----------------------------------------------------------------------------
     73            *        VDD(V)                                 | 3.3
     74            *-----------------------------------------------------------------------------
     75            *        Main regulator output voltage          | Scale1 mode
     76            *-----------------------------------------------------------------------------
     77            *        Flash Latency(WS)                      | 5
     78            *-----------------------------------------------------------------------------
     79            *        Prefetch Buffer                        | ON
     80            *-----------------------------------------------------------------------------
     81            *        Instruction cache                      | ON
     82            *-----------------------------------------------------------------------------
     83            *        Data cache                             | ON
     84            *-----------------------------------------------------------------------------
     85            *        Require 48MHz for USB OTG FS,          | Disabled
     86            *        SDIO and RNG clock                     |
     87            *-----------------------------------------------------------------------------
     88            *=============================================================================
     89            *=============================================================================
     90            *                    Supported STM32F42xxx/43xxx devices
     91            *-----------------------------------------------------------------------------
     92            *        System Clock source                    | PLL (HSE)
     93            *-----------------------------------------------------------------------------
     94            *        SYSCLK(Hz)                             | 180000000
     95            *-----------------------------------------------------------------------------
     96            *        HCLK(Hz)                               | 180000000
     97            *-----------------------------------------------------------------------------
     98            *        AHB Prescaler                          | 1
     99            *-----------------------------------------------------------------------------
    100            *        APB1 Prescaler                         | 4
    101            *-----------------------------------------------------------------------------
    102            *        APB2 Prescaler                         | 2
    103            *-----------------------------------------------------------------------------
    104            *        HSE Frequency(Hz)                      | 25000000
    105            *-----------------------------------------------------------------------------
    106            *        PLL_M                                  | 25
    107            *-----------------------------------------------------------------------------
    108            *        PLL_N                                  | 360
    109            *-----------------------------------------------------------------------------
    110            *        PLL_P                                  | 2
    111            *-----------------------------------------------------------------------------
    112            *        PLL_Q                                  | 7
    113            *-----------------------------------------------------------------------------
    114            *        PLLI2S_N                               | NA
    115            *-----------------------------------------------------------------------------
    116            *        PLLI2S_R                               | NA
    117            *-----------------------------------------------------------------------------
    118            *        I2S input clock                        | NA
    119            *-----------------------------------------------------------------------------
    120            *        VDD(V)                                 | 3.3
    121            *-----------------------------------------------------------------------------
    122            *        Main regulator output voltage          | Scale1 mode
    123            *-----------------------------------------------------------------------------
    124            *        Flash Latency(WS)                      | 5
    125            *-----------------------------------------------------------------------------
    126            *        Prefetch Buffer                        | ON
    127            *-----------------------------------------------------------------------------
    128            *        Instruction cache                      | ON
    129            *-----------------------------------------------------------------------------
    130            *        Data cache                             | ON
    131            *-----------------------------------------------------------------------------
    132            *        Require 48MHz for USB OTG FS,          | Disabled
    133            *        SDIO and RNG clock                     |
    134            *-----------------------------------------------------------------------------
    135            *=============================================================================
    136            *=============================================================================
    137            *                         Supported STM32F401xx devices
    138            *-----------------------------------------------------------------------------
    139            *        System Clock source                    | PLL (HSE)
    140            *-----------------------------------------------------------------------------
    141            *        SYSCLK(Hz)                             | 84000000
    142            *-----------------------------------------------------------------------------
    143            *        HCLK(Hz)                               | 84000000
    144            *-----------------------------------------------------------------------------
    145            *        AHB Prescaler                          | 1
    146            *-----------------------------------------------------------------------------
    147            *        APB1 Prescaler                         | 2
    148            *-----------------------------------------------------------------------------
    149            *        APB2 Prescaler                         | 1
    150            *-----------------------------------------------------------------------------
    151            *        HSE Frequency(Hz)                      | 25000000
    152            *-----------------------------------------------------------------------------
    153            *        PLL_M                                  | 25
    154            *-----------------------------------------------------------------------------
    155            *        PLL_N                                  | 336
    156            *-----------------------------------------------------------------------------
    157            *        PLL_P                                  | 4
    158            *-----------------------------------------------------------------------------
    159            *        PLL_Q                                  | 7
    160            *-----------------------------------------------------------------------------
    161            *        PLLI2S_N                               | NA
    162            *-----------------------------------------------------------------------------
    163            *        PLLI2S_R                               | NA
    164            *-----------------------------------------------------------------------------
    165            *        I2S input clock                        | NA
    166            *-----------------------------------------------------------------------------
    167            *        VDD(V)                                 | 3.3
    168            *-----------------------------------------------------------------------------
    169            *        Main regulator output voltage          | Scale1 mode
    170            *-----------------------------------------------------------------------------
    171            *        Flash Latency(WS)                      | 2
    172            *-----------------------------------------------------------------------------
    173            *        Prefetch Buffer                        | ON
    174            *-----------------------------------------------------------------------------
    175            *        Instruction cache                      | ON
    176            *-----------------------------------------------------------------------------
    177            *        Data cache                             | ON
    178            *-----------------------------------------------------------------------------
    179            *        Require 48MHz for USB OTG FS,          | Disabled
    180            *        SDIO and RNG clock                     |
    181            *-----------------------------------------------------------------------------
    182            *=============================================================================      
    183            ****************************************************************************** 
    184            * @attention
    185            *
    186            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
    187            *
    188            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
    189            * You may not use this file except in compliance with the License.
    190            * You may obtain a copy of the License at:
    191            *
    192            *        http://www.st.com/software_license_agreement_liberty_v2
    193            *
    194            * Unless required by applicable law or agreed to in writing, software 
    195            * distributed under the License is distributed on an "AS IS" BASIS, 
    196            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    197            * See the License for the specific language governing permissions and
    198            * limitations under the License.
    199            *
    200            ******************************************************************************
    201            */
    202          
    203          /** @addtogroup CMSIS
    204            * @{
    205            */
    206          
    207          /** @addtogroup stm32f4xx_system
    208            * @{
    209            */  
    210            
    211          /** @addtogroup STM32F4xx_System_Private_Includes
    212            * @{
    213            */
    214          
    215          #include "main.h"
    216          #include "stm32f4xx.h"
    217          #include "common.h"
    218          
    219          /**
    220            * @}
    221            */
    222          
    223          /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
    224            * @{
    225            */
    226          
    227          /**
    228            * @}
    229            */
    230          
    231          /** @addtogroup STM32F4xx_System_Private_Defines
    232            * @{
    233            */
    234          
    235          /**
    236            * @}
    237            */
    238          
    239          /** @addtogroup STM32F4xx_System_Private_Macros
    240            * @{
    241            */
    242          
    243          /**
    244            * @}
    245            */
    246          
    247          /** @addtogroup STM32F4xx_System_Private_Variables
    248            * @{
    249            */
    250          

   \                                 In section .data, align 4
    251            uint32_t SystemCoreClock = 39936000;
    252          
    253            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     AHBPrescTable:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x06 0x07    
   \              0x08 0x09    
   \                     SystemCoreClock:
   \   00000010   0x02616000         DC32 39936000
    254          
    255          /**
    256            * @}
    257            */
    258          
    259          /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
    260            * @{
    261            */
    262          
    263          static void SetSysClock(void);
    264          
    265          /**
    266            * @}
    267            */
    268          
    269          /** @addtogroup STM32F4xx_System_Private_Functions
    270            * @{
    271            */
    272          
    273          /**
    274            * @brief  Setup the microcontroller system
    275            *         Initialize the Embedded Flash Interface, the PLL and update the 
    276            *         SystemFrequency variable.
    277            * @param  None
    278            * @retval None
    279            */

   \                                 In section .text, align 2, keep-with-next
    280          void SystemInit(void)
    281          {
   \                     SystemInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    282            /* FPU settings ------------------------------------------------------------*/
    283            #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    284              SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
   \   00000002   0x....             LDR.N    R0,??DataTable2  ;; 0xe000ed88
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF441 0x0170      ORR      R1,R1,#0xF00000
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    285            #endif
    286            /* Reset the RCC clock configuration to the default reset state ------------*/
    287            /* Set HSION bit */
    288            RCC->CR |= (uint32_t)0x00000001;
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000014   0x6001             STR      R1,[R0, #+0]
    289          
    290            /* Reset CFGR register */
    291            RCC->CFGR = 0x00000000;
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x6081             STR      R1,[R0, #+8]
    292          
    293            /* Reset HSEON, CSSON and PLLON bits */
    294            RCC->CR &= (uint32_t)0xFEF6FFFF;
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0x....             LDR.N    R2,??DataTable2_2  ;; 0xfef6ffff
   \   0000001E   0x4011             ANDS     R1,R2,R1
   \   00000020   0x6001             STR      R1,[R0, #+0]
    295          
    296            /* Reset PLLCFGR register */
    297            RCC->PLLCFGR = 0x24003010;
   \   00000022   0x....             LDR.N    R1,??DataTable2_3  ;; 0x24003010
   \   00000024   0x6041             STR      R1,[R0, #+4]
    298          
    299            /* Reset HSEBYP bit */
    300            RCC->CR &= (uint32_t)0xFFFBFFFF;
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF421 0x2180      BIC      R1,R1,#0x40000
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    301          
    302            /* Disable all interrupts */
    303            RCC->CIR = 0x00000000;
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x60C1             STR      R1,[R0, #+12]
    304          
    305            /* Configure the System clock source, PLL Multiplier and Divider factors, 
    306               AHB/APBx prescalers and Flash settings ----------------------------------*/
    307            SetSysClock();
   \   00000032   0x.... 0x....      BL       _Z11SetSysClockv
    308          
    309            /* Configure the Vector Table location add offset address ------------------*/
    310          #ifdef BOOTLOADER
    311            SCB->VTOR = FLASH_BASE | BOOTLSTART_ADDR; 
    312          #else
    313            SCB->VTOR = FLASH_BASE | APPSTART_ADDR; 
   \   00000036   0x....             LDR.N    R0,??DataTable2_4  ;; 0x8020000
   \   00000038   0x....             LDR.N    R1,??DataTable2_5  ;; 0xe000ed08
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    314          #endif
    315          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
    316          
    317          /**
    318             * @brief  Update SystemCoreClock variable according to Clock Register Values.
    319            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    320            *         be used by the user application to setup the SysTick timer or configure
    321            *         other parameters.
    322            *           
    323            * @note   Each time the core clock (HCLK) changes, this function must be called
    324            *         to update SystemCoreClock variable value. Otherwise, any configuration
    325            *         based on this variable will be incorrect.         
    326            *     
    327            * @note   - The system frequency computed by this function is not the real 
    328            *           frequency in the chip. It is calculated based on the predefined 
    329            *           constant and the selected clock source:
    330            *             
    331            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    332            *                                              
    333            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    334            *                          
    335            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    336            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    337            *         
    338            *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
    339            *             16 MHz) but the real value may vary depending on the variations
    340            *             in voltage and temperature.   
    341            *    
    342            *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
    343            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    344            *              frequency of the crystal used. Otherwise, this function may
    345            *              have wrong result.
    346            *                
    347            *         - The result of this function could be not correct when using fractional
    348            *           value for HSE crystal.
    349            *     
    350            * @param  None
    351            * @retval None
    352            */

   \                                 In section .text, align 2, keep-with-next
    353          void SystemCoreClockUpdate(void)
    354          {
    355            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    356            
    357            /* Get SYSCLK source -------------------------------------------------------*/
    358            tmp = RCC->CFGR & RCC_CFGR_SWS;
   \                     SystemCoreClockUpdate: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_6  ;; 0x40023804
   \   00000002   0x6841             LDR      R1,[R0, #+4]
   \   00000004   0xF001 0x010C      AND      R1,R1,#0xC
    359          
    360            switch (tmp)
   \   00000008   0x2904             CMP      R1,#+4
   \   0000000A   0xD002             BEQ.N    ??SystemCoreClockUpdate_0
   \   0000000C   0x2908             CMP      R1,#+8
   \   0000000E   0xD005             BEQ.N    ??SystemCoreClockUpdate_1
   \   00000010   0xE026             B.N      ??SystemCoreClockUpdate_2
    361            {
    362              case 0x00:  /* HSI used as system clock source */
    363                SystemCoreClock = HSI_VALUE;
    364                break;
    365              case 0x04:  /* HSE used as system clock source */
    366                SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_0: (+1)
   \   00000012   0xF44F 0x11FA      MOV      R1,#+2048000
   \   00000016   0x....             LDR.N    R2,??DataTable2_7
   \   00000018   0x6111             STR      R1,[R2, #+16]
    367                break;
   \   0000001A   0xE024             B.N      ??SystemCoreClockUpdate_3
    368              case 0x08:  /* PLL used as system clock source */
    369          
    370                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    371                   SYSCLK = PLL_VCO / PLL_P
    372                   */    
    373                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xF3C1 0x5180      UBFX     R1,R1,#+22,#+1
    374                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
   \   00000022   0x6802             LDR      R2,[R0, #+0]
   \   00000024   0xF002 0x023F      AND      R2,R2,#0x3F
    375                
    376                if (pllsource != 0)
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xD008             BEQ.N    ??SystemCoreClockUpdate_4
    377                {
    378                  /* HSE used as PLL clock source */
    379                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
   \   0000002C   0xF44F 0x11FA      MOV      R1,#+2048000
   \   00000030   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000034   0x6802             LDR      R2,[R0, #+0]
   \   00000036   0xF3C2 0x1288      UBFX     R2,R2,#+6,#+9
   \   0000003A   0x4351             MULS     R1,R2,R1
   \   0000003C   0xE006             B.N      ??SystemCoreClockUpdate_5
    380                }
    381                else
    382                {
    383                  /* HSI used as PLL clock source */
    384                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
   \                     ??SystemCoreClockUpdate_4: (+1)
   \   0000003E   0x....             LDR.N    R1,??DataTable2_8  ;; 0xf42400
   \   00000040   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000044   0x6802             LDR      R2,[R0, #+0]
   \   00000046   0xF3C2 0x1288      UBFX     R2,R2,#+6,#+9
   \   0000004A   0x4351             MULS     R1,R2,R1
    385                }
    386          
    387                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
   \                     ??SystemCoreClockUpdate_5: (+1)
   \   0000004C   0x6802             LDR      R2,[R0, #+0]
   \   0000004E   0xF3C2 0x4201      UBFX     R2,R2,#+16,#+2
   \   00000052   0x1C52             ADDS     R2,R2,#+1
   \   00000054   0x0052             LSLS     R2,R2,#+1
    388                SystemCoreClock = pllvco/pllp;
   \   00000056   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   0000005A   0x....             LDR.N    R2,??DataTable2_7
   \   0000005C   0x6111             STR      R1,[R2, #+16]
    389                break;
   \   0000005E   0xE002             B.N      ??SystemCoreClockUpdate_3
    390              default:
    391                SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \   00000060   0x....             LDR.N    R1,??DataTable2_8  ;; 0xf42400
   \   00000062   0x....             LDR.N    R2,??DataTable2_7
   \   00000064   0x6111             STR      R1,[R2, #+16]
    392                break;
    393            }
    394            /* Compute HCLK frequency --------------------------------------------------*/
    395            /* Get HCLK prescaler */
    396            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
   \                     ??SystemCoreClockUpdate_3: (+1)
   \   00000066   0x6840             LDR      R0,[R0, #+4]
   \   00000068   0x4611             MOV      R1,R2
   \   0000006A   0xF3C0 0x1003      UBFX     R0,R0,#+4,#+4
   \   0000006E   0x5C40             LDRB     R0,[R0, R1]
    397            /* HCLK frequency */
    398            SystemCoreClock >>= tmp;
   \   00000070   0x690A             LDR      R2,[R1, #+16]
   \   00000072   0x4613             MOV      R3,R2
   \   00000074   0x40C3             LSRS     R3,R3,R0
   \   00000076   0x610B             STR      R3,[R1, #+16]
    399          }
   \   00000078   0x4770             BX       LR               ;; return
    400          
    401          /**
    402            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    403            *         AHB/APBx prescalers and Flash settings
    404            * @Note   This function should be called only once the RCC clock configuration  
    405            *         is reset to the default reset state (done in SystemInit() function).   
    406            * @param  None
    407            * @retval None
    408            */

   \                                 In section .text, align 2, keep-with-next
    409          static void SetSysClock(void)
    410          {
   \                     _Z11SetSysClockv: (+1)
   \   00000000   0xB082             SUB      SP,SP,#+8
    411          /******************************************************************************/
    412          /*            PLL (clocked by HSE) used as System clock source                */
    413          /******************************************************************************/
    414            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x9000             STR      R0,[SP, #+0]
    415            
    416            
    417            /* Enable HSE */
    418            RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
   \   00000008   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023800
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   00000010   0x6001             STR      R1,[R0, #+0]
    419            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000018   0x6001             STR      R1,[R0, #+0]
    420           
    421            /* Wait till HSE is ready and if Time out is reached exit */
    422            do
    423            {
    424              HSEStatus = RCC->CR & RCC_CR_HSERDY;
   \                     ??SetSysClock_0: (+1)
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0xF401 0x3100      AND      R1,R1,#0x20000
   \   00000020   0x9100             STR      R1,[SP, #+0]
    425              StartUpCounter++;
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x1C49             ADDS     R1,R1,#+1
   \   00000026   0x9101             STR      R1,[SP, #+4]
    426            } while((HSEStatus == RESET) && (StartUpCounter < HSE_STARTUP_TIMEOUT));
   \   00000028   0x9900             LDR      R1,[SP, #+0]
   \   0000002A   0x2900             CMP      R1,#+0
   \   0000002C   0xD103             BNE.N    ??SetSysClock_1
   \   0000002E   0x9901             LDR      R1,[SP, #+4]
   \   00000030   0xF5B1 0x4FA0      CMP      R1,#+20480
   \   00000034   0xD3F1             BCC.N    ??SetSysClock_0
    427          
    428            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
   \                     ??SetSysClock_1: (+1)
   \   00000036   0x6801             LDR      R1,[R0, #+0]
    429            {
    430              HSEStatus = (uint32_t)0x01;
    431            }
    432            else
    433            {
    434              HSEStatus = (uint32_t)0x00;
   \   00000038   0x0C49             LSRS     R1,R1,#+17
   \   0000003A   0xF001 0x0101      AND      R1,R1,#0x1
   \   0000003E   0x9100             STR      R1,[SP, #+0]
    435            }
    436          
    437            if (HSEStatus == (uint32_t)0x01)
   \   00000040   0x9900             LDR      R1,[SP, #+0]
   \   00000042   0x2901             CMP      R1,#+1
   \   00000044   0xD12A             BNE.N    ??SetSysClock_2
    438            {
    439              /* Select regulator voltage output Scale 1 mode */
    440              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
   \   00000046   0x6C01             LDR      R1,[R0, #+64]
   \   00000048   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \   0000004C   0x6401             STR      R1,[R0, #+64]
    441              __DSB();
   \   0000004E   0xF3BF 0x8F4F      DSB      
    442          //    PWR->CR |= PWR_CR_VOS;
    443              PWR->CR &= ~PWR_CR_VOS;
   \   00000052   0x....             LDR.N    R1,??DataTable2_9  ;; 0x40007000
   \   00000054   0x680A             LDR      R2,[R1, #+0]
   \   00000056   0xF422 0x4240      BIC      R2,R2,#0xC000
   \   0000005A   0x600A             STR      R2,[R1, #+0]
    444          
    445              /* HCLK = SYSCLK / 1*/
    446              RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
   \   0000005C   0x6881             LDR      R1,[R0, #+8]
   \   0000005E   0x6081             STR      R1,[R0, #+8]
    447          
    448          #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    449              /* PCLK2 = HCLK / 1*/
    450              RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
   \   00000060   0x6881             LDR      R1,[R0, #+8]
   \   00000062   0x6081             STR      R1,[R0, #+8]
    451              
    452              /* PCLK1 = HCLK / 1*/
    453              RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
   \   00000064   0x6881             LDR      R1,[R0, #+8]
   \   00000066   0x6081             STR      R1,[R0, #+8]
    454          #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
    455          
    456          #if defined (STM32F401xx)
    457              /* PCLK2 = HCLK / 1*/
    458              RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
    459              
    460              /* PCLK1 = HCLK / 1*/
    461              RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
    462          #endif /* STM32F401xx */
    463             
    464              /* Configure the main PLL */
    465              RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
    466                             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
   \   00000068   0x....             LDR.N    R1,??DataTable2_10  ;; 0x8434e02
   \   0000006A   0x6041             STR      R1,[R0, #+4]
    467          
    468              /* Enable the main PLL */
    469              RCC->CR |= RCC_CR_PLLON;
   \   0000006C   0x6801             LDR      R1,[R0, #+0]
   \   0000006E   0xF041 0x7180      ORR      R1,R1,#0x1000000
   \   00000072   0x6001             STR      R1,[R0, #+0]
    470          
    471              /* Wait till the main PLL is ready */
    472              while((RCC->CR & RCC_CR_PLLRDY) == 0)
   \                     ??SetSysClock_3: (+1)
   \   00000074   0x6801             LDR      R1,[R0, #+0]
   \   00000076   0x0189             LSLS     R1,R1,#+6
   \   00000078   0xD5FC             BPL.N    ??SetSysClock_3
    473              {
    474              }
    475             
    476          #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    477              /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    478              PWR->CR |= PWR_CR_ODEN;
    479              while((PWR->CSR & PWR_CSR_ODRDY) == 0)
    480              {
    481              }
    482              PWR->CR |= PWR_CR_ODSWEN;
    483              while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
    484              {
    485              }      
    486              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    487              FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
    488          #endif /* STM32F427_437x || STM32F429_439xx  */
    489          
    490          #if defined (STM32F40_41xxx)     
    491              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    492          //    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_0WS;
    493              FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_1WS;
   \   0000007A   0xF240 0x7101      MOVW     R1,#+1793
   \   0000007E   0x....             LDR.N    R2,??DataTable2_11  ;; 0x40023c00
   \   00000080   0x6011             STR      R1,[R2, #+0]
    494          #endif /* STM32F40_41xxx  */
    495          
    496          #if defined (STM32F401xx)
    497              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    498              FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
    499          #endif /* STM32F401xx */
    500          
    501              /* Select the main PLL as system clock source */
    502              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
   \   00000082   0x6881             LDR      R1,[R0, #+8]
   \   00000084   0x0889             LSRS     R1,R1,#+2
   \   00000086   0x0089             LSLS     R1,R1,#+2
   \   00000088   0x6081             STR      R1,[R0, #+8]
    503              RCC->CFGR |= RCC_CFGR_SW_PLL;
   \   0000008A   0x6881             LDR      R1,[R0, #+8]
   \   0000008C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000090   0x6081             STR      R1,[R0, #+8]
    504          
    505              /* Wait till the main PLL is used as system clock source */
    506              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
   \                     ??SetSysClock_4: (+1)
   \   00000092   0x6881             LDR      R1,[R0, #+8]
   \   00000094   0xF001 0x010C      AND      R1,R1,#0xC
   \   00000098   0x2908             CMP      R1,#+8
   \   0000009A   0xD1FA             BNE.N    ??SetSysClock_4
    507              {
    508              }
    509            }
    510          
    511          }
   \                     ??SetSysClock_2: (+1)
   \   0000009C   0xB002             ADD      SP,SP,#+8
   \   0000009E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000ED88         DC32     0xe000ed88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40023800         DC32     0x40023800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xFEF6FFFF         DC32     0xfef6ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x24003010         DC32     0x24003010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x08020000         DC32     0x8020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40023804         DC32     0x40023804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     AHBPrescTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x00F42400         DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x08434E02         DC32     0x8434e02

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40023C00         DC32     0x40023c00
    512          
    513          /**
    514            * @brief  Setup the external memory controller. Called in startup_stm32f4xx.s 
    515            *          before jump to __main
    516            * @param  None
    517            * @retval None
    518            */ 
    519          #ifdef DATA_IN_ExtSRAM
    520          /**
    521            * @brief  Setup the external memory controller.
    522            *         Called in startup_stm32f4xx.s before jump to main.
    523            *         This function configures the external SRAM mounted on STM324xG_EVAL/STM324x7I boards
    524            *         This SRAM will be used as program data memory (including heap and stack).
    525            * @param  None
    526            * @retval None
    527            */
    528          void SystemInit_ExtMemCtl(void)
    529          {
    530          /*-- GPIOs Configuration -----------------------------------------------------*/
    531          /*
    532           +-------------------+--------------------+------------------+--------------+
    533           +                       SRAM pins assignment                               +
    534           +-------------------+--------------------+------------------+--------------+
    535           | PD0  <-> FMC_D2  | PE0  <-> FMC_NBL0 | PF0  <-> FMC_A0 | PG0 <-> FMC_A10 | 
    536           | PD1  <-> FMC_D3  | PE1  <-> FMC_NBL1 | PF1  <-> FMC_A1 | PG1 <-> FMC_A11 | 
    537           | PD4  <-> FMC_NOE | PE3  <-> FMC_A19  | PF2  <-> FMC_A2 | PG2 <-> FMC_A12 | 
    538           | PD5  <-> FMC_NWE | PE4  <-> FMC_A20  | PF3  <-> FMC_A3 | PG3 <-> FMC_A13 | 
    539           | PD8  <-> FMC_D13 | PE7  <-> FMC_D4   | PF4  <-> FMC_A4 | PG4 <-> FMC_A14 | 
    540           | PD9  <-> FMC_D14 | PE8  <-> FMC_D5   | PF5  <-> FMC_A5 | PG5 <-> FMC_A15 | 
    541           | PD10 <-> FMC_D15 | PE9  <-> FMC_D6   | PF12 <-> FMC_A6 | PG9 <-> FMC_NE2 | 
    542           | PD11 <-> FMC_A16 | PE10 <-> FMC_D7   | PF13 <-> FMC_A7 |-----------------+
    543           | PD12 <-> FMC_A17 | PE11 <-> FMC_D8   | PF14 <-> FMC_A8 | 
    544           | PD13 <-> FMC_A18 | PE12 <-> FMC_D9   | PF15 <-> FMC_A9 | 
    545           | PD14 <-> FMC_D0  | PE13 <-> FMC_D10  |-----------------+
    546           | PD15 <-> FMC_D1  | PE14 <-> FMC_D11  |
    547           |                  | PE15 <-> FMC_D12  |
    548           +------------------+------------------+
    549          */
    550             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    551            RCC->AHB1ENR   |= 0x00000078;
    552            
    553            /* Connect PDx pins to FMC Alternate function */
    554            GPIOD->AFR[0]  = 0x00cc00cc;
    555            GPIOD->AFR[1]  = 0xcccccccc;
    556            /* Configure PDx pins in Alternate function mode */  
    557            GPIOD->MODER   = 0xaaaa0a0a;
    558            /* Configure PDx pins speed to 100 MHz */  
    559            GPIOD->OSPEEDR = 0xffff0f0f;
    560            /* Configure PDx pins Output type to push-pull */  
    561            GPIOD->OTYPER  = 0x00000000;
    562            /* No pull-up, pull-down for PDx pins */ 
    563            GPIOD->PUPDR   = 0x00000000;
    564          
    565            /* Connect PEx pins to FMC Alternate function */
    566            GPIOE->AFR[0]  = 0xcccccccc;
    567            GPIOE->AFR[1]  = 0xcccccccc;
    568            /* Configure PEx pins in Alternate function mode */ 
    569            GPIOE->MODER   = 0xaaaaaaaa;
    570            /* Configure PEx pins speed to 100 MHz */ 
    571            GPIOE->OSPEEDR = 0xffffffff;
    572            /* Configure PEx pins Output type to push-pull */  
    573            GPIOE->OTYPER  = 0x00000000;
    574            /* No pull-up, pull-down for PEx pins */ 
    575            GPIOE->PUPDR   = 0x00000000;
    576          
    577            /* Connect PFx pins to FMC Alternate function */
    578            GPIOF->AFR[0]  = 0x00cccccc;
    579            GPIOF->AFR[1]  = 0xcccc0000;
    580            /* Configure PFx pins in Alternate function mode */   
    581            GPIOF->MODER   = 0xaa000aaa;
    582            /* Configure PFx pins speed to 100 MHz */ 
    583            GPIOF->OSPEEDR = 0xff000fff;
    584            /* Configure PFx pins Output type to push-pull */  
    585            GPIOF->OTYPER  = 0x00000000;
    586            /* No pull-up, pull-down for PFx pins */ 
    587            GPIOF->PUPDR   = 0x00000000;
    588          
    589            /* Connect PGx pins to FMC Alternate function */
    590            GPIOG->AFR[0]  = 0x00cccccc;
    591            GPIOG->AFR[1]  = 0x000000c0;
    592            /* Configure PGx pins in Alternate function mode */ 
    593            GPIOG->MODER   = 0x00080aaa;
    594            /* Configure PGx pins speed to 100 MHz */ 
    595            GPIOG->OSPEEDR = 0x000c0fff;
    596            /* Configure PGx pins Output type to push-pull */  
    597            GPIOG->OTYPER  = 0x00000000;
    598            /* No pull-up, pull-down for PGx pins */ 
    599            GPIOG->PUPDR   = 0x00000000;
    600            
    601          /*-- FMC Configuration ------------------------------------------------------*/
    602            /* Enable the FMC/FSMC interface clock */
    603            RCC->AHB3ENR         |= 0x00000001;
    604            
    605          #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    606            /* Configure and enable Bank1_SRAM2 */
    607            FMC_Bank1->BTCR[2]  = 0x00001011;
    608            FMC_Bank1->BTCR[3]  = 0x00000201;
    609            FMC_Bank1E->BWTR[2] = 0x0fffffff;
    610          #endif /* STM32F427_437xx || STM32F429_439xx */ 
    611          
    612          #if defined (STM32F40_41xxx)
    613            /* Configure and enable Bank1_SRAM2 */
    614            FSMC_Bank1->BTCR[2]  = 0x00001011;
    615            FSMC_Bank1->BTCR[3]  = 0x00000201;
    616            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    617          #endif  /* STM32F40_41xxx */
    618          
    619          /*
    620            Bank1_SRAM2 is configured as follow:
    621            In case of FSMC configuration 
    622            NORSRAMTimingStructure.FSMC_AddressSetupTime = 1;
    623            NORSRAMTimingStructure.FSMC_AddressHoldTime = 0;
    624            NORSRAMTimingStructure.FSMC_DataSetupTime = 2;
    625            NORSRAMTimingStructure.FSMC_BusTurnAroundDuration = 0;
    626            NORSRAMTimingStructure.FSMC_CLKDivision = 0;
    627            NORSRAMTimingStructure.FSMC_DataLatency = 0;
    628            NORSRAMTimingStructure.FSMC_AccessMode = FMC_AccessMode_A;
    629          
    630            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    631            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    632            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
    633            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    634            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    635            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    636            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    637            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    638            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    639            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    640            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    641            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    642            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    643            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &NORSRAMTimingStructure;
    644            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &NORSRAMTimingStructure;
    645          
    646            In case of FMC configuration   
    647            NORSRAMTimingStructure.FMC_AddressSetupTime = 1;
    648            NORSRAMTimingStructure.FMC_AddressHoldTime = 0;
    649            NORSRAMTimingStructure.FMC_DataSetupTime = 2;
    650            NORSRAMTimingStructure.FMC_BusTurnAroundDuration = 0;
    651            NORSRAMTimingStructure.FMC_CLKDivision = 0;
    652            NORSRAMTimingStructure.FMC_DataLatency = 0;
    653            NORSRAMTimingStructure.FMC_AccessMode = FMC_AccessMode_A;
    654          
    655            FMC_NORSRAMInitStructure.FMC_Bank = FMC_Bank1_NORSRAM2;
    656            FMC_NORSRAMInitStructure.FMC_DataAddressMux = FMC_DataAddressMux_Disable;
    657            FMC_NORSRAMInitStructure.FMC_MemoryType = FMC_MemoryType_SRAM;
    658            FMC_NORSRAMInitStructure.FMC_MemoryDataWidth = FMC_MemoryDataWidth_16b;
    659            FMC_NORSRAMInitStructure.FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
    660            FMC_NORSRAMInitStructure.FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;  
    661            FMC_NORSRAMInitStructure.FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
    662            FMC_NORSRAMInitStructure.FMC_WrapMode = FMC_WrapMode_Disable;
    663            FMC_NORSRAMInitStructure.FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
    664            FMC_NORSRAMInitStructure.FMC_WriteOperation = FMC_WriteOperation_Enable;
    665            FMC_NORSRAMInitStructure.FMC_WaitSignal = FMC_WaitSignal_Disable;
    666            FMC_NORSRAMInitStructure.FMC_ExtendedMode = FMC_ExtendedMode_Disable;
    667            FMC_NORSRAMInitStructure.FMC_WriteBurst = FMC_WriteBurst_Disable;
    668            FMC_NORSRAMInitStructure.FMC_ContinousClock = FMC_CClock_SyncOnly;
    669            FMC_NORSRAMInitStructure.FMC_ReadWriteTimingStruct = &NORSRAMTimingStructure;
    670            FMC_NORSRAMInitStructure.FMC_WriteTimingStruct = &NORSRAMTimingStructure;
    671          */
    672            
    673          }
    674          #endif /* DATA_IN_ExtSRAM */
    675            
    676          #ifdef DATA_IN_ExtSDRAM
    677          /**
    678            * @brief  Setup the external memory controller.
    679            *         Called in startup_stm32f4xx.s before jump to main.
    680            *         This function configures the external SDRAM mounted on STM324x9I_EVAL board
    681            *         This SDRAM will be used as program data memory (including heap and stack).
    682            * @param  None
    683            * @retval None
    684            */
    685          void SystemInit_ExtMemCtl(void)
    686          {
    687            register uint32_t tmpreg = 0, timeout = 0xFFFF;
    688            register uint32_t index;
    689          
    690            /* Enable GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface 
    691                clock */
    692            RCC->AHB1ENR |= 0x000001FC;
    693            
    694            /* Connect PCx pins to FMC Alternate function */
    695            GPIOC->AFR[0]  = 0x0000000c;
    696            GPIOC->AFR[1]  = 0x00007700;
    697            /* Configure PCx pins in Alternate function mode */  
    698            GPIOC->MODER   = 0x00a00002;
    699            /* Configure PCx pins speed to 50 MHz */  
    700            GPIOC->OSPEEDR = 0x00a00002;
    701            /* Configure PCx pins Output type to push-pull */  
    702            GPIOC->OTYPER  = 0x00000000;
    703            /* No pull-up, pull-down for PCx pins */ 
    704            GPIOC->PUPDR   = 0x00500000;
    705            
    706            /* Connect PDx pins to FMC Alternate function */
    707            GPIOD->AFR[0]  = 0x000000CC;
    708            GPIOD->AFR[1]  = 0xCC000CCC;
    709            /* Configure PDx pins in Alternate function mode */  
    710            GPIOD->MODER   = 0xA02A000A;
    711            /* Configure PDx pins speed to 50 MHz */  
    712            GPIOD->OSPEEDR = 0xA02A000A;
    713            /* Configure PDx pins Output type to push-pull */  
    714            GPIOD->OTYPER  = 0x00000000;
    715            /* No pull-up, pull-down for PDx pins */ 
    716            GPIOD->PUPDR   = 0x00000000;
    717          
    718            /* Connect PEx pins to FMC Alternate function */
    719            GPIOE->AFR[0]  = 0xC00000CC;
    720            GPIOE->AFR[1]  = 0xCCCCCCCC;
    721            /* Configure PEx pins in Alternate function mode */ 
    722            GPIOE->MODER   = 0xAAAA800A;
    723            /* Configure PEx pins speed to 50 MHz */ 
    724            GPIOE->OSPEEDR = 0xAAAA800A;
    725            /* Configure PEx pins Output type to push-pull */  
    726            GPIOE->OTYPER  = 0x00000000;
    727            /* No pull-up, pull-down for PEx pins */ 
    728            GPIOE->PUPDR   = 0x00000000;
    729          
    730            /* Connect PFx pins to FMC Alternate function */
    731            GPIOF->AFR[0]  = 0xcccccccc;
    732            GPIOF->AFR[1]  = 0xcccccccc;
    733            /* Configure PFx pins in Alternate function mode */   
    734            GPIOF->MODER   = 0xAA800AAA;
    735            /* Configure PFx pins speed to 50 MHz */ 
    736            GPIOF->OSPEEDR = 0xAA800AAA;
    737            /* Configure PFx pins Output type to push-pull */  
    738            GPIOF->OTYPER  = 0x00000000;
    739            /* No pull-up, pull-down for PFx pins */ 
    740            GPIOF->PUPDR   = 0x00000000;
    741          
    742            /* Connect PGx pins to FMC Alternate function */
    743            GPIOG->AFR[0]  = 0xcccccccc;
    744            GPIOG->AFR[1]  = 0xcccccccc;
    745            /* Configure PGx pins in Alternate function mode */ 
    746            GPIOG->MODER   = 0xaaaaaaaa;
    747            /* Configure PGx pins speed to 50 MHz */ 
    748            GPIOG->OSPEEDR = 0xaaaaaaaa;
    749            /* Configure PGx pins Output type to push-pull */  
    750            GPIOG->OTYPER  = 0x00000000;
    751            /* No pull-up, pull-down for PGx pins */ 
    752            GPIOG->PUPDR   = 0x00000000;
    753            
    754            /* Connect PHx pins to FMC Alternate function */
    755            GPIOH->AFR[0]  = 0x00C0CC00;
    756            GPIOH->AFR[1]  = 0xCCCCCCCC;
    757            /* Configure PHx pins in Alternate function mode */ 
    758            GPIOH->MODER   = 0xAAAA08A0;
    759            /* Configure PHx pins speed to 50 MHz */ 
    760            GPIOH->OSPEEDR = 0xAAAA08A0;
    761            /* Configure PHx pins Output type to push-pull */  
    762            GPIOH->OTYPER  = 0x00000000;
    763            /* No pull-up, pull-down for PHx pins */ 
    764            GPIOH->PUPDR   = 0x00000000;
    765            
    766            /* Connect PIx pins to FMC Alternate function */
    767            GPIOI->AFR[0]  = 0xCCCCCCCC;
    768            GPIOI->AFR[1]  = 0x00000CC0;
    769            /* Configure PIx pins in Alternate function mode */ 
    770            GPIOI->MODER   = 0x0028AAAA;
    771            /* Configure PIx pins speed to 50 MHz */ 
    772            GPIOI->OSPEEDR = 0x0028AAAA;
    773            /* Configure PIx pins Output type to push-pull */  
    774            GPIOI->OTYPER  = 0x00000000;
    775            /* No pull-up, pull-down for PIx pins */ 
    776            GPIOI->PUPDR   = 0x00000000;
    777            
    778          /*-- FMC Configuration ------------------------------------------------------*/
    779            /* Enable the FMC interface clock */
    780            RCC->AHB3ENR |= 0x00000001;
    781            
    782            /* Configure and enable SDRAM bank1 */
    783            FMC_Bank5_6->SDCR[0] = 0x000039D0;
    784            FMC_Bank5_6->SDTR[0] = 0x01115351;      
    785            
    786            /* SDRAM initialization sequence */
    787            /* Clock enable command */
    788            FMC_Bank5_6->SDCMR = 0x00000011; 
    789            tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    790            while((tmpreg != 0) & (timeout-- > 0))
    791            {
    792              tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    793            }
    794            
    795            /* Delay */
    796            for (index = 0; index<1000; index++);
    797            
    798            /* PALL command */
    799            FMC_Bank5_6->SDCMR = 0x00000012;           
    800            timeout = 0xFFFF;
    801            while((tmpreg != 0) & (timeout-- > 0))
    802            {
    803            tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    804            }
    805            
    806            /* Auto refresh command */
    807            FMC_Bank5_6->SDCMR = 0x00000073;
    808            timeout = 0xFFFF;
    809            while((tmpreg != 0) & (timeout-- > 0))
    810            {
    811            tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    812            }
    813           
    814            /* MRD register program */
    815            FMC_Bank5_6->SDCMR = 0x00046014;
    816            timeout = 0xFFFF;
    817            while((tmpreg != 0) & (timeout-- > 0))
    818            {
    819            tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    820            } 
    821            
    822            /* Set refresh count */
    823            tmpreg = FMC_Bank5_6->SDRTR;
    824            FMC_Bank5_6->SDRTR = (tmpreg | (0x0000027C<<1));
    825            
    826            /* Disable write protection */
    827            tmpreg = FMC_Bank5_6->SDCR[0]; 
    828            FMC_Bank5_6->SDCR[0] = (tmpreg & 0xFFFFFDFF);
    829            
    830          /*
    831            Bank1_SDRAM is configured as follow:
    832          
    833            FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
    834            FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 6;  
    835            FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;        
    836            FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 6;         
    837            FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
    838            FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
    839            FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;               
    840          
    841            FMC_SDRAMInitStructure.FMC_Bank = SDRAM_BANK;
    842            FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
    843            FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_11b;
    844            FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
    845            FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
    846            FMC_SDRAMInitStructure.FMC_CASLatency = FMC_CAS_Latency_3; 
    847            FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
    848            FMC_SDRAMInitStructure.FMC_SDClockPeriod = FMC_SDClock_Period_2;
    849            FMC_SDRAMInitStructure.FMC_ReadBurst = FMC_Read_Burst_disable;
    850            FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
    851            FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
    852          */
    853            
    854          }
    855          #endif /* DATA_IN_ExtSDRAM */
    856          
    857          
    858          /**
    859            * @}
    860            */
    861          
    862          /**
    863            * @}
    864            */
    865            
    866          /**
    867            * @}
    868            */    
    869          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock()
       0   SystemCoreClockUpdate
       8   SystemInit
         8   -> SetSysClock()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      20  AHBPrescTable
          SystemCoreClock
     160  SetSysClock()
     122  SystemCoreClockUpdate
      62  SystemInit

 
  20 bytes in section .data
 392 bytes in section .text
 
 392 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Utilities.cpp
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Utilities.cpp -D
#        IAR_ARM_CM4 -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H
#        -D SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D
#        STENDBUY_NOT_USE -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO
#        -D BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\Utilities.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\Utilities.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Utilities.cpp
      1          /**
      2            ******************************************************************************
      3            * @file Utilities.cpp
      4            * @author  VN Asliuk
      5            * @version  V0.0.1
      6            * @date  16.09.2009 15:47:24
      7            * @brief  Device/board hw description class implementation
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, CARDIAN SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2009 CARDIAN</center></h2>
     19            */ 
     20          //------------------------------------------------------------------------------------
     21          #include "Utilities.h"
     22          #include <string.h>
     23          //------------------------------------------------------------------------------------
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void FillSrcBuffer(BYTE *Buffer,BYTE Byte2Fill)
     26          {
     27          	for(int i = 0;i < 1024;i++) Buffer[i] = Byte2Fill;
   \                     _Z13FillSrcBufferPhh: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xE001             B.N      ??FillSrcBuffer_0
   \                     ??FillSrcBuffer_1: (+1)
   \   00000004   0x5411             STRB     R1,[R2, R0]
   \   00000006   0x1C52             ADDS     R2,R2,#+1
   \                     ??FillSrcBuffer_0: (+1)
   \   00000008   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000000C   0xDBFA             BLT.N    ??FillSrcBuffer_1
     28          }
   \   0000000E   0x4770             BX       LR               ;; return
     29          //------------------------------------------------------------------------------------
     30          

   \                                 In section .text, align 2, keep-with-next
     31          void ClearSrcBuffer(BYTE *Buffer)
     32          {
     33          	for(int i = 0;i < 1024;i++) Buffer[i] = 0;
   \                     _Z14ClearSrcBufferPh: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0xE001             B.N      ??ClearSrcBuffer_0
   \                     ??ClearSrcBuffer_1: (+1)
   \   00000006   0x540A             STRB     R2,[R1, R0]
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \                     ??ClearSrcBuffer_0: (+1)
   \   0000000A   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000000E   0xDBFA             BLT.N    ??ClearSrcBuffer_1
     34          }
   \   00000010   0x4770             BX       LR               ;; return
     35          //------------------------------------------------------------------------------------
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void CopySrcBuffer(BYTE *DstBuffer,BYTE *SrcBuffer)
     38          {
     39          	for(int i = 0;i < 1024;i++) DstBuffer[i] = SrcBuffer[i];
   \                     _Z13CopySrcBufferPhS_: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xE002             B.N      ??CopySrcBuffer_0
   \                     ??CopySrcBuffer_1: (+1)
   \   00000004   0x5C53             LDRB     R3,[R2, R1]
   \   00000006   0x5413             STRB     R3,[R2, R0]
   \   00000008   0x1C52             ADDS     R2,R2,#+1
   \                     ??CopySrcBuffer_0: (+1)
   \   0000000A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000000E   0xDBF9             BLT.N    ??CopySrcBuffer_1
     40          }
   \   00000010   0x4770             BX       LR               ;; return
     41          //------------------------------------------------------------------------------------
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void itos(int val,char *buf,int size,Radix r)
     44          {
   \                     _Z4itosiPci5Radix: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
     45          	char *offset = buf;   // a pointer to a string
   \   00000002   0x460C             MOV      R4,R1
     46            char *first = offset; // a pointer to
   \   00000004   0x4625             MOV      R5,R4
     47                                  // the first digit
     48            int delta_y;          // the value of a digit
     49            int count = 0;        // a number of digits
   \   00000006   0x2600             MOVS     R6,#+0
     50                                  // in the string
     51          
     52            // val is negative, so let's add '-' to
     53            // the begin of the string.
     54            if(val < 0) 
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD504             BPL.N    ??itos_0
     55            	{
     56              	*offset++ = '-';
   \   0000000C   0x252D             MOVS     R5,#+45
   \   0000000E   0xF804 0x5B01      STRB     R5,[R4], #+1
     57                val = -val;
   \   00000012   0x4240             RSBS     R0,R0,#+0
     58                first = offset;
   \   00000014   0x4625             MOV      R5,R4
     59              }
     60              
     61            if(val == 0) 
   \                     ??itos_0: (+1)
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD10D             BNE.N    ??itos_1
     62            	{
     63            		int g = 0;
   \   0000001A   0x4630             MOV      R0,R6
     64          		  if(r == HEXADECIMAL) 
   \   0000001C   0x2B10             CMP      R3,#+16
   \   0000001E   0xD104             BNE.N    ??itos_2
     65            			{
     66            				buf[g++] = 'x';
   \   00000020   0x2078             MOVS     R0,#+120
   \   00000022   0x7008             STRB     R0,[R1, #+0]
     67            				buf[g++] = '0';
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x7048             STRB     R0,[R1, #+1]
   \   00000028   0x2002             MOVS     R0,#+2
     68            			}
     69            		buf[g++] = '0';
   \                     ??itos_2: (+1)
   \   0000002A   0x2230             MOVS     R2,#+48
   \   0000002C   0x5442             STRB     R2,[R0, R1]
     70            		buf[g] = 0;
   \   0000002E   0x4632             MOV      R2,R6
   \   00000030   0x1840             ADDS     R0,R0,R1
   \   00000032   0x7042             STRB     R2,[R0, #+1]
     71            		return;
   \   00000034   0xE03C             B.N      ??itos_3
     72            	}  
     73          
     74            // Take special actions for hexademical and
     75            // octople countable systems and insert to the
     76            // begin of the string either the "\0x" or '0'
     77            // prefixes respectively.
     78            if(r == HEXADECIMAL) 
   \                     ??itos_1: (+1)
   \   00000036   0x2B10             CMP      R3,#+16
   \   00000038   0xD104             BNE.N    ??itos_4
     79            	{
     80          //      *offset++ = '0';
     81                *offset++ = 'x';
   \   0000003A   0x2178             MOVS     R1,#+120
   \   0000003C   0xF804 0x1B01      STRB     R1,[R4], #+1
     82                first = offset;
   \   00000040   0x4625             MOV      R5,R4
   \   00000042   0xE00A             B.N      ??itos_5
     83              }
     84            else if (r == OCTOPLE) 
   \                     ??itos_4: (+1)
   \   00000044   0x2B08             CMP      R3,#+8
   \   00000046   0xD108             BNE.N    ??itos_5
     85            	{
     86                *offset++ = '0';
   \   00000048   0x2130             MOVS     R1,#+48
   \   0000004A   0xF804 0x1B01      STRB     R1,[R4], #+1
     87                first = offset;
   \   0000004E   0x4625             MOV      R5,R4
   \   00000050   0xE003             B.N      ??itos_5
     88              }
     89          
     90            // Read and store digits into the string.
     91            while((val > 0) && (size-- >= 0))
     92            	{
     93              	delta_y = (int)(val % r);
     94                val /= r;
     95          
     96                if (delta_y > 9) // The hexademical format.
     97                	*offset++ = (delta_y - 10 + 'A');
     98                else  // Binary, decimal and octople formats.
     99                  *offset++ = (delta_y + '0');
   \                     ??itos_6: (+1)
   \   00000052   0x3130             ADDS     R1,R1,#+48
   \   00000054   0xF804 0x1B01      STRB     R1,[R4], #+1
    100                count++;
   \                     ??itos_7: (+1)
   \   00000058   0x1C76             ADDS     R6,R6,#+1
   \                     ??itos_5: (+1)
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xDB0E             BLT.N    ??itos_8
   \   0000005E   0x4611             MOV      R1,R2
   \   00000060   0x1E4A             SUBS     R2,R1,#+1
   \   00000062   0x2900             CMP      R1,#+0
   \   00000064   0xD40A             BMI.N    ??itos_8
   \   00000066   0xFB90 0xF7F3      SDIV     R7,R0,R3
   \   0000006A   0xFB03 0x0117      MLS      R1,R3,R7,R0
   \   0000006E   0x4638             MOV      R0,R7
   \   00000070   0x290A             CMP      R1,#+10
   \   00000072   0xDBEE             BLT.N    ??itos_6
   \   00000074   0x3137             ADDS     R1,R1,#+55
   \   00000076   0xF804 0x1B01      STRB     R1,[R4], #+1
   \   0000007A   0xE7ED             B.N      ??itos_7
    101              }
    102          
    103            // Points to the last digit.
    104            *offset-- = '\0';
   \                     ??itos_8: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xF804 0x0901      STRB     R0,[R4], #-1
    105          
    106            // Now our string corresponds to the integer
    107            // digits but it is in the reverse order. So make
    108            // the backward transformation of it. If it has
    109            // only two characters just swap them without any
    110            // additional actions.
    111            if(count == 1)
   \   00000082   0x2E01             CMP      R6,#+1
   \   00000084   0xD014             BEQ.N    ??itos_3
    112            	return;
    113            else if (count == 2) 
   \   00000086   0x2E02             CMP      R6,#+2
   \   00000088   0xD104             BNE.N    ??itos_9
    114            	{
    115              	char temp = (char)*offset;
   \   0000008A   0x7820             LDRB     R0,[R4, #+0]
    116                *offset-- = *first;
   \   0000008C   0x7829             LDRB     R1,[R5, #+0]
   \   0000008E   0x7021             STRB     R1,[R4, #+0]
    117                *first++ = temp;      
   \   00000090   0x7028             STRB     R0,[R5, #+0]
   \   00000092   0xE00D             B.N      ??itos_3
    118              }
    119            // For more than two characters in the string
    120            // reverse full string in the folowing cycle.
    121            else 
    122            	{
    123              	delta_y = count / 2;
   \                     ??itos_9: (+1)
   \   00000094   0xEB06 0x70D6      ADD      R0,R6,R6, LSR #+31
   \   00000098   0x1041             ASRS     R1,R0,#+1
   \   0000009A   0xE005             B.N      ??itos_10
    124          
    125                while (delta_y--) 
    126                	{
    127                  	char temp = (char)*first;
   \                     ??itos_11: (+1)
   \   0000009C   0x7828             LDRB     R0,[R5, #+0]
    128                    *first++ = *offset;
   \   0000009E   0x7822             LDRB     R2,[R4, #+0]
   \   000000A0   0xF805 0x2B01      STRB     R2,[R5], #+1
    129                    *offset-- = temp;
   \   000000A4   0xF804 0x0901      STRB     R0,[R4], #-1
    130                  }
   \                     ??itos_10: (+1)
   \   000000A8   0x4608             MOV      R0,R1
   \   000000AA   0x1E41             SUBS     R1,R0,#+1
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD1F5             BNE.N    ??itos_11
    131              }
    132          }
   \                     ??itos_3: (+1)
   \   000000B0   0xBCF0             POP      {R4-R7}
   \   000000B2   0x4770             BX       LR               ;; return
    133          //------------------------------------------------------------------------------------
    134          
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void itodts(int val,char *buf,int size)
    137          {
   \                     _Z6itodtsiPci: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    138          	char *offset = buf;   // a pointer to a string
    139            char *first = offset; // a pointer to
   \   00000002   0x460B             MOV      R3,R1
    140                                  // the first digit
    141            int delta_y;          // the value of a digit
    142            int count = 0;        // a number of digits
   \   00000004   0x2400             MOVS     R4,#+0
    143                                  // in the string
    144          
    145          	int valfix = val;
   \   00000006   0x4605             MOV      R5,R0
    146            // val is negative, so let's add '-' to
    147            // the begin of the string.
    148            if(val <= 0) 
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xDA09             BGE.N    ??itodts_0
    149            	{
    150            		buf[0] = '0';
   \   0000000C   0x2030             MOVS     R0,#+48
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    151            		buf[1] = '0';
   \   00000010   0x7048             STRB     R0,[R1, #+1]
    152            		buf[2] = 0;
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x7088             STRB     R0,[R1, #+2]
    153            		return;
   \   00000016   0xE037             B.N      ??itodts_1
    154            	}  
    155            	
    156            // Read and store digits into the string.
    157            while((val > 0) && (size-- >= 0))
    158            	{
    159              	delta_y = (int)(val % DECIMAL);
    160                val /= DECIMAL;
    161          
    162                if (delta_y > 9) // The hexademical format.
    163                	*offset++ = (delta_y - 10 + 'a');
    164                else  // Binary, decimal and octople formats.
    165                  *offset++ = (delta_y + '0');
   \                     ??itodts_2: (+1)
   \   00000018   0x3630             ADDS     R6,R6,#+48
   \   0000001A   0xF801 0x6B01      STRB     R6,[R1], #+1
    166                count++;
   \                     ??itodts_3: (+1)
   \   0000001E   0x1C64             ADDS     R4,R4,#+1
   \                     ??itodts_0: (+1)
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xDB11             BLT.N    ??itodts_4
   \   00000024   0x4616             MOV      R6,R2
   \   00000026   0x1E72             SUBS     R2,R6,#+1
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD40D             BMI.N    ??itodts_4
   \   0000002C   0x260A             MOVS     R6,#+10
   \   0000002E   0xFB90 0xF7F6      SDIV     R7,R0,R6
   \   00000032   0xEB07 0x0687      ADD      R6,R7,R7, LSL #+2
   \   00000036   0xEBA0 0x0646      SUB      R6,R0,R6, LSL #+1
   \   0000003A   0x4638             MOV      R0,R7
   \   0000003C   0x2E0A             CMP      R6,#+10
   \   0000003E   0xDBEB             BLT.N    ??itodts_2
   \   00000040   0x3657             ADDS     R6,R6,#+87
   \   00000042   0xF801 0x6B01      STRB     R6,[R1], #+1
   \   00000046   0xE7EA             B.N      ??itodts_3
    167              }
    168            if(valfix < 10)
   \                     ??itodts_4: (+1)
   \   00000048   0x2D0A             CMP      R5,#+10
   \   0000004A   0xDA03             BGE.N    ??itodts_5
    169            	{
    170            		*offset++ = '0';
   \   0000004C   0x2030             MOVS     R0,#+48
   \   0000004E   0xF801 0x0B01      STRB     R0,[R1], #+1
    171            		count++;
   \   00000052   0x1C64             ADDS     R4,R4,#+1
    172            	}	
    173          
    174            // Points to the last digit.
    175            *offset-- = '\0';
   \                     ??itodts_5: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF801 0x0901      STRB     R0,[R1], #-1
    176          
    177            // Now our string corresponds to the integer
    178            // digits but it is in the reverse order. So make
    179            // the backward transformation of it. If it has
    180            // only two characters just swap them without any
    181            // additional actions.
    182            if(count == 1)
   \   0000005A   0x2C01             CMP      R4,#+1
   \   0000005C   0xD014             BEQ.N    ??itodts_1
    183            	return;
    184            else if (count == 2) 
   \   0000005E   0x2C02             CMP      R4,#+2
   \   00000060   0xD104             BNE.N    ??itodts_6
    185            	{
    186              	char temp = (char)*offset;
   \   00000062   0x7808             LDRB     R0,[R1, #+0]
    187                *offset-- = *first;
   \   00000064   0x781A             LDRB     R2,[R3, #+0]
   \   00000066   0x700A             STRB     R2,[R1, #+0]
    188                *first++ = temp;      
   \   00000068   0x7018             STRB     R0,[R3, #+0]
   \   0000006A   0xE00D             B.N      ??itodts_1
    189              }
    190            // For more than two characters in the string
    191            // reverse full string in the folowing cycle.
    192            else 
    193            	{
    194              	delta_y = count / 2;
   \                     ??itodts_6: (+1)
   \   0000006C   0xEB04 0x70D4      ADD      R0,R4,R4, LSR #+31
   \   00000070   0x1046             ASRS     R6,R0,#+1
   \   00000072   0xE005             B.N      ??itodts_7
    195          
    196                while (delta_y--) 
    197                	{
    198                  	char temp = (char)*first;
   \                     ??itodts_8: (+1)
   \   00000074   0x7818             LDRB     R0,[R3, #+0]
    199                    *first++ = *offset;
   \   00000076   0x780A             LDRB     R2,[R1, #+0]
   \   00000078   0xF803 0x2B01      STRB     R2,[R3], #+1
    200                    *offset-- = temp;
   \   0000007C   0xF801 0x0901      STRB     R0,[R1], #-1
    201                  }
   \                     ??itodts_7: (+1)
   \   00000080   0x4630             MOV      R0,R6
   \   00000082   0x1E46             SUBS     R6,R0,#+1
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD1F5             BNE.N    ??itodts_8
    202              }
    203          }
   \                     ??itodts_1: (+1)
   \   00000088   0xBCF0             POP      {R4-R7}
   \   0000008A   0x4770             BX       LR               ;; return
    204          //------------------------------------------------------------------------------------
    205          

   \                                 In section .text, align 2, keep-with-next
    206          void ix10tosAsFloat(int val,char *buf,int size)
    207          {
   \                     _Z14ix10tosAsFloatiPci: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
    208          	itos(val,buf,size);
   \   00000006   0x230A             MOVS     R3,#+10
   \   00000008   0x.... 0x....      BL       _Z4itosiPci5Radix
    209          	
    210          	int dlen = strlen(buf);
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
    211          	//Offset last digit and add point
    212          	
    213          	
    214          	if(val < 10)
   \   00000012   0x1901             ADDS     R1,R0,R4
   \   00000014   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000018   0x1902             ADDS     R2,R0,R4
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
   \   0000001C   0x2D0A             CMP      R5,#+10
   \   0000001E   0xDA09             BGE.N    ??ix10tosAsFloat_0
    215          		{
    216          			buf[dlen+1] = buf[dlen-1];
   \   00000020   0x7011             STRB     R1,[R2, #+0]
    217          			buf[dlen] = '.';
   \   00000022   0x212E             MOVS     R1,#+46
   \   00000024   0x5501             STRB     R1,[R0, R4]
    218          			buf[dlen-1] = '0';
   \   00000026   0x2130             MOVS     R1,#+48
   \   00000028   0x1900             ADDS     R0,R0,R4
   \   0000002A   0xF800 0x1C01      STRB     R1,[R0, #-1]
    219          			buf[dlen+2] = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x7050             STRB     R0,[R2, #+1]
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}
    220          		}
    221          	else
    222          		{
    223          			buf[dlen] = buf[dlen-1];
   \                     ??ix10tosAsFloat_0: (+1)
   \   00000034   0x5501             STRB     R1,[R0, R4]
    224          			buf[dlen-1] = '.';
   \   00000036   0x212E             MOVS     R1,#+46
   \   00000038   0x1900             ADDS     R0,R0,R4
   \   0000003A   0xF800 0x1C01      STRB     R1,[R0, #-1]
    225          			buf[dlen+1] = 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x7010             STRB     R0,[R2, #+0]
    226          		}	
    227          }
   \   00000042   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    228          //------------------------------------------------------------------------------------
    229          
    230          #pragma diag_suppress=Pe940

   \                                 In section .text, align 4, keep-with-next
    231          int reverseBits(int val)
    232          {
    233            asm("rbit r0, r0");
   \                     _Z11reverseBitsi: (+1)
   \   00000000   0xFA90 0xF0A0      rbit r0, r0
    234          //  asm("bx lr");
    235          }
   \   00000004   0x4770             BX       LR               ;; return
    236          //------------------------------------------------------------------------------------
    237          

   \                                 In section .text, align 2, keep-with-next
    238          char *ftoa(float f,int Fract)
    239          {
   \                     _Z4ftoafi: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
    240          	long mantissa, int_part, frac_part;
    241          	short exp2;
    242          	LF_t x;
    243          	char *p;
    244          	static char outbuf[15];
    245          
    246          	if(f == 0.0)
   \   00000004   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000008   0xEEF1 0xFA10      FMSTAT   
   \   0000000C   0xD10A             BNE.N    ??ftoa_0
    247          		{
    248          			outbuf[0] = '0';
   \   0000000E   0x....             LDR.N    R4,??DataTable0
   \   00000010   0x2030             MOVS     R0,#+48
   \   00000012   0x7020             STRB     R0,[R4, #+0]
    249          			outbuf[1] = '.';
   \   00000014   0x202E             MOVS     R0,#+46
   \   00000016   0x7060             STRB     R0,[R4, #+1]
    250          			outbuf[2] = '0';
   \   00000018   0x2030             MOVS     R0,#+48
   \   0000001A   0x70A0             STRB     R0,[R4, #+2]
    251          			outbuf[3] = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x70E0             STRB     R0,[R4, #+3]
    252          			return outbuf;
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xBDF2             POP      {R1,R4-R7,PC}
    253          		}
    254          	
    255          	x.F = f;
   \                     ??ftoa_0: (+1)
   \   00000024   0xED8D 0x0A00      VSTR     S0,[SP, #+0]
    256          	exp2 = (unsigned char)(x.L >> 23) - 127;
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x15C0             ASRS     R0,R0,#+23
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0xF1A0 0x017F      SUB      R1,R0,#+127
   \   00000032   0xB209             SXTH     R1,R1
    257          	mantissa = (x.L & 0xFFFFFF) | 0x800000;
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0x0200             LSLS     R0,R0,#+8
   \   00000038   0x0A00             LSRS     R0,R0,#+8
   \   0000003A   0xF440 0x0200      ORR      R2,R0,#0x800000
    258          	frac_part = 0;
   \   0000003E   0x2600             MOVS     R6,#+0
    259          	int_part = 0;
   \   00000040   0x4630             MOV      R0,R6
    260          
    261          	if(exp2 >= 31)
   \   00000042   0x291F             CMP      R1,#+31
   \   00000044   0xDA5E             BGE.N    ??ftoa_1
    262          	{
    263          		return 0;
    264          	}
    265          	else if (exp2 < -23)
   \   00000046   0xF111 0x0F17      CMN      R1,#+23
   \   0000004A   0xDB5B             BLT.N    ??ftoa_1
    266          		{
    267          			return 0;
    268          		}
    269          		else if (exp2 >= 23)
   \   0000004C   0x2917             CMP      R1,#+23
   \   0000004E   0xDB04             BLT.N    ??ftoa_2
    270          			{
    271          				int_part = mantissa << (exp2 - 23);
   \   00000050   0xF1A1 0x0017      SUB      R0,R1,#+23
   \   00000054   0xFA02 0xF000      LSL      R0,R2,R0
   \   00000058   0xE00F             B.N      ??ftoa_3
    272          			}	
    273          			else if (exp2 >= 0) 
   \                     ??ftoa_2: (+1)
   \   0000005A   0x2900             CMP      R1,#+0
   \   0000005C   0xD409             BMI.N    ??ftoa_4
    274          				{
    275          					int_part = mantissa >> (23 - exp2);
   \   0000005E   0xF1C1 0x0317      RSB      R3,R1,#+23
   \   00000062   0x4610             MOV      R0,R2
   \   00000064   0x4118             ASRS     R0,R0,R3
    276          					frac_part = (mantissa << (exp2 + 1)) & 0xFFFFFF;
   \   00000066   0x1C49             ADDS     R1,R1,#+1
   \   00000068   0xFA02 0xF101      LSL      R1,R2,R1
   \   0000006C   0x020E             LSLS     R6,R1,#+8
   \   0000006E   0x0A36             LSRS     R6,R6,#+8
   \   00000070   0xE003             B.N      ??ftoa_3
    277          				}
    278          				else /* if (exp2 < 0) */
    279          					{
    280          						frac_part = (mantissa & 0xFFFFFF) >> -(exp2 + 1);
   \                     ??ftoa_4: (+1)
   \   00000072   0x1C49             ADDS     R1,R1,#+1
   \   00000074   0x4249             RSBS     R1,R1,#+0
   \   00000076   0x4616             MOV      R6,R2
   \   00000078   0x410E             ASRS     R6,R6,R1
    281          					}
    282          	
    283          	p = outbuf;
   \                     ??ftoa_3: (+1)
   \   0000007A   0x....             LDR.N    R4,??DataTable0
   \   0000007C   0x4627             MOV      R7,R4
    284          
    285          	if(x.L < 0)
   \   0000007E   0x9900             LDR      R1,[SP, #+0]
   \   00000080   0x2900             CMP      R1,#+0
   \   00000082   0xD502             BPL.N    ??ftoa_5
    286          		*p++ = '-';
   \   00000084   0x212D             MOVS     R1,#+45
   \   00000086   0x7021             STRB     R1,[R4, #+0]
   \   00000088   0x1C67             ADDS     R7,R4,#+1
    287          
    288          	if (int_part == 0)
   \                     ??ftoa_5: (+1)
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD103             BNE.N    ??ftoa_6
    289          		*p++ = '0';
   \   0000008E   0x2030             MOVS     R0,#+48
   \   00000090   0xF807 0x0B01      STRB     R0,[R7], #+1
   \   00000094   0xE009             B.N      ??ftoa_7
    290          	else
    291          		{
    292          			itos(int_part,p,10);
   \                     ??ftoa_6: (+1)
   \   00000096   0x230A             MOVS     R3,#+10
   \   00000098   0x461A             MOV      R2,R3
   \   0000009A   0x4639             MOV      R1,R7
   \   0000009C   0x.... 0x....      BL       _Z4itosiPci5Radix
   \   000000A0   0xE000             B.N      ??ftoa_8
    293          			while (*p)
    294          				p++;
   \                     ??ftoa_9: (+1)
   \   000000A2   0x1C7F             ADDS     R7,R7,#+1
   \                     ??ftoa_8: (+1)
   \   000000A4   0x7838             LDRB     R0,[R7, #+0]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD1FB             BNE.N    ??ftoa_9
    295          		}
    296          	*p++ = '.';
   \                     ??ftoa_7: (+1)
   \   000000AA   0x202E             MOVS     R0,#+46
   \   000000AC   0xF807 0x0B01      STRB     R0,[R7], #+1
    297          
    298          	if(frac_part == 0)
   \   000000B0   0x2E00             CMP      R6,#+0
   \   000000B2   0xD103             BNE.N    ??ftoa_10
    299          		*p++ = '0';
   \   000000B4   0x2030             MOVS     R0,#+48
   \   000000B6   0xF807 0x0B01      STRB     R0,[R7], #+1
   \   000000BA   0xE020             B.N      ??ftoa_11
    300          	else
    301          		{
    302          			char m, max;
    303          
    304          			max = sizeof (outbuf) - (p - outbuf) - 1;
   \                     ??ftoa_10: (+1)
   \   000000BC   0x1BE0             SUBS     R0,R4,R7
   \   000000BE   0x300E             ADDS     R0,R0,#+14
   \   000000C0   0xB2C0             UXTB     R0,R0
    305          			if (max > Fract)
   \   000000C2   0x4285             CMP      R5,R0
   \   000000C4   0xDA01             BGE.N    ??ftoa_12
    306          			max = Fract;
   \   000000C6   0xB2ED             UXTB     R5,R5
   \   000000C8   0x4628             MOV      R0,R5
    307          			/* print BCD */
    308          			for(m = 0; m < max; m++)
   \                     ??ftoa_12: (+1)
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0xE009             B.N      ??ftoa_13
    309          				{
    310          					/* frac_part *= 10; */
    311          					frac_part = (frac_part << 3) + (frac_part << 1); 
   \                     ??ftoa_14: (+1)
   \   000000CE   0x0072             LSLS     R2,R6,#+1
   \   000000D0   0xEB02 0x02C6      ADD      R2,R2,R6, LSL #+3
    312          
    313          					*p++ = (frac_part >> 24) + '0';
   \   000000D4   0x1613             ASRS     R3,R2,#+24
   \   000000D6   0x3330             ADDS     R3,R3,#+48
   \   000000D8   0xF807 0x3B01      STRB     R3,[R7], #+1
    314          					frac_part &= 0xFFFFFF;
   \   000000DC   0x0216             LSLS     R6,R2,#+8
   \   000000DE   0x0A36             LSRS     R6,R6,#+8
    315          				}
   \   000000E0   0x1C49             ADDS     R1,R1,#+1
   \                     ??ftoa_13: (+1)
   \   000000E2   0xB2C9             UXTB     R1,R1
   \   000000E4   0x4281             CMP      R1,R0
   \   000000E6   0xDBF2             BLT.N    ??ftoa_14
    316          			/* delete ending zeroes */
    317          			for (--p; p[0] == '0' && p[-1] != '.'; --p) ;
   \   000000E8   0x1E78             SUBS     R0,R7,#+1
   \   000000EA   0xE000             B.N      ??ftoa_15
   \                     ??ftoa_16: (+1)
   \   000000EC   0x1E40             SUBS     R0,R0,#+1
   \                     ??ftoa_15: (+1)
   \   000000EE   0x7801             LDRB     R1,[R0, #+0]
   \   000000F0   0x2930             CMP      R1,#+48
   \   000000F2   0xD103             BNE.N    ??ftoa_17
   \   000000F4   0xF810 0x1C01      LDRB     R1,[R0, #-1]
   \   000000F8   0x292E             CMP      R1,#+46
   \   000000FA   0xD1F7             BNE.N    ??ftoa_16
    318          			++p;
   \                     ??ftoa_17: (+1)
   \   000000FC   0x1C47             ADDS     R7,R0,#+1
    319          		}
    320          
    321          	*p = 0;
   \                     ??ftoa_11: (+1)
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x7038             STRB     R0,[R7, #+0]
    322          
    323          	return outbuf;
   \   00000102   0x4620             MOV      R0,R4
   \                     ??ftoa_1: (+1)
   \   00000104   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    324          }

   \                                 In section .bss, align 4
   \                     ??outbuf:
   \   00000000                      DS8 16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     ??outbuf
    325          //------------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ClearSrcBuffer(BYTE *)
       0   CopySrcBuffer(BYTE *, BYTE *)
       0   FillSrcBuffer(BYTE *, BYTE)
      24   ftoa(float, int)
        24   -> itos(int, char *, int, Radix)
      16   itodts(int, char *, int)
      16   itos(int, char *, int, Radix)
      16   ix10tosAsFloat(int, char *, int)
        16   -> itos(int, char *, int, Radix)
        16   -> strlen
       0   reverseBits(int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      18  ClearSrcBuffer(BYTE *)
      18  CopySrcBuffer(BYTE *, BYTE *)
      16  FillSrcBuffer(BYTE *, BYTE)
     262  ftoa(float, int)
     140  itodts(int, char *, int)
     180  itos(int, char *, int, Radix)
      68  ix10tosAsFloat(int, char *, int)
      16  outbuf
       6  reverseBits(int)

 
  16 bytes in section .bss
 712 bytes in section .text
 
 712 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none

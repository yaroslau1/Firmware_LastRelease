###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        12/Oct/2018  15:54:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\common.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\common.c -D IAR_ARM_CM4
#        -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H -D
#        SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D STENDBUY_NOT_USE
#        -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO -D
#        BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\common.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\common.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\common.c
      1          /**
      2            ******************************************************************************
      3            * @file    IAP/src/common.c
      4            * @author  MCD Application Team
      5            * @version V3.2.0
      6            * @date    04/23/2010
      7            * @brief   This file provides all the common functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */
     20          
     21          /** @addtogroup IAP
     22            * @{
     23            */
     24          
     25          /* Includes ------------------------------------------------------------------*/
     26          #include "main.h"
     27          #include "common.h"
     28          #include "flash_if.h"
     29          #include "IAP.h"
     30          #include "THardware.h"
     31          
     32          
     33          
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     38          pFunction Jump_To_Application;
     39          uint32_t JumpAddress;
     40          uint32_t BlockNbr = 0, UserMemoryMask = 0;
     41          bool FlashProtection = false;
   \                     FlashProtection:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     Jump_To_Application:
   \   00000004                      DS8 4
   \                     JumpAddress:
   \   00000008                      DS8 4

   \                                 In section .bss, align 4
   \                     BlockNbr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     UserMemoryMask:
   \   00000000                      DS8 4
     42          extern uint32_t FlashDestination;
     43          /* Private function prototypes -----------------------------------------------*/
     44          /* Private functions ---------------------------------------------------------*/
     45          
     46          /**
     47            * @brief  Convert an Integer to a string
     48            * @param  str: The string
     49            * @param  intnum: The intger to be converted
     50            * @retval None
     51            */

   \                                 In section .text, align 2, keep-with-next
     52          void Int2Str(uint8_t* str, int32_t intnum)
     53          {
   \                     Int2Str: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
     54            uint32_t i, Div = 1000000000, j = 0, Status = 0;
   \   00000002   0x....             LDR.N    R2,??DataTable18_2  ;; 0x3b9aca00
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x461C             MOV      R4,R3
     55          
     56            for (i = 0; i < 10; i++)
   \   00000008   0x461D             MOV      R5,R3
   \   0000000A   0xE001             B.N      ??Int2Str_0
     57            {
     58              str[j++] = (intnum / Div) + 48;
     59          
     60              intnum = intnum % Div;
     61              Div /= 10;
     62              if ((str[j-1] == '0') & (Status == 0))
     63              {
     64                j = 0;
     65              }
     66              else
     67              {
     68                Status++;
   \                     ??Int2Str_1: (+1)
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
     69              }
   \                     ??Int2Str_2: (+1)
   \   0000000E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??Int2Str_0: (+1)
   \   00000010   0x2D0A             CMP      R5,#+10
   \   00000012   0xD213             BCS.N    ??Int2Str_3
   \   00000014   0xFBB1 0xF6F2      UDIV     R6,R1,R2
   \   00000018   0xF106 0x0730      ADD      R7,R6,#+48
   \   0000001C   0x541F             STRB     R7,[R3, R0]
   \   0000001E   0x1C5B             ADDS     R3,R3,#+1
   \   00000020   0xFB02 0x1116      MLS      R1,R2,R6,R1
   \   00000024   0x260A             MOVS     R6,#+10
   \   00000026   0xFBB2 0xF2F6      UDIV     R2,R2,R6
   \   0000002A   0x181E             ADDS     R6,R3,R0
   \   0000002C   0xF816 0x6C01      LDRB     R6,[R6, #-1]
   \   00000030   0x2E30             CMP      R6,#+48
   \   00000032   0xD1EB             BNE.N    ??Int2Str_1
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD1E9             BNE.N    ??Int2Str_1
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0xE7E8             B.N      ??Int2Str_2
     70            }
     71          }
   \                     ??Int2Str_3: (+1)
   \   0000003C   0xBCF0             POP      {R4-R7}
   \   0000003E   0x4770             BX       LR               ;; return
     72          
     73          /**
     74            * @brief  Convert a string to an integer
     75            * @param  inputstr: The string to be converted
     76            * @param  intnum: The intger value
     77            * @retval 1: Correct
     78            *         0: Error
     79            */

   \                                 In section .text, align 2, keep-with-next
     80          uint32_t Str2Int(uint8_t *inputstr, int32_t *intnum)
     81          {
   \                     Str2Int: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x460A             MOV      R2,R1
     82            uint32_t i = 0, res = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x4621             MOV      R1,R4
     83            uint32_t val = 0;
   \   00000008   0x460B             MOV      R3,R1
     84          
     85            if (inputstr[0] == '0' && (inputstr[1] == 'x' || inputstr[1] == 'X'))
   \   0000000A   0x7805             LDRB     R5,[R0, #+0]
   \   0000000C   0x2D30             CMP      R5,#+48
   \   0000000E   0xD139             BNE.N    ??Str2Int_0
   \   00000010   0x7845             LDRB     R5,[R0, #+1]
   \   00000012   0x2D78             CMP      R5,#+120
   \   00000014   0xD001             BEQ.N    ??Str2Int_1
   \   00000016   0x2D58             CMP      R5,#+88
   \   00000018   0xD134             BNE.N    ??Str2Int_0
     86            {
     87              if (inputstr[2] == '\0')
   \                     ??Str2Int_1: (+1)
   \   0000001A   0x7884             LDRB     R4,[R0, #+2]
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD101             BNE.N    ??Str2Int_2
     88              {
     89                return 0;
   \   00000020   0x4608             MOV      R0,R1
   \   00000022   0xE053             B.N      ??Str2Int_3
     90              }
     91              for (i = 2; i < 11; i++)
   \                     ??Str2Int_2: (+1)
   \   00000024   0x2402             MOVS     R4,#+2
   \   00000026   0xE003             B.N      ??Str2Int_4
     92              {
     93                if (inputstr[i] == '\0')
     94                {
     95                  *intnum = val;
     96                  /* return 1; */
     97                  res = 1;
     98                  break;
     99                }
    100                if (ISVALIDHEX(inputstr[i]))
    101                {
    102                  val = (val << 4) + CONVERTHEX(inputstr[i]);
   \                     ??Str2Int_5: (+1)
   \   00000028   0x3D57             SUBS     R5,R5,#+87
   \                     ??Str2Int_6: (+1)
   \   0000002A   0xEB05 0x1303      ADD      R3,R5,R3, LSL #+4
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \                     ??Str2Int_4: (+1)
   \   00000030   0x2C0B             CMP      R4,#+11
   \   00000032   0xD204             BCS.N    ??Str2Int_7
   \   00000034   0x5C25             LDRB     R5,[R4, R0]
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD105             BNE.N    ??Str2Int_8
   \   0000003A   0x6013             STR      R3,[R2, #+0]
   \   0000003C   0x2101             MOVS     R1,#+1
    103                }
    104                else
    105                {
    106                  /* return 0, Invalid input */
    107                  res = 0;
    108                  break;
    109                }
    110              }
    111              /* over 8 digit hex --invalid */
    112              if (i >= 11)
   \                     ??Str2Int_7: (+1)
   \   0000003E   0x2C0B             CMP      R4,#+11
   \   00000040   0xD343             BCC.N    ??Str2Int_9
    113              {
    114                res = 0;
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xE041             B.N      ??Str2Int_9
    115              }
   \                     ??Str2Int_8: (+1)
   \   00000046   0x462E             MOV      R6,R5
   \   00000048   0xF1A6 0x0741      SUB      R7,R6,#+65
   \   0000004C   0x2F06             CMP      R7,#+6
   \   0000004E   0xD309             BCC.N    ??Str2Int_10
   \   00000050   0xF1A6 0x0C61      SUB      R12,R6,#+97
   \   00000054   0xF1BC 0x0F06      CMP      R12,#+6
   \   00000058   0xD304             BCC.N    ??Str2Int_10
   \   0000005A   0xF1A6 0x0C30      SUB      R12,R6,#+48
   \   0000005E   0xF1BC 0x0F0A      CMP      R12,#+10
   \   00000062   0xD2EC             BCS.N    ??Str2Int_7
   \                     ??Str2Int_10: (+1)
   \   00000064   0x3E30             SUBS     R6,R6,#+48
   \   00000066   0x2E0A             CMP      R6,#+10
   \   00000068   0xD201             BCS.N    ??Str2Int_11
   \   0000006A   0x3D30             SUBS     R5,R5,#+48
   \   0000006C   0xE7DD             B.N      ??Str2Int_6
   \                     ??Str2Int_11: (+1)
   \   0000006E   0x2F06             CMP      R7,#+6
   \   00000070   0xD2DA             BCS.N    ??Str2Int_5
   \   00000072   0x3D37             SUBS     R5,R5,#+55
   \   00000074   0xE7D9             B.N      ??Str2Int_6
    116            }
    117            else /* max 10-digit decimal input */
    118            {
    119              for (i = 0;i < 11;i++)
    120              {
    121                if (inputstr[i] == '\0')
    122                {
    123                  *intnum = val;
    124                  /* return 1 */
    125                  res = 1;
    126                  break;
    127                }
    128                else if ((inputstr[i] == 'k' || inputstr[i] == 'K') && (i > 0))
    129                {
    130                  val = val << 10;
    131                  *intnum = val;
    132                  res = 1;
    133                  break;
    134                }
    135                else if ((inputstr[i] == 'm' || inputstr[i] == 'M') && (i > 0))
    136                {
    137                  val = val << 20;
    138                  *intnum = val;
    139                  res = 1;
    140                  break;
    141                }
    142                else if (ISVALIDDEC(inputstr[i]))
    143                {
    144                  val = val * 10 + CONVERTDEC(inputstr[i]);
   \                     ??Str2Int_12: (+1)
   \   00000076   0xEB03 0x0683      ADD      R6,R3,R3, LSL #+2
   \   0000007A   0xF1A5 0x0330      SUB      R3,R5,#+48
   \   0000007E   0xEB03 0x0346      ADD      R3,R3,R6, LSL #+1
    145                }
   \   00000082   0x1C64             ADDS     R4,R4,#+1
   \                     ??Str2Int_0: (+1)
   \   00000084   0x2C0B             CMP      R4,#+11
   \   00000086   0xD21D             BCS.N    ??Str2Int_13
   \   00000088   0x5C26             LDRB     R6,[R4, R0]
   \   0000008A   0x2E00             CMP      R6,#+0
   \   0000008C   0xD102             BNE.N    ??Str2Int_14
   \   0000008E   0x6013             STR      R3,[R2, #+0]
   \   00000090   0x2101             MOVS     R1,#+1
   \   00000092   0xE017             B.N      ??Str2Int_13
   \                     ??Str2Int_14: (+1)
   \   00000094   0x4635             MOV      R5,R6
   \   00000096   0x2D6B             CMP      R5,#+107
   \   00000098   0xD001             BEQ.N    ??Str2Int_15
   \   0000009A   0x2D4B             CMP      R5,#+75
   \   0000009C   0xD105             BNE.N    ??Str2Int_16
   \                     ??Str2Int_15: (+1)
   \   0000009E   0x2C00             CMP      R4,#+0
   \   000000A0   0xD003             BEQ.N    ??Str2Int_16
   \   000000A2   0x0298             LSLS     R0,R3,#+10
   \   000000A4   0x6010             STR      R0,[R2, #+0]
   \   000000A6   0x2101             MOVS     R1,#+1
   \   000000A8   0xE00C             B.N      ??Str2Int_13
   \                     ??Str2Int_16: (+1)
   \   000000AA   0x2D6D             CMP      R5,#+109
   \   000000AC   0xD001             BEQ.N    ??Str2Int_17
   \   000000AE   0x2D4D             CMP      R5,#+77
   \   000000B0   0xD105             BNE.N    ??Str2Int_18
   \                     ??Str2Int_17: (+1)
   \   000000B2   0x2C00             CMP      R4,#+0
   \   000000B4   0xD003             BEQ.N    ??Str2Int_18
   \   000000B6   0x0518             LSLS     R0,R3,#+20
   \   000000B8   0x6010             STR      R0,[R2, #+0]
   \   000000BA   0x2101             MOVS     R1,#+1
   \   000000BC   0xE002             B.N      ??Str2Int_13
   \                     ??Str2Int_18: (+1)
   \   000000BE   0x3E30             SUBS     R6,R6,#+48
   \   000000C0   0x2E0A             CMP      R6,#+10
   \   000000C2   0xD3D8             BCC.N    ??Str2Int_12
    146                else
    147                {
    148                  /* return 0, Invalid input */
    149                  res = 0;
    150                  break;
    151                }
    152              }
    153              /* Over 10 digit decimal --invalid */
    154              if (i >= 11)
   \                     ??Str2Int_13: (+1)
   \   000000C4   0x2C0B             CMP      R4,#+11
   \   000000C6   0xD300             BCC.N    ??Str2Int_9
    155              {
    156                res = 0;
   \   000000C8   0x2100             MOVS     R1,#+0
    157              }
    158            }
    159          
    160            return res;
   \                     ??Str2Int_9: (+1)
   \   000000CA   0x4608             MOV      R0,R1
   \                     ??Str2Int_3: (+1)
   \   000000CC   0xBCF0             POP      {R4-R7}
   \   000000CE   0x4770             BX       LR               ;; return
    161          }
    162          
    163          /**
    164            * @brief  Get an integer from the HyperTerminal
    165            * @param  num: The inetger
    166            * @retval 1: Correct
    167            *         0: Error
    168            */

   \                                 In section .text, align 2, keep-with-next
    169          uint32_t GetIntegerInput(int32_t * num)
    170          {
   \                     GetIntegerInput: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??GetIntegerInput_0
    171            uint8_t inputstr[16];
    172          
    173            while (1)
    174            {
    175              GetInputString(inputstr);
    176              if (inputstr[0] == '\0') continue;
    177              if ((inputstr[0] == 'a' || inputstr[0] == 'A') && inputstr[1] == '\0')
    178              {
    179                SerialPutString("User Cancelled \r\n");
    180                return 0;
    181              }
    182          
    183              if (Str2Int(inputstr, num) == 0)
    184              {
    185                SerialPutString("Error, Input again: \r\n");
   \                     ??GetIntegerInput_1: (+1)
   \   00000006   0x.... 0x....      ADR.W    R0,?_1
   \   0000000A   0x.... 0x....      BL       Serial_PutString
    186              }
   \                     ??GetIntegerInput_0: (+1)
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       GetInputString
   \   00000014   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD0F8             BEQ.N    ??GetIntegerInput_0
   \   0000001C   0x2861             CMP      R0,#+97
   \   0000001E   0xD001             BEQ.N    ??GetIntegerInput_2
   \   00000020   0x2841             CMP      R0,#+65
   \   00000022   0xD109             BNE.N    ??GetIntegerInput_3
   \                     ??GetIntegerInput_2: (+1)
   \   00000024   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD105             BNE.N    ??GetIntegerInput_3
   \   0000002C   0x.... 0x....      ADR.W    R0,?_0
   \   00000030   0x.... 0x....      BL       Serial_PutString
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE006             B.N      ??GetIntegerInput_4
   \                     ??GetIntegerInput_3: (+1)
   \   00000038   0x4621             MOV      R1,R4
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x.... 0x....      BL       Str2Int
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD0E0             BEQ.N    ??GetIntegerInput_1
    187              else
    188              {
    189                return 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??GetIntegerInput_4: (+1)
   \   00000046   0xB004             ADD      SP,SP,#+16
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    190              }
    191            }
    192          }
    193          
    194          /**
    195            * @brief  Test to see if a key has been pressed on the HyperTerminal
    196            * @param  key: The key pressed
    197            * @retval 1: Correct
    198            *         0: Error
    199            */

   \                                 In section .text, align 2, keep-with-next
    200          uint32_t SerialKeyPressed(uint8_t *key)
    201          {
    202          	if(UsartRcv & 0xFF00)
   \                     SerialKeyPressed: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable18_3
   \   00000002   0x680A             LDR      R2,[R1, #+0]
   \   00000004   0xF412 0x4F7F      TST      R2,#0xFF00
   \   00000008   0xD004             BEQ.N    ??SerialKeyPressed_0
    203          	{
    204          		*key = (BYTE)(UsartRcv & 0xFF);
   \   0000000A   0x7002             STRB     R2,[R0, #+0]
    205          		UsartRcv = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    206          //  if ( USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != RESET)
    207          //  {
    208          //    *key = (uint8_t)USART1->DR;
    209              return 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x4770             BX       LR
    210            }
    211            else
    212            {
    213              return 0;
   \                     ??SerialKeyPressed_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    214            }
    215          }
    216          
    217          /**
    218            * @brief  Get a key from the HyperTerminal
    219            * @param  None
    220            * @retval The Key Pressed
    221            */

   \                                 In section .text, align 2, keep-with-next
    222          uint8_t GetKey(void)
    223          {
   \                     GetKey: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    224            uint8_t key = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
    225          
    226            /* Waiting for user input */
    227            while (1)
    228            {
    229              if (SerialKeyPressed((uint8_t*)&key)) break;
   \                     ??GetKey_0: (+1)
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      BL       SerialKeyPressed
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD0FA             BEQ.N    ??GetKey_0
    230            }
    231            return key;
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    232          
    233          }
    234          
    235          /**
    236            * @brief  Print a character on the HyperTerminal
    237            * @param  c: The character to be printed
    238            * @retval None
    239            */

   \                                 In section .text, align 2, keep-with-next
    240          void SerialPutChar(uint8_t c)
    241          {
   \                     SerialPutChar: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    242            USART_SendData(LMX_USART, c);
   \   00000002   0x....             LDR.N    R4,??DataTable18_4  ;; 0x40011000
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       USART_SendData
    243            while (USART_GetFlagStatus(LMX_USART, USART_FLAG_TXE) == RESET)
   \                     ??SerialPutChar_0: (+1)
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD0F9             BEQ.N    ??SerialPutChar_0
    244            {
    245            }
    246          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    247          
    248          /**
    249            * @brief  Print a string on the HyperTerminal
    250            * @param  s: The string to be printed
    251            * @retval None
    252            */

   \                                 In section .text, align 2, keep-with-next
    253          void Serial_PutString(uint8_t *s)
    254          {
   \                     Serial_PutString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??Serial_PutString_0
    255            while (*s != '\0')
    256            {
    257              SerialPutChar(*s);
   \                     ??Serial_PutString_1: (+1)
   \   00000006   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   0000000A   0x.... 0x....      BL       SerialPutChar
    258              s++;
    259            }
   \                     ??Serial_PutString_0: (+1)
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD1F8             BNE.N    ??Serial_PutString_1
    260          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    261          
    262          /**
    263            * @brief  Get Input string from the HyperTerminal
    264            * @param  buffP: The input string
    265            * @retval None
    266            */

   \                                 In section .text, align 2, keep-with-next
    267          void GetInputString (uint8_t * buffP)
    268          {
   \                     GetInputString: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    269            uint32_t bytes_read = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    270            uint8_t c = 0;
   \   00000006   0xE004             B.N      ??GetInputString_0
    271            do
    272            {
    273              c = GetKey();
    274              if (c == '\r')
    275                break;
    276              if (c == '\b') /* Backspace */
    277              {
    278                if (bytes_read > 0)
    279                {
    280                  SerialPutString("\b \b");
    281                  bytes_read --;
    282                }
    283                continue;
    284              }
    285              if (bytes_read >= CMD_STRING_SIZE )
    286              {
    287                SerialPutString("Command string size overflow\r\n");
   \                     ??GetInputString_1: (+1)
   \   00000008   0x.... 0x....      ADR.W    R0,?_3
   \   0000000C   0x.... 0x....      BL       Serial_PutString
    288                bytes_read = 0;
   \   00000010   0x2500             MOVS     R5,#+0
    289                continue;
    290              }
   \                     ??GetInputString_0: (+1)
   \   00000012   0x.... 0x....      BL       GetKey
   \   00000016   0x280D             CMP      R0,#+13
   \   00000018   0xD105             BNE.N    ??GetInputString_2
    291              if (c >= 0x20 && c <= 0x7E)
    292              {
    293                buffP[bytes_read++] = c;
    294                SerialPutChar(c);
    295              }
    296            }
    297            while (1);
    298            SerialPutString(("\n\r"));
   \   0000001A   0x....             ADR.N    R0,??DataTable18  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000001C   0x.... 0x....      BL       Serial_PutString
    299            buffP[bytes_read] = '\0';
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x5528             STRB     R0,[R5, R4]
    300          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \                     ??GetInputString_2: (+1)
   \   00000026   0x2808             CMP      R0,#+8
   \   00000028   0xD106             BNE.N    ??GetInputString_3
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD0F1             BEQ.N    ??GetInputString_0
   \   0000002E   0x....             ADR.N    R0,??DataTable18_1  ;; "\b \b"
   \   00000030   0x.... 0x....      BL       Serial_PutString
   \   00000034   0x1E6D             SUBS     R5,R5,#+1
   \   00000036   0xE7EC             B.N      ??GetInputString_0
   \                     ??GetInputString_3: (+1)
   \   00000038   0x2D80             CMP      R5,#+128
   \   0000003A   0xD2E5             BCS.N    ??GetInputString_1
   \   0000003C   0xF1A0 0x0120      SUB      R1,R0,#+32
   \   00000040   0x295F             CMP      R1,#+95
   \   00000042   0xD2E6             BCS.N    ??GetInputString_0
   \   00000044   0x5528             STRB     R0,[R5, R4]
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
   \   00000048   0x.... 0x....      BL       SerialPutChar
   \   0000004C   0xE7E1             B.N      ??GetInputString_0
    301          
    302          /**
    303            * @brief  Display the Main Menu on HyperTerminal
    304            * @param  None
    305            * @retval None
    306            */

   \                                 In section .text, align 2, keep-with-next
    307          void Main_Menu(void)
    308          {
   \                     Main_Menu: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    309            uint8_t key = 0;
    310          
    311            if (FLASH_If_GetWriteProtectionStatus() == 0)   
   \   00000002   0x....             LDR.N    R4,??DataTable18_5
   \   00000004   0x.... 0x....      BL       _Z33FLASH_If_GetWriteProtectionStatusv
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \   0000000A   0x4180             SBCS     R0,R0,R0
   \   0000000C   0x0FC0             LSRS     R0,R0,#+31
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
   \   00000010   0xE001             B.N      ??Main_Menu_0
    312            {
    313              FlashProtection = 1;
    314            }
    315            else
    316            {
    317              FlashProtection = 0;
    318            }
    319          
    320            while (1)
    321            {
    322              SerialPutString("\r\n================== Main Menu ============================\r\n\n");
    323              SerialPutString("  Download Image To the STM32F4xx Internal Flash ------- 1\r\n\n");
    324              SerialPutString("  Execute The New Program ------------------------------ 2\r\n\n");
    325          
    326              if(FlashProtection != 0)
    327              {
    328                SerialPutString("  Disable the write protection ------------------------- 3\r\n\n");
    329              }
    330          
    331              SerialPutString("==========================================================\r\n\n");
    332          
    333              /* Receive key */
    334              key = GetKey();
    335          
    336              if (key == 0x31)
    337              {
    338                /* Download user application in the Flash */
    339                SerialDownload();
   \                     ??Main_Menu_1: (+1)
   \   00000012   0x.... 0x....      BL       SerialDownload
    340              }
   \                     ??Main_Menu_0: (+1)
   \   00000016   0x.... 0x....      ADR.W    R0,?_5
   \   0000001A   0x.... 0x....      BL       Serial_PutString
   \   0000001E   0x.... 0x....      ADR.W    R0,?_6
   \   00000022   0x.... 0x....      BL       Serial_PutString
   \   00000026   0x.... 0x....      ADR.W    R0,?_7
   \   0000002A   0x.... 0x....      BL       Serial_PutString
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD003             BEQ.N    ??Main_Menu_2
   \   00000034   0x.... 0x....      ADR.W    R0,?_8
   \   00000038   0x.... 0x....      BL       Serial_PutString
   \                     ??Main_Menu_2: (+1)
   \   0000003C   0x.... 0x....      ADR.W    R0,?_9
   \   00000040   0x.... 0x....      BL       Serial_PutString
   \   00000044   0x.... 0x....      BL       GetKey
   \   00000048   0x2831             CMP      R0,#+49
   \   0000004A   0xD0E2             BEQ.N    ??Main_Menu_1
    341              else if (key == 0x32) /* execute the new program */
   \   0000004C   0x2832             CMP      R0,#+50
   \   0000004E   0xD109             BNE.N    ??Main_Menu_3
    342              {
    343                JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
   \   00000050   0x....             LDR.N    R0,??DataTable18_6  ;; 0x8020000
   \   00000052   0x6841             LDR      R1,[R0, #+4]
   \   00000054   0x60A1             STR      R1,[R4, #+8]
    344                /* Jump to user application */
    345                Jump_To_Application = (pFunction) JumpAddress;
   \   00000056   0x6061             STR      R1,[R4, #+4]
    346                /* Initialize user application's Stack Pointer */
    347                __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF380 0x8808      MSR      MSP,R0
    348                Jump_To_Application();
   \   0000005E   0x4608             MOV      R0,R1
   \   00000060   0x4780             BLX      R0
   \   00000062   0xE7D8             B.N      ??Main_Menu_0
    349              }
    350              else if ((key == 0x33) && (FlashProtection == 1))
   \                     ??Main_Menu_3: (+1)
   \   00000064   0x7821             LDRB     R1,[R4, #+0]
   \   00000066   0x2833             CMP      R0,#+51
   \   00000068   0xD114             BNE.N    ??Main_Menu_4
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD012             BEQ.N    ??Main_Menu_4
    351              {
    352                /* Disable the write protection */
    353                switch (FLASH_If_DisableWriteProtection())
   \   0000006E   0x.... 0x....      BL       _Z31FLASH_If_DisableWriteProtectionv
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD002             BEQ.N    ??Main_Menu_5
   \   00000076   0x2802             CMP      R0,#+2
   \   00000078   0xD007             BEQ.N    ??Main_Menu_6
   \   0000007A   0xE7CC             B.N      ??Main_Menu_0
    354                {
    355                  case 1:
    356                  {
    357                    SerialPutString("Write Protection disabled...\r\n");
   \                     ??Main_Menu_5: (+1)
   \   0000007C   0x.... 0x....      ADR.W    R0,?_10
   \   00000080   0x.... 0x....      BL       Serial_PutString
    358                    FlashProtection = 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x7020             STRB     R0,[R4, #+0]
    359                    break;
   \   00000088   0xE7C5             B.N      ??Main_Menu_0
    360                  }
    361                  case 2:
    362                  {
    363                    SerialPutString("Error: Flash write unprotection failed...\r\n");
   \                     ??Main_Menu_6: (+1)
   \   0000008A   0x.... 0x....      ADR.W    R0,?_11
   \   0000008E   0x.... 0x....      BL       Serial_PutString
    364                    break;
   \   00000092   0xE7C0             B.N      ??Main_Menu_0
    365                  }
    366                  default:
    367                  {
    368                  }
    369                }
    370              }
    371              else
    372              {
    373                if (FlashProtection == 0)
   \                     ??Main_Menu_4: (+1)
   \   00000094   0x2900             CMP      R1,#+0
   \   00000096   0xD104             BNE.N    ??Main_Menu_7
    374                {
    375                  SerialPutString("Invalid Number ! ==> The number should be either 1 or 2\r\n\n");
   \   00000098   0x.... 0x....      ADR.W    R0,?_12
   \   0000009C   0x.... 0x....      BL       Serial_PutString
   \   000000A0   0xE7B9             B.N      ??Main_Menu_0
    376                }
    377                else
    378                {
    379                  SerialPutString("Invalid Number ! ==> The number should be either 1, 2 or 3\r\n\n");
   \                     ??Main_Menu_7: (+1)
   \   000000A2   0x.... 0x....      ADR.W    R0,?_13
   \   000000A6   0x.... 0x....      BL       Serial_PutString
   \   000000AA   0xE7B4             B.N      ??Main_Menu_0
    380                }
    381              }
    382            }
    383          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x08 0x20          DC8      "\b \b"
   \              0x08 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x3B9ACA00         DC32     0x3b9aca00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     UsartRcv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     FlashProtection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x08020000         DC32     0x8020000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x55 0x73          DC8 "User Cancelled \015\012"
   \              0x65 0x72    
   \              0x20 0x43    
   \              0x61 0x6E    
   \              0x63 0x65    
   \              0x6C 0x6C    
   \              0x65 0x64    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x45 0x72          DC8 "Error, Input again: \015\012"
   \              0x72 0x6F    
   \              0x72 0x2C    
   \              0x20 0x49    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x20 0x61    
   \              0x67 0x61    
   \              0x69 0x6E    
   \              0x3A 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x43 0x6F          DC8 "Command string size overflow\015\012"
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x74    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x08 0x20          DC8 "\010 \010"
   \              0x08 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000008   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000010   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 20H, 4DH, 61H, 69H
   \              0x3D 0x3D    
   \              0x20 0x4D    
   \              0x61 0x69    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 4DH, 65H, 6EH, 75H, 20H, 3DH
   \              0x4D 0x65    
   \              0x6E 0x75    
   \              0x20 0x3D    
   \   00000020   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000028   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000030   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000038   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 0DH, 0AH, 0AH, 0
   \              0x3D 0x0D    
   \              0x0A 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x20 0x20          DC8 20H, 20H, 44H, 6FH, 77H, 6EH, 6CH, 6FH
   \              0x44 0x6F    
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \   00000008   0x61 0x64          DC8 61H, 64H, 20H, 49H, 6DH, 61H, 67H, 65H
   \              0x20 0x49    
   \              0x6D 0x61    
   \              0x67 0x65    
   \   00000010   0x20 0x54          DC8 20H, 54H, 6FH, 20H, 74H, 68H, 65H, 20H
   \              0x6F 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \   00000018   0x53 0x54          DC8 53H, 54H, 4DH, 33H, 32H, 46H, 34H, 78H
   \              0x4D 0x33    
   \              0x32 0x46    
   \              0x34 0x78    
   \   00000020   0x78 0x20          DC8 78H, 20H, 49H, 6EH, 74H, 65H, 72H, 6EH
   \              0x49 0x6E    
   \              0x74 0x65    
   \              0x72 0x6E    
   \   00000028   0x61 0x6C          DC8 61H, 6CH, 20H, 46H, 6CH, 61H, 73H, 68H
   \              0x20 0x46    
   \              0x6C 0x61    
   \              0x73 0x68    
   \   00000030   0x20 0x2D          DC8 20H, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000038   0x20 0x31          DC8 20H, 31H, 0DH, 0AH, 0AH, 0
   \              0x0D 0x0A    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x20 0x20          DC8 20H, 20H, 45H, 78H, 65H, 63H, 75H, 74H
   \              0x45 0x78    
   \              0x65 0x63    
   \              0x75 0x74    
   \   00000008   0x65 0x20          DC8 65H, 20H, 54H, 68H, 65H, 20H, 4EH, 65H
   \              0x54 0x68    
   \              0x65 0x20    
   \              0x4E 0x65    
   \   00000010   0x77 0x20          DC8 77H, 20H, 50H, 72H, 6FH, 67H, 72H, 61H
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \   00000018   0x6D 0x20          DC8 6DH, 20H, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000020   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000028   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000030   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000038   0x20 0x32          DC8 20H, 32H, 0DH, 0AH, 0AH, 0
   \              0x0D 0x0A    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 20H, 20H, 44H, 69H, 73H, 61H, 62H, 6CH
   \              0x44 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \   00000008   0x65 0x20          DC8 65H, 20H, 74H, 68H, 65H, 20H, 77H, 72H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x77 0x72    
   \   00000010   0x69 0x74          DC8 69H, 74H, 65H, 20H, 70H, 72H, 6FH, 74H
   \              0x65 0x20    
   \              0x70 0x72    
   \              0x6F 0x74    
   \   00000018   0x65 0x63          DC8 65H, 63H, 74H, 69H, 6FH, 6EH, 20H, 2DH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x2D    
   \   00000020   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000028   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000030   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \   00000038   0x20 0x33          DC8 20H, 33H, 0DH, 0AH, 0AH, 0
   \              0x0D 0x0A    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000008   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000010   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000018   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000020   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000028   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000030   0x3D 0x3D          DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \   00000038   0x3D 0x3D          DC8 3DH, 3DH, 0DH, 0AH, 0AH, 0
   \              0x0D 0x0A    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x57 0x72          DC8 "Write Protection disabled...\015\012"
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x50 0x72    
   \              0x6F 0x74    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x45 0x72          DC8 "Error: Flash write unprotection failed...\015\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x46    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x75    
   \              0x6E 0x70    
   \              0x72 0x6F    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x49 0x6E          DC8 49H, 6EH, 76H, 61H, 6CH, 69H, 64H, 20H
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \   00000008   0x4E 0x75          DC8 4EH, 75H, 6DH, 62H, 65H, 72H, 20H, 21H
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x21    
   \   00000010   0x20 0x3D          DC8 20H, 3DH, 3DH, 3EH, 20H, 54H, 68H, 65H
   \              0x3D 0x3E    
   \              0x20 0x54    
   \              0x68 0x65    
   \   00000018   0x20 0x6E          DC8 20H, 6EH, 75H, 6DH, 62H, 65H, 72H, 20H
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \   00000020   0x73 0x68          DC8 73H, 68H, 6FH, 75H, 6CH, 64H, 20H, 62H
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x62    
   \   00000028   0x65 0x20          DC8 65H, 20H, 65H, 69H, 74H, 68H, 65H, 72H
   \              0x65 0x69    
   \              0x74 0x68    
   \              0x65 0x72    
   \   00000030   0x20 0x31          DC8 20H, 31H, 20H, 6FH, 72H, 20H, 32H, 0DH
   \              0x20 0x6F    
   \              0x72 0x20    
   \              0x32 0x0D    
   \   00000038   0x0A 0x0A          DC8 0AH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x49 0x6E          DC8 49H, 6EH, 76H, 61H, 6CH, 69H, 64H, 20H
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \   00000008   0x4E 0x75          DC8 4EH, 75H, 6DH, 62H, 65H, 72H, 20H, 21H
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x21    
   \   00000010   0x20 0x3D          DC8 20H, 3DH, 3DH, 3EH, 20H, 54H, 68H, 65H
   \              0x3D 0x3E    
   \              0x20 0x54    
   \              0x68 0x65    
   \   00000018   0x20 0x6E          DC8 20H, 6EH, 75H, 6DH, 62H, 65H, 72H, 20H
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \   00000020   0x73 0x68          DC8 73H, 68H, 6FH, 75H, 6CH, 64H, 20H, 62H
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x62    
   \   00000028   0x65 0x20          DC8 65H, 20H, 65H, 69H, 74H, 68H, 65H, 72H
   \              0x65 0x69    
   \              0x74 0x68    
   \              0x65 0x72    
   \   00000030   0x20 0x31          DC8 20H, 31H, 2CH, 20H, 32H, 20H, 6FH, 72H
   \              0x2C 0x20    
   \              0x32 0x20    
   \              0x6F 0x72    
   \   00000038   0x20 0x33          DC8 20H, 33H, 0DH, 0AH, 0AH, 0
   \              0x0D 0x0A    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0
    384          
    385          /**
    386            * @}
    387            */
    388          
    389          /*******************(C)COPYRIGHT 2010 STMicroelectronics *****END OF FILE******/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   GetInputString
        16   -> GetKey
        16   -> SerialPutChar
        16   -> Serial_PutString
      24   GetIntegerInput
        24   -> GetInputString
        24   -> Serial_PutString
        24   -> Str2Int
       8   GetKey
         8   -> SerialKeyPressed
      16   Int2Str
       8   Main_Menu
         8   -- Indirect call
         8   -> FLASH_If_DisableWriteProtection()
         8   -> FLASH_If_GetWriteProtectionStatus()
         8   -> GetKey
         8   -> SerialDownload
         8   -> Serial_PutString
       0   SerialKeyPressed
       8   SerialPutChar
         8   -> USART_GetFlagStatus
         8   -> USART_SendData
       8   Serial_PutString
         8   -> SerialPutChar
      16   Str2Int


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
      20  ?_0
      24  ?_1
      32  ?_10
      44  ?_11
      60  ?_12
      64  ?_13
       4  ?_2
      32  ?_3
       4  ?_4
      64  ?_5
      64  ?_6
      64  ?_7
      64  ?_8
      64  ?_9
       4  BlockNbr
      12  FlashProtection
          Jump_To_Application
          JumpAddress
      78  GetInputString
      74  GetIntegerInput
      24  GetKey
      64  Int2Str
     172  Main_Menu
      24  SerialKeyPressed
      26  SerialPutChar
      22  Serial_PutString
     208  Str2Int
       4  UserMemoryMask

 
    20 bytes in section .bss
     8 bytes in section .rodata
 1 316 bytes in section .text
 
 1 316 bytes of CODE  memory
     8 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: none

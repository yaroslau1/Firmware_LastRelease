###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        09/Oct/2018  16:32:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\flash_if.c
#    Command line =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\flash_if.c -D IAR_ARM_CM4
#        -D USE_STDPERIPH_DRIVER -D STM32F40_41xxx -D HAVE_CONFIG_H -D
#        SD_SPI_MODE -D USE_FULL_ASSERT -D DEVICE_2 -D TFT -D STENDBUY_NOT_USE
#        -D SCREEN_NOT_ROTATE -D USE_ADS1292R -D DISPLAY_GPIO -D
#        BUFFERED_TRANSFER -D LCD_TRACE -lCN
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\ -o
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FatFs\ -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\FreeRTOS\Source\portable\IAR\ARM_CM3\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\CoreSupport\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\CMSIS\CM4\DeviceSupport\STM32F4xx\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\speex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\include\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\
#        -I
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Libraries\STM32F10x_Speex_Lib\STM32\libspeex\iar\
#        -I D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\Fonts\ -Om --ec++
#    List file    =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\List\flash_if.lst
#    Object file  =  
#        D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\KP02_DEVICE_2\Obj\flash_if.o
#
###############################################################################

D:\WORK\Firmware_LastRelease\_7.0.95\MainMCU\flash_if.c
      1          /**
      2            ******************************************************************************
      3            * @file    STM32F4xx_IAP/src/flash_if.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    10-October-2011
      7            * @brief   This file provides all the memory related operation functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /** @addtogroup STM32F4xx_IAP
     23            * @{
     24            */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "flash_if.h"
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/
     33          /* Private function prototypes -----------------------------------------------*/
     34          static uint32_t GetSector(uint32_t Address);
     35          
     36          /* Private functions ---------------------------------------------------------*/
     37          
     38          /**
     39            * @brief  Unlocks Flash for write access
     40            * @param  None
     41            * @retval None
     42            */

   \                                 In section .text, align 2, keep-with-next
     43          void FLASH_If_Init(void)
     44          { 
   \                     _Z13FLASH_If_Initv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45            FLASH_Unlock(); 
   \   00000002   0x.... 0x....      BL       FLASH_Unlock
     46          
     47            /* Clear pending flags (if any) */  
     48            FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
     49                            FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
   \   00000006   0x20F3             MOVS     R0,#+243
   \   00000008   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000C   0x.... 0x....      B.W      FLASH_ClearFlag
     50          }
     51          
     52          /**
     53            * @brief  This function does an erase of all user flash area
     54            * @param  StartSector: start of user flash area
     55            * @retval 0: user flash area successfully erased
     56            *         1: error occurred
     57            */

   \                                 In section .text, align 2, keep-with-next
     58          uint32_t FLASH_If_Erase(uint32_t StartSector)
     59          {
   \                     _Z14FLASH_If_Erasej: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     60            uint32_t UserStartSector = FLASH_Sector_1, i = 0;
     61          
     62            /* Get the sector where start the user flash area */
     63            UserStartSector = GetSector(APPLICATION_ADDRESS);
     64          
     65            for(i = UserStartSector; i <= FLASH_Sector_11; i += 8)
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x8020000
   \   00000004   0x.... 0x....      BL       _Z9GetSectorj
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xE000             B.N      ??FLASH_If_Erase_0
   \                     ??FLASH_If_Erase_1: (+1)
   \   0000000C   0x3408             ADDS     R4,R4,#+8
   \                     ??FLASH_If_Erase_0: (+1)
   \   0000000E   0x2C59             CMP      R4,#+89
   \   00000010   0xD207             BCS.N    ??FLASH_If_Erase_2
     66            {
     67              /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     68                 be done by word */ 
     69              if (FLASH_EraseSector(i, VoltageRange_3) != FLASH_COMPLETE)
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       FLASH_EraseSector
   \   0000001A   0x2809             CMP      R0,#+9
   \   0000001C   0xD0F6             BEQ.N    ??FLASH_If_Erase_1
     70              {
     71                /* Error occurred while page erase */
     72                return (1);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD10             POP      {R4,PC}
     73              }
     74            }
     75            
     76            return (0);
   \                     ??FLASH_If_Erase_2: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
     77          }
     78          
     79          /**
     80            * @brief  This function writes a data buffer in flash (data are 32-bit aligned).
     81            * @note   After writing data buffer, the flash content is checked.
     82            * @param  FlashAddress: start address for writing data buffer
     83            * @param  Data: pointer on data buffer
     84            * @param  DataLength: length of data buffer (unit is 32-bit word)   
     85            * @retval 0: Data successfully written to Flash memory
     86            *         1: Error occurred while writing data in Flash memory
     87            *         2: Written Data in flash memory is different from expected one
     88            */

   \                                 In section .text, align 2, keep-with-next
     89          uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint32_t DataLength)
     90          {
   \                     _Z14FLASH_If_WritePVjPjj: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     91            uint32_t i = 0;
   \   00000008   0x2700             MOVS     R7,#+0
     92          
     93            for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
   \   0000000A   0xE003             B.N      ??FLASH_If_Write_0
     94            {
     95              /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     96                 be done by word */ 
     97              if (FLASH_ProgramWord(*FlashAddress, *(uint32_t*)(Data+i)) == FLASH_COMPLETE)
     98              {
     99               /* Check the written value */
    100                if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
    101                {
    102                  /* Flash content doesn't match SRAM content */
    103                  return(2);
    104                }
    105                /* Increment FLASH destination address */
    106                *FlashAddress += 4;
   \                     ??FLASH_If_Write_1: (+1)
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x1D00             ADDS     R0,R0,#+4
   \   00000010   0x6020             STR      R0,[R4, #+0]
   \   00000012   0x1C7F             ADDS     R7,R7,#+1
   \                     ??FLASH_If_Write_0: (+1)
   \   00000014   0x42B7             CMP      R7,R6
   \   00000016   0xD214             BCS.N    ??FLASH_If_Write_2
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable4_1  ;; 0x80ffffc
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD210             BCS.N    ??FLASH_If_Write_2
   \   00000020   0xF855 0x1027      LDR      R1,[R5, R7, LSL #+2]
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x.... 0x....      BL       FLASH_ProgramWord
   \   0000002A   0x2809             CMP      R0,#+9
   \   0000002C   0xD107             BNE.N    ??FLASH_If_Write_3
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF855 0x1027      LDR      R1,[R5, R7, LSL #+2]
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD0E8             BEQ.N    ??FLASH_If_Write_1
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xBDF2             POP      {R1,R4-R7,PC}
    107              }
    108              else
    109              {
    110                /* Error occurred while writing data in Flash memory */
    111                return (1);
   \                     ??FLASH_If_Write_3: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}
    112              }
    113            }
    114          
    115            return (0);
   \                     ??FLASH_If_Write_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    116          }
    117          
    118          /**
    119            * @brief  Returns the write protection status of user flash area.
    120            * @param  None
    121            * @retval 0: No write protected sectors inside the user flash area
    122            *         1: Some sectors inside the user flash area are write protected
    123            */

   \                                 In section .text, align 2, keep-with-next
    124          uint16_t FLASH_If_GetWriteProtectionStatus(void)
    125          {
   \                     _Z33FLASH_If_GetWriteProtectionStatusv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    126            uint32_t UserStartSector = FLASH_Sector_1;
    127          
    128            /* Get the sector where start the user flash area */
    129            UserStartSector = GetSector(APPLICATION_ADDRESS);
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x8020000
   \   00000004   0x.... 0x....      BL       _Z9GetSectorj
   \   00000008   0x08C4             LSRS     R4,R0,#+3
    130          
    131            /* Check if there are write protected sectors inside the user flash area */
    132            if ((FLASH_OB_GetWRP() >> (UserStartSector/8)) == (0xFFF >> (UserStartSector/8)))
   \   0000000A   0x.... 0x....      BL       FLASH_OB_GetWRP
   \   0000000E   0x4601             MOV      R1,R0
   \   00000010   0x4121             ASRS     R1,R1,R4
   \   00000012   0xF640 0x70FF      MOVW     R0,#+4095
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0x4122             ASRS     R2,R2,R4
   \   0000001A   0x4291             CMP      R1,R2
   \   0000001C   0xD101             BNE.N    ??FLASH_If_GetWriteProtectionStatus_0
    133            { /* No write protected sectors inside the user flash area */
    134              return 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD10             POP      {R4,PC}
    135            }
    136            else
    137            { /* Some sectors inside the user flash area are write protected */
    138              return 0;
   \                     ??FLASH_If_GetWriteProtectionStatus_0: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    139            }
    140          }
    141          
    142          /**
    143            * @brief  Disables the write protection of user flash area.
    144            * @param  None
    145            * @retval 1: Write Protection successfully disabled
    146            *         2: Error: Flash write unprotection failed
    147            */

   \                                 In section .text, align 2, keep-with-next
    148          uint32_t FLASH_If_DisableWriteProtection(void)
    149          {
   \                     _Z31FLASH_If_DisableWriteProtectionv: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    150            __IO uint32_t UserStartSector = FLASH_Sector_1, UserWrpSectors = OB_WRP_Sector_1;
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    151          
    152            /* Get the sector where start the user flash area */
    153            UserStartSector = GetSector(APPLICATION_ADDRESS);
   \   0000000C   0x....             LDR.N    R0,??DataTable4  ;; 0x8020000
   \   0000000E   0x.... 0x....      BL       _Z9GetSectorj
   \   00000012   0x9001             STR      R0,[SP, #+4]
    154          
    155            /* Mark all sectors inside the user flash area as non protected */  
    156            UserWrpSectors = 0xFFF-((1 << (UserStartSector/8))-1);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9901             LDR      R1,[SP, #+4]
   \   00000018   0x08C9             LSRS     R1,R1,#+3
   \   0000001A   0x4088             LSLS     R0,R0,R1
   \   0000001C   0xF5C0 0x5080      RSB      R0,R0,#+4096
   \   00000020   0x9000             STR      R0,[SP, #+0]
    157             
    158            /* Unlock the Option Bytes */
    159            FLASH_OB_Unlock();
   \   00000022   0x.... 0x....      BL       FLASH_OB_Unlock
    160          
    161            /* Disable the write protection for all sectors inside the user flash area */
    162            FLASH_OB_WRPConfig(UserWrpSectors, DISABLE);
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x.... 0x....      BL       FLASH_OB_WRPConfig
    163          
    164            /* Start the Option Bytes programming process. */  
    165            if (FLASH_OB_Launch() != FLASH_COMPLETE)
   \   0000002E   0x.... 0x....      BL       FLASH_OB_Launch
   \   00000032   0x2809             CMP      R0,#+9
   \   00000034   0xD001             BEQ.N    ??FLASH_If_DisableWriteProtection_0
    166            {
    167              /* Error: Flash write unprotection failed */
    168              return (2);
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xBD0E             POP      {R1-R3,PC}
    169            }
    170          
    171            /* Write Protection successfully disabled */
    172            return (1);
   \                     ??FLASH_If_DisableWriteProtection_0: (+1)
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xBD0E             POP      {R1-R3,PC}       ;; return
    173          }
    174          
    175          /**
    176            * @brief  Gets the sector of a given address
    177            * @param  Address: Flash address
    178            * @retval The sector of a given address
    179            */

   \                                 In section .text, align 2, keep-with-next
    180          static uint32_t GetSector(uint32_t Address)
    181          {
    182            uint32_t sector = 0;
   \                     _Z9GetSectorj: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    183            
    184            if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
   \   00000002   0xF1A0 0x6200      SUB      R2,R0,#+134217728
   \   00000006   0xF5B2 0x4F80      CMP      R2,#+16384
   \   0000000A   0xD346             BCC.N    ??GetSector_0
    185            {
    186              sector = FLASH_Sector_0;  
    187            }
    188            else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
   \   0000000C   0x....             LDR.N    R1,??DataTable4_2  ;; 0xf7ffc000
   \   0000000E   0x1809             ADDS     R1,R1,R0
   \   00000010   0xF5B1 0x4F80      CMP      R1,#+16384
   \   00000014   0xD201             BCS.N    ??GetSector_1
    189            {
    190              sector = FLASH_Sector_1;  
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0xE03F             B.N      ??GetSector_0
    191            }
    192            else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
   \                     ??GetSector_1: (+1)
   \   0000001A   0x....             LDR.N    R1,??DataTable4_3  ;; 0xf7ff8000
   \   0000001C   0x1809             ADDS     R1,R1,R0
   \   0000001E   0xF5B1 0x4F80      CMP      R1,#+16384
   \   00000022   0xD201             BCS.N    ??GetSector_2
    193            {
    194              sector = FLASH_Sector_2;  
   \   00000024   0x2110             MOVS     R1,#+16
   \   00000026   0xE038             B.N      ??GetSector_0
    195            }
    196            else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
   \                     ??GetSector_2: (+1)
   \   00000028   0x....             LDR.N    R1,??DataTable4_4  ;; 0xf7ff4000
   \   0000002A   0x1809             ADDS     R1,R1,R0
   \   0000002C   0xF5B1 0x4F80      CMP      R1,#+16384
   \   00000030   0xD201             BCS.N    ??GetSector_3
    197            {
    198              sector = FLASH_Sector_3;  
   \   00000032   0x2118             MOVS     R1,#+24
   \   00000034   0xE031             B.N      ??GetSector_0
    199            }
    200            else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
   \                     ??GetSector_3: (+1)
   \   00000036   0x....             LDR.N    R1,??DataTable4_5  ;; 0xf7ff0000
   \   00000038   0x1809             ADDS     R1,R1,R0
   \   0000003A   0xF5B1 0x3F80      CMP      R1,#+65536
   \   0000003E   0xD201             BCS.N    ??GetSector_4
    201            {
    202              sector = FLASH_Sector_4;  
   \   00000040   0x2120             MOVS     R1,#+32
   \   00000042   0xE02A             B.N      ??GetSector_0
    203            }
    204            else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
   \                     ??GetSector_4: (+1)
   \   00000044   0x....             LDR.N    R1,??DataTable4_6  ;; 0xf7fe0000
   \   00000046   0x1809             ADDS     R1,R1,R0
   \   00000048   0xF5B1 0x3F00      CMP      R1,#+131072
   \   0000004C   0xD201             BCS.N    ??GetSector_5
    205            {
    206              sector = FLASH_Sector_5;  
   \   0000004E   0x2128             MOVS     R1,#+40
   \   00000050   0xE023             B.N      ??GetSector_0
    207            }
    208            else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
   \                     ??GetSector_5: (+1)
   \   00000052   0x....             LDR.N    R1,??DataTable4_7  ;; 0xf7fc0000
   \   00000054   0x1809             ADDS     R1,R1,R0
   \   00000056   0xF5B1 0x3F00      CMP      R1,#+131072
   \   0000005A   0xD201             BCS.N    ??GetSector_6
    209            {
    210              sector = FLASH_Sector_6;  
   \   0000005C   0x2130             MOVS     R1,#+48
   \   0000005E   0xE01C             B.N      ??GetSector_0
    211            }
    212            else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
   \                     ??GetSector_6: (+1)
   \   00000060   0x....             LDR.N    R1,??DataTable4_8  ;; 0xf7fa0000
   \   00000062   0x1809             ADDS     R1,R1,R0
   \   00000064   0xF5B1 0x3F00      CMP      R1,#+131072
   \   00000068   0xD201             BCS.N    ??GetSector_7
    213            {
    214              sector = FLASH_Sector_7;  
   \   0000006A   0x2138             MOVS     R1,#+56
   \   0000006C   0xE015             B.N      ??GetSector_0
    215            }
    216            else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
   \                     ??GetSector_7: (+1)
   \   0000006E   0x....             LDR.N    R1,??DataTable4_9  ;; 0xf7f80000
   \   00000070   0x1809             ADDS     R1,R1,R0
   \   00000072   0xF5B1 0x3F00      CMP      R1,#+131072
   \   00000076   0xD201             BCS.N    ??GetSector_8
    217            {
    218              sector = FLASH_Sector_8;  
   \   00000078   0x2140             MOVS     R1,#+64
   \   0000007A   0xE00E             B.N      ??GetSector_0
    219            }
    220            else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
   \                     ??GetSector_8: (+1)
   \   0000007C   0x....             LDR.N    R1,??DataTable4_10  ;; 0xf7f60000
   \   0000007E   0x1809             ADDS     R1,R1,R0
   \   00000080   0xF5B1 0x3F00      CMP      R1,#+131072
   \   00000084   0xD201             BCS.N    ??GetSector_9
    221            {
    222              sector = FLASH_Sector_9;  
   \   00000086   0x2148             MOVS     R1,#+72
   \   00000088   0xE007             B.N      ??GetSector_0
    223            }
    224            else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
   \                     ??GetSector_9: (+1)
   \   0000008A   0x....             LDR.N    R1,??DataTable4_11  ;; 0xf7f40000
   \   0000008C   0x1808             ADDS     R0,R1,R0
   \   0000008E   0xF5B0 0x3F00      CMP      R0,#+131072
   \   00000092   0xD201             BCS.N    ??GetSector_10
    225            {
    226              sector = FLASH_Sector_10;  
   \   00000094   0x2150             MOVS     R1,#+80
   \   00000096   0xE000             B.N      ??GetSector_0
    227            }
    228            else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
    229            {
    230              sector = FLASH_Sector_11;  
   \                     ??GetSector_10: (+1)
   \   00000098   0x2158             MOVS     R1,#+88
    231            }
    232              return sector;
   \                     ??GetSector_0: (+1)
   \   0000009A   0x4608             MOV      R0,R1
   \   0000009C   0x4770             BX       LR               ;; return
    233          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x08020000         DC32     0x8020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x080FFFFC         DC32     0x80ffffc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xF7FFC000         DC32     0xf7ffc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xF7FF8000         DC32     0xf7ff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xF7FF4000         DC32     0xf7ff4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0xF7FF0000         DC32     0xf7ff0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xF7FE0000         DC32     0xf7fe0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0xF7FC0000         DC32     0xf7fc0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xF7FA0000         DC32     0xf7fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0xF7F80000         DC32     0xf7f80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xF7F60000         DC32     0xf7f60000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0xF7F40000         DC32     0xf7f40000
    234          
    235          /**
    236            * @}
    237            */
    238          
    239          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   FLASH_If_DisableWriteProtection()
        16   -> FLASH_OB_Launch
        16   -> FLASH_OB_Unlock
        16   -> FLASH_OB_WRPConfig
        16   -> GetSector(uint32_t)
       8   FLASH_If_Erase(uint32_t)
         8   -> FLASH_EraseSector
         8   -> GetSector(uint32_t)
       8   FLASH_If_GetWriteProtectionStatus()
         8   -> FLASH_OB_GetWRP
         8   -> GetSector(uint32_t)
       8   FLASH_If_Init()
         0   -> FLASH_ClearFlag
         8   -> FLASH_Unlock
      24   FLASH_If_Write(uint32_t volatile *, uint32_t *, uint32_t)
        24   -> FLASH_ProgramWord
       0   GetSector(uint32_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      62  FLASH_If_DisableWriteProtection()
      38  FLASH_If_Erase(uint32_t)
      38  FLASH_If_GetWriteProtectionStatus()
      16  FLASH_If_Init()
      70  FLASH_If_Write(uint32_t volatile *, uint32_t *, uint32_t)
     158  GetSector(uint32_t)

 
 430 bytes in section .text
 
 430 bytes of CODE memory

Errors: none
Warnings: none
